
high_speed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006478  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800667c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  2000000c  08006688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200005bc  08006688  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189ff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcc  00000000  00000000  00038a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a02e  00000000  00000000  0003df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ae  00000000  00000000  00067f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100247  00000000  00000000  000801dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059dc  00000000  00000000  00180474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800660c 	.word	0x0800660c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800660c 	.word	0x0800660c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fe35 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f816 	bl	8000528 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004fc:	f000 f876 	bl	80005ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa5c 	bl	80009bc <MX_GPIO_Init>
  MX_DAC1_Init();
 8000504:	f000 f8a0 	bl	8000648 <MX_DAC1_Init>
  MX_SDMMC1_SD_Init();
 8000508:	f000 f95a 	bl	80007c0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800050c:	f000 f988 	bl	8000820 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000510:	f000 fa02 	bl	8000918 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000514:	f000 f8d4 	bl	80006c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000518:	f000 f912 	bl	8000740 <MX_I2C2_Init>
  MX_SPI2_Init();
 800051c:	f000 f9be 	bl	800089c <MX_SPI2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000520:	f000 fa2a 	bl	8000978 <MX_USB_OTG_FS_HCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x34>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f006 f860 	bl	80065fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f001 fc63 	bl	8001e18 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 fab8 	bl	8000acc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f001 fc3e 	bl	8001ddc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <SystemClock_Config+0xc0>)
 8000562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000566:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <SystemClock_Config+0xc0>)
 8000568:	f023 0318 	bic.w	r3, r3, #24
 800056c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000570:	2314      	movs	r3, #20
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000580:	2360      	movs	r3, #96	; 0x60
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000588:	2301      	movs	r3, #1
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000590:	2320      	movs	r3, #32
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fc9d 	bl	8001ee4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b0:	f000 fa8c 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2303      	movs	r3, #3
 80005ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	2103      	movs	r1, #3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 f8a3 	bl	8002718 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005d8:	f000 fa78 	bl	8000acc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005dc:	f003 fb74 	bl	8003cc8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e0:	bf00      	nop
 80005e2:	3758      	adds	r7, #88	; 0x58
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0a4      	sub	sp, #144	; 0x90
 80005f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	228c      	movs	r2, #140	; 0x8c
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 ffff 	bl	80065fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1;
 80005fe:	f44f 2302 	mov.w	r3, #532480	; 0x82000
 8000602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000604:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000608:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800060a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800060e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000618:	2318      	movs	r3, #24
 800061a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800062c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fa95 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800063c:	f000 fa46 	bl	8000acc <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3790      	adds	r7, #144	; 0x90
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2224      	movs	r2, #36	; 0x24
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 ffd1 	bl	80065fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_DAC1_Init+0x70>)
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_DAC1_Init+0x74>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000660:	4815      	ldr	r0, [pc, #84]	; (80006b8 <MX_DAC1_Init+0x70>)
 8000662:	f000 ff28 	bl	80014b6 <HAL_DAC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800066c:	f000 fa2e 	bl	8000acc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_DAC1_Init+0x70>)
 800068c:	f000 ff35 	bl	80014fa <HAL_DAC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 fa19 	bl	8000acc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2210      	movs	r2, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_DAC1_Init+0x70>)
 80006a2:	f000 ff2a 	bl	80014fa <HAL_DAC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006ac:	f000 fa0e 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40007400 	.word	0x40007400

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_I2C1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_I2C1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_I2C1_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_I2C1_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_I2C1_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_I2C1_Init+0x74>)
 80006fc:	f001 fa47 	bl	8001b8e <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f9e1 	bl	8000acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_I2C1_Init+0x74>)
 800070e:	f001 facd 	bl	8001cac <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 f9d8 	bl	8000acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_I2C1_Init+0x74>)
 8000720:	f001 fb0f 	bl	8001d42 <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f9cf 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000003c 	.word	0x2000003c
 8000738:	40005400 	.word	0x40005400
 800073c:	10707dbc 	.word	0x10707dbc

08000740 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_I2C2_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_I2C2_Init+0x74>)
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <MX_I2C2_Init+0x7c>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000758:	2201      	movs	r2, #1
 800075a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800077a:	480e      	ldr	r0, [pc, #56]	; (80007b4 <MX_I2C2_Init+0x74>)
 800077c:	f001 fa07 	bl	8001b8e <HAL_I2C_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000786:	f000 f9a1 	bl	8000acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_I2C2_Init+0x74>)
 800078e:	f001 fa8d 	bl	8001cac <HAL_I2CEx_ConfigAnalogFilter>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000798:	f000 f998 	bl	8000acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_I2C2_Init+0x74>)
 80007a0:	f001 facf 	bl	8001d42 <HAL_I2CEx_ConfigDigitalFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f98f 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000090 	.word	0x20000090
 80007b8:	40005800 	.word	0x40005800
 80007bc:	10707dbc 	.word	0x10707dbc

080007c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_SDMMC1_SD_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 80007f0:	f003 fd4a 	bl	8004288 <HAL_SD_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80007fa:	f000 f967 	bl	8000acc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80007fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_SDMMC1_SD_Init+0x58>)
 8000804:	f003 ffba 	bl	800477c <HAL_SD_ConfigWideBusOperation>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f95d 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000e4 	.word	0x200000e4
 800081c:	40012800 	.word	0x40012800

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_SPI1_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_SPI1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_SPI1_Init+0x74>)
 800082c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI1_Init+0x74>)
 800083a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800083e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x74>)
 800084e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x74>)
 800086e:	2207      	movs	r2, #7
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x74>)
 800087a:	2208      	movs	r2, #8
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_SPI1_Init+0x74>)
 8000880:	f004 faf4 	bl	8004e6c <HAL_SPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f91f 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000168 	.word	0x20000168
 8000898:	40013000 	.word	0x40013000

0800089c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_SPI2_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_SPI2_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_SPI2_Init+0x74>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_SPI2_Init+0x74>)
 80008b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_SPI2_Init+0x74>)
 80008b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_SPI2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI2_Init+0x74>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_SPI2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_SPI2_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI2_Init+0x74>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_SPI2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI2_Init+0x74>)
 80008f8:	2208      	movs	r2, #8
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_SPI2_Init+0x74>)
 80008fe:	f004 fab5 	bl	8004e6c <HAL_SPI_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000908:	f000 f8e0 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200001cc 	.word	0x200001cc
 8000914:	40003800 	.word	0x40003800

08000918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART1_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800095c:	f004 fb29 	bl	8004fb2 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f8b1 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000230 	.word	0x20000230
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000982:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000986:	220c      	movs	r2, #12
 8000988:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000998:	2202      	movs	r2, #2
 800099a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009a4:	f001 f891 	bl	8001aca <HAL_HCD_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80009ae:	f000 f88d 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200002b4 	.word	0x200002b4

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <MX_GPIO_Init+0x104>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <MX_GPIO_Init+0x104>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <MX_GPIO_Init+0x104>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <MX_GPIO_Init+0x104>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a34      	ldr	r2, [pc, #208]	; (8000ac0 <MX_GPIO_Init+0x104>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <MX_GPIO_Init+0x104>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x104>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UI_LED_G_Pin|UI_LED_R_Pin|UI_LED_B_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <MX_GPIO_Init+0x108>)
 8000a50:	f001 f800 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UI_LED_G_Pin UI_LED_R_Pin UI_LED_B_Pin */
  GPIO_InitStruct.Pin = UI_LED_G_Pin|UI_LED_R_Pin|UI_LED_B_Pin;
 8000a54:	2307      	movs	r3, #7
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MX_GPIO_Init+0x108>)
 8000a6c:	f000 fe60 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_INT_Pin */
  GPIO_InitStruct.Pin = SD_Detect_INT_Pin;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_INT_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a86:	f000 fe53 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_INT_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_INT_Pin;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_INT_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fe44 	bl	8001730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2017      	movs	r0, #23
 8000aae:	f000 fccc 	bl	800144a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f000 fce5 	bl	8001482 <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	48000800 	.word	0x48000800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <HAL_DAC_MspInit+0x74>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d124      	bne.n	8000b8c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_DAC_MspInit+0x78>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <HAL_DAC_MspInit+0x78>)
 8000b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_DAC_MspInit+0x78>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_DAC_MspInit+0x78>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_DAC_MspInit+0x78>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_DAC_MspInit+0x78>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b72:	2330      	movs	r3, #48	; 0x30
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b76:	2303      	movs	r3, #3
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fdd2 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40007400 	.word	0x40007400
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0ae      	sub	sp, #184	; 0xb8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	228c      	movs	r2, #140	; 0x8c
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 fd1d 	bl	80065fc <memset>
  if(hi2c->Instance==I2C1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <HAL_I2C_MspInit+0x134>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d13c      	bne.n	8000c46 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 ffc1 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ff72 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bec:	4a39      	ldr	r2, [pc, #228]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf4:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c00:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c08:	2312      	movs	r3, #18
 8000c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c24:	4619      	mov	r1, r3
 8000c26:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <HAL_I2C_MspInit+0x13c>)
 8000c28:	f000 fd82 	bl	8001730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c36:	6593      	str	r3, [r2, #88]	; 0x58
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c44:	e040      	b.n	8000cc8 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <HAL_I2C_MspInit+0x140>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d13b      	bne.n	8000cc8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 ff7f 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000c68:	f7ff ff30 	bl	8000acc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <HAL_I2C_MspInit+0x13c>)
 8000cac:	f000 fd40 	bl	8001730 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cba:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_I2C_MspInit+0x138>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
}
 8000cc8:	bf00      	nop
 8000cca:	37b8      	adds	r7, #184	; 0xb8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	40005800 	.word	0x40005800

08000ce0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <HAL_SD_MspInit+0xb4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d144      	bne.n	8000d8c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_SD_MspInit+0xb8>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d4a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d4e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <HAL_SD_MspInit+0xbc>)
 8000d68:	f000 fce2 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <HAL_SD_MspInit+0xc0>)
 8000d88:	f000 fcd2 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40012800 	.word	0x40012800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a3d      	ldr	r2, [pc, #244]	; (8000eb8 <HAL_SPI_MspInit+0x114>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d129      	bne.n	8000e1a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a3c      	ldr	r2, [pc, #240]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STM_FPGA_SCK_Pin|STM_FPGA_MISO_Pin|STM_FPGA_MOSI_Pin;
 8000df6:	23c2      	movs	r3, #194	; 0xc2
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e06:	2305      	movs	r3, #5
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fc8c 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e18:	e049      	b.n	8000eae <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <HAL_SPI_MspInit+0x11c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d144      	bne.n	8000eae <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	4a24      	ldr	r2, [pc, #144]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_SPI_MspInit+0x118>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STM_UI_MOSI_Pin;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STM_UI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <HAL_SPI_MspInit+0x120>)
 8000e88:	f000 fc52 	bl	8001730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STM_UI_SCK_Pin;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STM_UI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000eaa:	f000 fc41 	bl	8001730 <HAL_GPIO_Init>
}
 8000eae:	bf00      	nop
 8000eb0:	3730      	adds	r7, #48	; 0x30
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000400 	.word	0x48000400

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0ae      	sub	sp, #184	; 0xb8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	228c      	movs	r2, #140	; 0x8c
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 fb85 	bl	80065fc <memset>
  if(huart->Instance==USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_UART_MspInit+0xf4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d15d      	bne.n	8000fb8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f00:	2300      	movs	r3, #0
 8000f02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fe29 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f14:	f7ff fdda 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1c:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6613      	str	r3, [r2, #96]	; 0x60
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_UART_MspInit+0xf8>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f000 fbd1 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_MspInit+0xfc>)
 8000fb4:	f000 fbbc 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	37b8      	adds	r7, #184	; 0xb8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000400 	.word	0x48000400

08000fcc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fec:	d146      	bne.n	800107c <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001018:	230a      	movs	r3, #10
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f000 fb83 	bl	8001730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8001030:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d114      	bne.n	8001078 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001066:	f000 ff2d 	bl	8001ec4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_HCD_MspInit+0xb8>)
 8001070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001076:	e001      	b.n	800107c <HAL_HCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8001078:	f000 ff24 	bl	8001ec4 <HAL_PWREx_EnableVddUSB>
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 f89a 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_Detect_INT_Pin);
 80010e0:	2080      	movs	r0, #128	; 0x80
 80010e2:	f000 fccf 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f005 fa39 	bl	80065b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff f9d5 	bl	80004f0 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001148:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001154:	0800667c 	.word	0x0800667c
  ldr r2, =_sbss
 8001158:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800115c:	200005bc 	.word	0x200005bc

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f961 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f80e 	bl	8001194 <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	e001      	b.n	8001188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001184:	f7ff fca8 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001188:	79fb      	ldrb	r3, [r7, #7]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d023      	beq.n	80011f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x70>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f96d 	bl	800149e <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d809      	bhi.n	80011e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f937 	bl	800144a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e001      	b.n	80011f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200005b8 	.word	0x200005b8

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200005b8 	.word	0x200005b8

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e014      	b.n	80014f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d105      	bne.n	80014de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fb21 	bl	8000b20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2202      	movs	r2, #2
 80014e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	795b      	ldrb	r3, [r3, #5]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_DAC_ConfigChannel+0x1c>
 8001512:	2302      	movs	r3, #2
 8001514:	e107      	b.n	8001726 <HAL_DAC_ConfigChannel+0x22c>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2202      	movs	r2, #2
 8001520:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b04      	cmp	r3, #4
 8001528:	d174      	bne.n	8001614 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800152a:	f7ff fe83 	bl	8001234 <HAL_GetTick>
 800152e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d134      	bne.n	80015a0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001536:	e011      	b.n	800155c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001538:	f7ff fe7c 	bl	8001234 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d90a      	bls.n	800155c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f043 0208 	orr.w	r2, r3, #8
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2203      	movs	r2, #3
 8001556:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0e4      	b.n	8001726 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1e6      	bne.n	8001538 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff fe6e 	bl	800124c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	6992      	ldr	r2, [r2, #24]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
 800157a:	e01e      	b.n	80015ba <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800157c:	f7ff fe5a 	bl	8001234 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d90a      	bls.n	80015a0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f043 0208 	orr.w	r2, r3, #8
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2203      	movs	r2, #3
 800159a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0c2      	b.n	8001726 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dbe8      	blt.n	800157c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fe4e 	bl	800124c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	6992      	ldr	r2, [r2, #24]
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	ea02 0103 	and.w	r1, r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	21ff      	movs	r1, #255	; 0xff
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	ea02 0103 	and.w	r1, r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	409a      	lsls	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d11d      	bne.n	8001658 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	221f      	movs	r2, #31
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2207      	movs	r2, #7
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	431a      	orrs	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	f640 72fc 	movw	r2, #4092	; 0xffc
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	22c0      	movs	r2, #192	; 0xc0
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e166      	b.n	8001a0e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8158 	beq.w	8001a08 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d005      	beq.n	8001770 <HAL_GPIO_Init+0x40>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d017      	beq.n	800180e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0203 	and.w	r2, r3, #3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80b2 	beq.w	8001a08 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a8:	4a60      	ldr	r2, [pc, #384]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6613      	str	r3, [r2, #96]	; 0x60
 80018b0:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018bc:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_GPIO_Init+0x300>)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e6:	d02b      	beq.n	8001940 <HAL_GPIO_Init+0x210>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_GPIO_Init+0x304>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d025      	beq.n	800193c <HAL_GPIO_Init+0x20c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x308>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d01f      	beq.n	8001938 <HAL_GPIO_Init+0x208>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a50      	ldr	r2, [pc, #320]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d019      	beq.n	8001934 <HAL_GPIO_Init+0x204>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4f      	ldr	r2, [pc, #316]	; (8001a40 <HAL_GPIO_Init+0x310>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_GPIO_Init+0x200>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_GPIO_Init+0x314>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00d      	beq.n	800192c <HAL_GPIO_Init+0x1fc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x318>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x1f8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x31c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_GPIO_Init+0x1f4>
 8001920:	2307      	movs	r3, #7
 8001922:	e00e      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001924:	2308      	movs	r3, #8
 8001926:	e00c      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001928:	2306      	movs	r3, #6
 800192a:	e00a      	b.n	8001942 <HAL_GPIO_Init+0x212>
 800192c:	2305      	movs	r3, #5
 800192e:	e008      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001930:	2304      	movs	r3, #4
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001934:	2303      	movs	r3, #3
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001938:	2302      	movs	r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x212>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001940:	2300      	movs	r3, #0
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001952:	4937      	ldr	r1, [pc, #220]	; (8001a30 <HAL_GPIO_Init+0x300>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_GPIO_Init+0x320>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001984:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <HAL_GPIO_Init+0x320>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_GPIO_Init+0x320>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ae:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_GPIO_Init+0x320>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b4:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_GPIO_Init+0x320>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_GPIO_Init+0x320>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_GPIO_Init+0x320>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_GPIO_Init+0x320>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f ae91 	bne.w	8001740 <HAL_GPIO_Init+0x10>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	48001000 	.word	0x48001000
 8001a44:	48001400 	.word	0x48001400
 8001a48:	48001800 	.word	0x48001800
 8001a4c:	48001c00 	.word	0x48001c00
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f806 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001acc:	b08f      	sub	sp, #60	; 0x3c
 8001ace:	af0a      	add	r7, sp, #40	; 0x28
 8001ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e054      	b.n	8001b86 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fa68 	bl	8000fcc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fbc4 	bl	80062a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	687e      	ldr	r6, [r7, #4]
 8001b28:	466d      	mov	r5, sp
 8001b2a:	f106 0410 	add.w	r4, r6, #16
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b3e:	1d33      	adds	r3, r6, #4
 8001b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	f004 fb84 	bl	8006250 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fbbb 	bl	80062ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	687e      	ldr	r6, [r7, #4]
 8001b5c:	466d      	mov	r5, sp
 8001b5e:	f106 0410 	add.w	r4, r6, #16
 8001b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b72:	1d33      	adds	r3, r6, #4
 8001b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b76:	6838      	ldr	r0, [r7, #0]
 8001b78:	f004 fc9a 	bl	80064b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e081      	b.n	8001ca4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d106      	bne.n	8001bba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7fe fff1 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2224      	movs	r2, #36	; 0x24
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	e006      	b.n	8001c16 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d104      	bne.n	8001c28 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69d9      	ldr	r1, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1a      	ldr	r2, [r3, #32]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d138      	bne.n	8001d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e032      	b.n	8001d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d139      	bne.n	8001dcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e033      	b.n	8001dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2224      	movs	r2, #36	; 0x24
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e26:	d130      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e34:	d038      	beq.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2232      	movs	r2, #50	; 0x32
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5c:	e002      	b.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	d102      	bne.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f2      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e84:	d110      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e00f      	b.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d007      	beq.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6053      	str	r3, [r2, #4]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f000 bc08 	b.w	8002708 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef8:	4b96      	ldr	r3, [pc, #600]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f02:	4b94      	ldr	r3, [pc, #592]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80e4 	beq.w	80020e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4c>
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	f040 808b 	bne.w	800203e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f040 8087 	bne.w	800203e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f30:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x64>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e3df      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_RCC_OscConfig+0x7e>
 8001f58:	4b7e      	ldr	r3, [pc, #504]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x8a>
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d223      	bcs.n	8001fba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fd92 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e3c0      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4968      	ldr	r1, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e025      	b.n	8002006 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a65      	ldr	r2, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4960      	ldr	r1, [pc, #384]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	495b      	ldr	r1, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd52 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e380      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002006:	f000 fc87 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4950      	ldr	r1, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCC_OscConfig+0x278>)
 8002024:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <HAL_RCC_OscConfig+0x27c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f8b2 	bl	8001194 <HAL_InitTick>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d052      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	e364      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d032      	beq.n	80020ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002052:	f7ff f8ef 	bl	8001234 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205a:	f7ff f8eb 	bl	8001234 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e34d      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4930      	ldr	r1, [pc, #192]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	492b      	ldr	r1, [pc, #172]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
 80020aa:	e01a      	b.n	80020e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a28      	ldr	r2, [pc, #160]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8bc 	bl	8001234 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c0:	f7ff f8b8 	bl	8001234 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e31a      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1dc>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d073      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x21c>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d10e      	bne.n	8002118 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d063      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d15f      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e2f7      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d106      	bne.n	8002130 <HAL_RCC_OscConfig+0x24c>
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e025      	b.n	800217c <HAL_RCC_OscConfig+0x298>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002138:	d114      	bne.n	8002164 <HAL_RCC_OscConfig+0x280>
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a02      	ldr	r2, [pc, #8]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x298>
 8002154:	40021000 	.word	0x40021000
 8002158:	08006624 	.word	0x08006624
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004
 8002164:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a9f      	ldr	r2, [pc, #636]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a9c      	ldr	r2, [pc, #624]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f856 	bl	8001234 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff f852 	bl	8001234 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e2b4      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2a8>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f842 	bl	8001234 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff f83e 	bl	8001234 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e2a0      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2d0>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d060      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x310>
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d116      	bne.n	8002222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f4:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x328>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e27d      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	4973      	ldr	r1, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002220:	e040      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d023      	beq.n	8002272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fffd 	bl	8001234 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7fe fff9 	bl	8001234 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e25b      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	495f      	ldr	r1, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	e018      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5c      	ldr	r2, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7fe ffd9 	bl	8001234 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7fe ffd5 	bl	8001234 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e237      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d03c      	beq.n	800232a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022be:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe ffb4 	bl	8001234 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe ffb0 	bl	8001234 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e212      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ef      	beq.n	80022d0 <HAL_RCC_OscConfig+0x3ec>
 80022f0:	e01b      	b.n	800232a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f8:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7fe ff97 	bl	8001234 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230a:	f7fe ff93 	bl	8001234 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1f5      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ef      	bne.n	800230a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80a6 	beq.w	8002484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002360:	2301      	movs	r3, #1
 8002362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d118      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237c:	f7fe ff5a 	bl	8001234 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe ff56 	bl	8001234 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1b8      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d108      	bne.n	80023bc <HAL_RCC_OscConfig+0x4d8>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ba:	e029      	b.n	8002410 <HAL_RCC_OscConfig+0x52c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d115      	bne.n	80023f0 <HAL_RCC_OscConfig+0x50c>
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x52c>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	4b9d      	ldr	r3, [pc, #628]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a9c      	ldr	r2, [pc, #624]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002400:	4b99      	ldr	r3, [pc, #612]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a98      	ldr	r2, [pc, #608]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d016      	beq.n	8002446 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe ff0c 	bl	8001234 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe ff08 	bl	8001234 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e168      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ed      	beq.n	8002420 <HAL_RCC_OscConfig+0x53c>
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fef5 	bl	8001234 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fef1 	bl	8001234 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e151      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002464:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ed      	bne.n	800244e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b7b      	ldr	r3, [pc, #492]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	4a7a      	ldr	r2, [pc, #488]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03c      	beq.n	800250a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002498:	4b73      	ldr	r3, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 800249a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249e:	4a72      	ldr	r2, [pc, #456]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fec4 	bl	8001234 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b0:	f7fe fec0 	bl	8001234 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e122      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c2:	4b69      	ldr	r3, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80024c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <HAL_RCC_OscConfig+0x5cc>
 80024d0:	e01b      	b.n	800250a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80024d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d8:	4a63      	ldr	r2, [pc, #396]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fea7 	bl	8001234 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ea:	f7fe fea3 	bl	8001234 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e105      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024fc:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80024fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ef      	bne.n	80024ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80f9 	beq.w	8002706 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b02      	cmp	r3, #2
 800251a:	f040 80cf 	bne.w	80026bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800251e:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0203 	and.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	429a      	cmp	r2, r3
 8002530:	d12c      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	3b01      	subs	r3, #1
 800253e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d123      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d11b      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d113      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d109      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	3b01      	subs	r3, #1
 8002586:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d071      	beq.n	8002670 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d068      	beq.n	8002664 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002592:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800259e:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0ac      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025ae:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80025b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025ba:	f7fe fe3b 	bl	8001234 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fe37 	bl	8001234 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e099      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_OscConfig+0x788>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025f0:	3a01      	subs	r2, #1
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	4311      	orrs	r1, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025fa:	0212      	lsls	r2, r2, #8
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0552      	lsls	r2, r2, #21
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800260e:	0852      	lsrs	r2, r2, #1
 8002610:	3a01      	subs	r2, #1
 8002612:	0652      	lsls	r2, r2, #25
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800261a:	06d2      	lsls	r2, r2, #27
 800261c:	430a      	orrs	r2, r1
 800261e:	4912      	ldr	r1, [pc, #72]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002620:	4313      	orrs	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800263c:	f7fe fdfa 	bl	8001234 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fdf6 	bl	8001234 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e058      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCC_OscConfig+0x784>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002662:	e050      	b.n	8002706 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e04f      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
 8002668:	40021000 	.word	0x40021000
 800266c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d144      	bne.n	8002706 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a23      	ldr	r2, [pc, #140]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 800268e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002692:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002694:	f7fe fdce 	bl	8001234 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fdca 	bl	8001234 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e02c      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x7b8>
 80026ba:	e024      	b.n	8002706 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d01f      	beq.n	8002702 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 80026c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fdb1 	bl	8001234 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fdad 	bl	8001234 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e00f      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4905      	ldr	r1, [pc, #20]	; (8002710 <HAL_RCC_OscConfig+0x82c>)
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x830>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60cb      	str	r3, [r1, #12]
 8002700:	e001      	b.n	8002706 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	feeefffc 	.word	0xfeeefffc

08002718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0e7      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b75      	ldr	r3, [pc, #468]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d910      	bls.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4970      	ldr	r1, [pc, #448]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cf      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002774:	429a      	cmp	r2, r3
 8002776:	d908      	bls.n	800278a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4960      	ldr	r1, [pc, #384]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d04c      	beq.n	8002830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d121      	bne.n	80027ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0a6      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b6:	4b54      	ldr	r3, [pc, #336]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e09a      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ce:	4b4e      	ldr	r3, [pc, #312]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e08e      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e086      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b46      	ldr	r3, [pc, #280]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4943      	ldr	r1, [pc, #268]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fd18 	bl	8001234 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fd14 	bl	8001234 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e06e      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d010      	beq.n	800285e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	429a      	cmp	r2, r3
 800284a:	d208      	bcs.n	800285e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	492b      	ldr	r1, [pc, #172]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d210      	bcs.n	800288e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 0207 	bic.w	r2, r3, #7
 8002874:	4923      	ldr	r1, [pc, #140]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287c:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e036      	b.n	80028fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4918      	ldr	r1, [pc, #96]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d009      	beq.n	80028cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4910      	ldr	r1, [pc, #64]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028cc:	f000 f824 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	490b      	ldr	r1, [pc, #44]	; (800290c <HAL_RCC_ClockConfig+0x1f4>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1f8>)
 80028ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1fc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fc4f 	bl	8001194 <HAL_InitTick>
 80028f6:	4603      	mov	r3, r0
 80028f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80028fa:	7afb      	ldrb	r3, [r7, #11]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000
 800290c:	08006624 	.word	0x08006624
 8002910:	20000000 	.word	0x20000000
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002926:	4b3e      	ldr	r3, [pc, #248]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002930:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x34>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d121      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d11e      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002958:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e005      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002968:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d102      	bne.n	8002996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002990:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e004      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800299e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d134      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0xa6>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d003      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0xac>
 80029bc:	e005      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80029c0:	617b      	str	r3, [r7, #20]
      break;
 80029c2:	e005      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80029c6:	617b      	str	r3, [r7, #20]
      break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	617b      	str	r3, [r7, #20]
      break;
 80029ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	3301      	adds	r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	fb03 f202 	mul.w	r2, r3, r2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	0e5b      	lsrs	r3, r3, #25
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	3301      	adds	r3, #1
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a10:	69bb      	ldr	r3, [r7, #24]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	0800663c 	.word	0x0800663c
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	007a1200 	.word	0x007a1200

08002a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4904      	ldr	r1, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	08006634 	.word	0x08006634

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a78:	f7ff ffda 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0adb      	lsrs	r3, r3, #11
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08006634 	.word	0x08006634

08002aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ab8:	f7ff f9a0 	bl	8001dfc <HAL_PWREx_GetVoltageRange>
 8002abc:	6178      	str	r0, [r7, #20]
 8002abe:	e014      	b.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ad8:	f7ff f990 	bl	8001dfc <HAL_PWREx_GetVoltageRange>
 8002adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d10b      	bne.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d919      	bls.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2ba0      	cmp	r3, #160	; 0xa0
 8002afc:	d902      	bls.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002afe:	2302      	movs	r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	e013      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b04:	2301      	movs	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e010      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d902      	bls.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b10:	2303      	movs	r3, #3
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e00a      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d102      	bne.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e004      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d101      	bne.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b28:	2301      	movs	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0207 	bic.w	r2, r3, #7
 8002b34:	4909      	ldr	r1, [pc, #36]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d041      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b84:	d02a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b8a:	d824      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b96:	d81e      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ba2:	e018      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ba4:	4b86      	ldr	r3, [pc, #536]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a85      	ldr	r2, [pc, #532]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bb0:	e015      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f895 	bl	8003ce8 <RCCEx_PLLSAI1_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc2:	e00c      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3320      	adds	r3, #32
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 f97e 	bl	8003ecc <RCCEx_PLLSAI2_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd4:	e003      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8002bda:	e000      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be4:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	4973      	ldr	r1, [pc, #460]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bfa:	e001      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d041      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c14:	d02a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c1a:	d824      	bhi.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c26:	d81e      	bhi.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c30:	d010      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c32:	e018      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c34:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a61      	ldr	r2, [pc, #388]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c40:	e015      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f84d 	bl	8003ce8 <RCCEx_PLLSAI1_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c52:	e00c      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3320      	adds	r3, #32
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f936 	bl	8003ecc <RCCEx_PLLSAI2_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	74fb      	strb	r3, [r7, #19]
      break;
 8002c6a:	e000      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c74:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c82:	494f      	ldr	r1, [pc, #316]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a0 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc4:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe faa8 	bl	8001234 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce6:	e009      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce8:	f7fe faa4 	bl	8001234 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ef      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d15c      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01f      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d019      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fa63 	bl	8001234 <HAL_GetTick>
 8002d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d70:	e00b      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fa5f 	bl	8001234 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d902      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	74fb      	strb	r3, [r7, #19]
            break;
 8002d88:	e006      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ec      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002db6:	e009      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
 8002dbc:	e006      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dcc:	7c7b      	ldrb	r3, [r7, #17]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4ba6      	ldr	r3, [pc, #664]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4aa5      	ldr	r2, [pc, #660]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dea:	4ba0      	ldr	r3, [pc, #640]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 0203 	bic.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	499c      	ldr	r1, [pc, #624]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e0c:	4b97      	ldr	r3, [pc, #604]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 020c 	bic.w	r2, r3, #12
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	4994      	ldr	r1, [pc, #592]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e2e:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	498b      	ldr	r1, [pc, #556]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e50:	4b86      	ldr	r3, [pc, #536]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4983      	ldr	r1, [pc, #524]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e72:	4b7e      	ldr	r3, [pc, #504]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	497a      	ldr	r1, [pc, #488]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4972      	ldr	r1, [pc, #456]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eb6:	4b6d      	ldr	r3, [pc, #436]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec4:	4969      	ldr	r1, [pc, #420]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ed8:	4b64      	ldr	r3, [pc, #400]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee6:	4961      	ldr	r1, [pc, #388]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f08:	4958      	ldr	r1, [pc, #352]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	4950      	ldr	r1, [pc, #320]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f3e:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4947      	ldr	r1, [pc, #284]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	493f      	ldr	r1, [pc, #252]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f82:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4936      	ldr	r1, [pc, #216]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa2:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fac:	60d3      	str	r3, [r2, #12]
 8002fae:	e011      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fe91 	bl	8003ce8 <RCCEx_PLLSAI1_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d028      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	491f      	ldr	r1, [pc, #124]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffe:	d106      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a19      	ldr	r2, [pc, #100]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300a:	60d3      	str	r3, [r2, #12]
 800300c:	e011      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003016:	d10c      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fe62 	bl	8003ce8 <RCCEx_PLLSAI1_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305c:	d108      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800305e:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003068:	60d3      	str	r3, [r2, #12]
 800306a:	e013      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800306c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fe31 	bl	8003ce8 <RCCEx_PLLSAI1_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02f      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a0:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ae:	4929      	ldr	r1, [pc, #164]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030be:	d10d      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	2102      	movs	r1, #2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fe0e 	bl	8003ce8 <RCCEx_PLLSAI1_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d014      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	74bb      	strb	r3, [r7, #18]
 80030da:	e011      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3320      	adds	r3, #32
 80030ea:	2102      	movs	r1, #2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 feed 	bl	8003ecc <RCCEx_PLLSAI2_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311c:	490d      	ldr	r1, [pc, #52]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	4904      	ldr	r1, [pc, #16]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003148:	7cbb      	ldrb	r3, [r7, #18]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000

08003158 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316a:	d13e      	bne.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800316c:	4bb4      	ldr	r3, [pc, #720]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317e:	d028      	beq.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003186:	f200 858c 	bhi.w	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003190:	d005      	beq.n	800319e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003198:	d00e      	beq.n	80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800319a:	f000 bd82 	b.w	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800319e:	4ba8      	ldr	r3, [pc, #672]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	f040 857c 	bne.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80031ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b2:	61fb      	str	r3, [r7, #28]
      break;
 80031b4:	f000 bd77 	b.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80031b8:	4ba1      	ldr	r3, [pc, #644]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80031ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	f040 8571 	bne.w	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 80031c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80031cc:	61fb      	str	r3, [r7, #28]
      break;
 80031ce:	f000 bd6c 	b.w	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031d2:	4b9b      	ldr	r3, [pc, #620]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031de:	f040 8566 	bne.w	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 80031e2:	4b98      	ldr	r3, [pc, #608]	; (8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80031e4:	61fb      	str	r3, [r7, #28]
      break;
 80031e6:	f000 bd62 	b.w	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ea:	4b95      	ldr	r3, [pc, #596]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d036      	beq.n	8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d840      	bhi.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d003      	beq.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d020      	beq.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800320c:	e039      	b.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800320e:	4b8c      	ldr	r3, [pc, #560]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d116      	bne.n	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800321a:	4b89      	ldr	r3, [pc, #548]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003226:	4b86      	ldr	r3, [pc, #536]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	e005      	b.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003232:	4b83      	ldr	r3, [pc, #524]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	4a82      	ldr	r2, [pc, #520]	; (8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003246:	e01f      	b.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
      break;
 800324c:	e01c      	b.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800324e:	4b7c      	ldr	r3, [pc, #496]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d102      	bne.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800325c:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800325e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003260:	e012      	b.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
      break;
 8003266:	e00f      	b.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003268:	4b75      	ldr	r3, [pc, #468]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003274:	d102      	bne.n	800327c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003278:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800327a:	e005      	b.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
      break;
 8003280:	e002      	b.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
      break;
 8003286:	bf00      	nop
    }

    switch(PeriphClk)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328e:	f000 842a 	beq.w	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003298:	f200 850b 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032a2:	f000 80df 	beq.w	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032ac:	f200 8501 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032b6:	f000 80d5 	beq.w	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032c0:	f200 84f7 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	f000 8377 	beq.w	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	f200 84ed 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032de:	f000 84c3 	beq.w	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	f200 84e3 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f2:	f000 82e6 	beq.w	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032fc:	f200 84d9 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003306:	f000 80ad 	beq.w	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	f200 84cf 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	f000 809b 	beq.w	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	f200 84c5 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332e:	d07f      	beq.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003336:	f200 84bc 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003340:	f000 8448 	beq.w	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	f200 84b2 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	f000 83f0 	beq.w	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335e:	f200 84a8 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003368:	f000 8391 	beq.w	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	f200 849e 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	f000 835c 	beq.w	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	f200 8496 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b20      	cmp	r3, #32
 800338a:	d84b      	bhi.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 848f 	beq.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	2b1f      	cmp	r3, #31
 800339a:	f200 848a 	bhi.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800339e:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	080035bb 	.word	0x080035bb
 80033a8:	0800362b 	.word	0x0800362b
 80033ac:	08003cb3 	.word	0x08003cb3
 80033b0:	080036bf 	.word	0x080036bf
 80033b4:	08003cb3 	.word	0x08003cb3
 80033b8:	08003cb3 	.word	0x08003cb3
 80033bc:	08003cb3 	.word	0x08003cb3
 80033c0:	08003747 	.word	0x08003747
 80033c4:	08003cb3 	.word	0x08003cb3
 80033c8:	08003cb3 	.word	0x08003cb3
 80033cc:	08003cb3 	.word	0x08003cb3
 80033d0:	08003cb3 	.word	0x08003cb3
 80033d4:	08003cb3 	.word	0x08003cb3
 80033d8:	08003cb3 	.word	0x08003cb3
 80033dc:	08003cb3 	.word	0x08003cb3
 80033e0:	080037bf 	.word	0x080037bf
 80033e4:	08003cb3 	.word	0x08003cb3
 80033e8:	08003cb3 	.word	0x08003cb3
 80033ec:	08003cb3 	.word	0x08003cb3
 80033f0:	08003cb3 	.word	0x08003cb3
 80033f4:	08003cb3 	.word	0x08003cb3
 80033f8:	08003cb3 	.word	0x08003cb3
 80033fc:	08003cb3 	.word	0x08003cb3
 8003400:	08003cb3 	.word	0x08003cb3
 8003404:	08003cb3 	.word	0x08003cb3
 8003408:	08003cb3 	.word	0x08003cb3
 800340c:	08003cb3 	.word	0x08003cb3
 8003410:	08003cb3 	.word	0x08003cb3
 8003414:	08003cb3 	.word	0x08003cb3
 8003418:	08003cb3 	.word	0x08003cb3
 800341c:	08003cb3 	.word	0x08003cb3
 8003420:	08003841 	.word	0x08003841
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	f000 82d9 	beq.w	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800342c:	f000 bc41 	b.w	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003430:	69b9      	ldr	r1, [r7, #24]
 8003432:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003436:	f000 fe25 	bl	8004084 <RCCEx_GetSAIxPeriphCLKFreq>
 800343a:	61f8      	str	r0, [r7, #28]
      break;
 800343c:	f000 bc3a 	b.w	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8003440:	40021000 	.word	0x40021000
 8003444:	0003d090 	.word	0x0003d090
 8003448:	0800663c 	.word	0x0800663c
 800344c:	00f42400 	.word	0x00f42400
 8003450:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800345a:	f000 fe13 	bl	8004084 <RCCEx_GetSAIxPeriphCLKFreq>
 800345e:	61f8      	str	r0, [r7, #28]
      break;
 8003460:	f000 bc28 	b.w	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003464:	4ba6      	ldr	r3, [pc, #664]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003476:	d015      	beq.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800347e:	f200 8092 	bhi.w	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003488:	d029      	beq.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003490:	f200 8089 	bhi.w	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d07b      	beq.n	8003592 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a0:	d04a      	beq.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 80034a2:	e080      	b.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80034a4:	4b96      	ldr	r3, [pc, #600]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d17c      	bne.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80034b0:	4b93      	ldr	r3, [pc, #588]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80034bc:	4b90      	ldr	r3, [pc, #576]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	e005      	b.n	80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80034c8:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	4a8b      	ldr	r2, [pc, #556]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	61fb      	str	r3, [r7, #28]
          break;
 80034dc:	e065      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ea:	d160      	bne.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80034ec:	4b84      	ldr	r3, [pc, #528]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f8:	d159      	bne.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80034fa:	4b81      	ldr	r3, [pc, #516]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003504:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	3301      	adds	r3, #1
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003520:	4b77      	ldr	r3, [pc, #476]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0d5b      	lsrs	r3, r3, #21
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	61fb      	str	r3, [r7, #28]
          break;
 8003536:	e03a      	b.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003538:	4b71      	ldr	r3, [pc, #452]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003544:	d135      	bne.n	80035b2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003546:	4b6e      	ldr	r3, [pc, #440]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003552:	d12e      	bne.n	80035b2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800355e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	fb03 f202 	mul.w	r2, r3, r2
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	3301      	adds	r3, #1
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	0d5b      	lsrs	r3, r3, #21
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	3301      	adds	r3, #1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	61fb      	str	r3, [r7, #28]
          break;
 8003590:	e00f      	b.n	80035b2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d10a      	bne.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80035a2:	61fb      	str	r3, [r7, #28]
          break;
 80035a4:	e007      	b.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 80035a6:	bf00      	nop
 80035a8:	e384      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80035aa:	bf00      	nop
 80035ac:	e382      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80035ae:	bf00      	nop
 80035b0:	e380      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80035b2:	bf00      	nop
 80035b4:	e37e      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80035b6:	bf00      	nop
        break;
 80035b8:	e37c      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80035ba:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d828      	bhi.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035ed 	.word	0x080035ed
 80035dc:	080035f5 	.word	0x080035f5
 80035e0:	08003609 	.word	0x08003609
          frequency = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7ff fa46 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 80035e8:	61f8      	str	r0, [r7, #28]
          break;
 80035ea:	e01d      	b.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 80035ec:	f7ff f994 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80035f0:	61f8      	str	r0, [r7, #28]
          break;
 80035f2:	e019      	b.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035f4:	4b42      	ldr	r3, [pc, #264]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d10f      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8003604:	61fb      	str	r3, [r7, #28]
          break;
 8003606:	e00c      	b.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003608:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d107      	bne.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	61fb      	str	r3, [r7, #28]
          break;
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800361e:	bf00      	nop
 8003620:	e348      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003622:	bf00      	nop
 8003624:	e346      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003626:	bf00      	nop
        break;
 8003628:	e344      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800362a:	4b35      	ldr	r3, [pc, #212]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d83a      	bhi.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003679 	.word	0x08003679
 8003648:	080036b3 	.word	0x080036b3
 800364c:	080036b3 	.word	0x080036b3
 8003650:	080036b3 	.word	0x080036b3
 8003654:	08003681 	.word	0x08003681
 8003658:	080036b3 	.word	0x080036b3
 800365c:	080036b3 	.word	0x080036b3
 8003660:	080036b3 	.word	0x080036b3
 8003664:	08003689 	.word	0x08003689
 8003668:	080036b3 	.word	0x080036b3
 800366c:	080036b3 	.word	0x080036b3
 8003670:	080036b3 	.word	0x080036b3
 8003674:	0800369d 	.word	0x0800369d
          frequency = HAL_RCC_GetPCLK1Freq();
 8003678:	f7ff f9e6 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 800367c:	61f8      	str	r0, [r7, #28]
          break;
 800367e:	e01d      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8003680:	f7ff f94a 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003684:	61f8      	str	r0, [r7, #28]
          break;
 8003686:	e019      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d10f      	bne.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8003698:	61fb      	str	r3, [r7, #28]
          break;
 800369a:	e00c      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d107      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ae:	61fb      	str	r3, [r7, #28]
          break;
 80036b0:	e003      	b.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 80036b2:	bf00      	nop
 80036b4:	e2fe      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80036b6:	bf00      	nop
 80036b8:	e2fc      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80036ba:	bf00      	nop
        break;
 80036bc:	e2fa      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d029      	beq.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b30      	cmp	r3, #48	; 0x30
 80036d4:	d831      	bhi.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d019      	beq.n	8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d82b      	bhi.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d004      	beq.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 80036ee:	e024      	b.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7ff f9aa 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80036f4:	61f8      	str	r0, [r7, #28]
          break;
 80036f6:	e025      	b.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80036f8:	f7ff f90e 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80036fc:	61f8      	str	r0, [r7, #28]
          break;
 80036fe:	e021      	b.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8003700:	40021000 	.word	0x40021000
 8003704:	0800663c 	.word	0x0800663c
 8003708:	02dc6c00 	.word	0x02dc6c00
 800370c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003710:	4b8f      	ldr	r3, [pc, #572]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371c:	d10f      	bne.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800371e:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003720:	61fb      	str	r3, [r7, #28]
          break;
 8003722:	e00c      	b.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003724:	4b8a      	ldr	r3, [pc, #552]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d107      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	61fb      	str	r3, [r7, #28]
          break;
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800373a:	bf00      	nop
 800373c:	e2ba      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800373e:	bf00      	nop
 8003740:	e2b8      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003742:	bf00      	nop
        break;
 8003744:	e2b6      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003746:	4b82      	ldr	r3, [pc, #520]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2bc0      	cmp	r3, #192	; 0xc0
 8003756:	d021      	beq.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2bc0      	cmp	r3, #192	; 0xc0
 800375c:	d829      	bhi.n	80037b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d011      	beq.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d823      	bhi.n	80037b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d004      	beq.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8003776:	e01c      	b.n	80037b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003778:	f7ff f966 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 800377c:	61f8      	str	r0, [r7, #28]
          break;
 800377e:	e01d      	b.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8003780:	f7ff f8ca 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003784:	61f8      	str	r0, [r7, #28]
          break;
 8003786:	e019      	b.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003788:	4b71      	ldr	r3, [pc, #452]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003794:	d10f      	bne.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8003796:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003798:	61fb      	str	r3, [r7, #28]
          break;
 800379a:	e00c      	b.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 80037aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ae:	61fb      	str	r3, [r7, #28]
          break;
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 80037b2:	bf00      	nop
 80037b4:	e27e      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80037b6:	bf00      	nop
 80037b8:	e27c      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80037ba:	bf00      	nop
        break;
 80037bc:	e27a      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80037be:	4b64      	ldr	r3, [pc, #400]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d0:	d025      	beq.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d8:	d82c      	bhi.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	d013      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d824      	bhi.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	d004      	beq.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 80037f8:	e01c      	b.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80037fa:	f7ff f925 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80037fe:	61f8      	str	r0, [r7, #28]
          break;
 8003800:	e01d      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8003802:	f7ff f889 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003806:	61f8      	str	r0, [r7, #28]
          break;
 8003808:	e019      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800380a:	4b51      	ldr	r3, [pc, #324]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003816:	d10f      	bne.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8003818:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800381a:	61fb      	str	r3, [r7, #28]
          break;
 800381c:	e00c      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800381e:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d107      	bne.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800382c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003830:	61fb      	str	r3, [r7, #28]
          break;
 8003832:	e003      	b.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8003834:	bf00      	nop
 8003836:	e23d      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003838:	bf00      	nop
 800383a:	e23b      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800383c:	bf00      	nop
        break;
 800383e:	e239      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003852:	d025      	beq.n	80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800385a:	d82c      	bhi.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003862:	d013      	beq.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d004      	beq.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800387a:	e01c      	b.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800387c:	f7ff f8e4 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003880:	61f8      	str	r0, [r7, #28]
          break;
 8003882:	e01d      	b.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8003884:	f7ff f848 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003888:	61f8      	str	r0, [r7, #28]
          break;
 800388a:	e019      	b.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800388c:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d10f      	bne.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800389c:	61fb      	str	r3, [r7, #28]
          break;
 800389e:	e00c      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d107      	bne.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	61fb      	str	r3, [r7, #28]
          break;
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 80038b6:	bf00      	nop
 80038b8:	e1fc      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80038ba:	bf00      	nop
 80038bc:	e1fa      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80038be:	bf00      	nop
        break;
 80038c0:	e1f8      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038dc:	d868      	bhi.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e4:	d008      	beq.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ec:	d034      	beq.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 80038ee:	e05f      	b.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 80038f0:	f7ff f812 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80038f4:	61f8      	str	r0, [r7, #28]
          break;
 80038f6:	e060      	b.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003904:	d156      	bne.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d050      	beq.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	fb03 f202 	mul.w	r2, r3, r2
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	3301      	adds	r3, #1
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	0e5b      	lsrs	r3, r3, #25
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	61fb      	str	r3, [r7, #28]
          break;
 800394e:	e031      	b.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8003950:	40021000 	.word	0x40021000
 8003954:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003958:	4b9c      	ldr	r3, [pc, #624]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d128      	bne.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8003966:	4b99      	ldr	r3, [pc, #612]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d022      	beq.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003972:	4b96      	ldr	r3, [pc, #600]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	fb03 f202 	mul.w	r2, r3, r2
 8003986:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	3301      	adds	r3, #1
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	0e5b      	lsrs	r3, r3, #25
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	61fb      	str	r3, [r7, #28]
          break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 80039b0:	bf00      	nop
 80039b2:	e17f      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80039b4:	bf00      	nop
 80039b6:	e17d      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80039b8:	bf00      	nop
        break;
 80039ba:	e17b      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80039bc:	4b83      	ldr	r3, [pc, #524]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039c6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 80039ce:	f7ff f851 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 80039d2:	61f8      	str	r0, [r7, #28]
        break;
 80039d4:	e16e      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 80039d6:	f7fe ff9f 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80039da:	61f8      	str	r0, [r7, #28]
        break;
 80039dc:	e16a      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80039de:	4b7b      	ldr	r3, [pc, #492]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f0:	d013      	beq.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f8:	d819      	bhi.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	d004      	beq.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8003a08:	e011      	b.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a0a:	f7ff f81d 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003a0e:	61f8      	str	r0, [r7, #28]
          break;
 8003a10:	e010      	b.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a12:	f7fe ff81 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003a16:	61f8      	str	r0, [r7, #28]
          break;
 8003a18:	e00c      	b.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d104      	bne.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003a2a:	61fb      	str	r3, [r7, #28]
          break;
 8003a2c:	e001      	b.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8003a2e:	bf00      	nop
 8003a30:	e140      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003a32:	bf00      	nop
        break;
 8003a34:	e13e      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	d013      	beq.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a50:	d819      	bhi.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5e:	d004      	beq.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8003a60:	e011      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7fe fff1 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003a66:	61f8      	str	r0, [r7, #28]
          break;
 8003a68:	e010      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7fe ff55 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003a6e:	61f8      	str	r0, [r7, #28]
          break;
 8003a70:	e00c      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a72:	4b56      	ldr	r3, [pc, #344]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7e:	d104      	bne.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8003a80:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003a82:	61fb      	str	r3, [r7, #28]
          break;
 8003a84:	e001      	b.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8003a86:	bf00      	nop
 8003a88:	e114      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003a8a:	bf00      	nop
        break;
 8003a8c:	e112      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003a8e:	4b4f      	ldr	r3, [pc, #316]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa0:	d013      	beq.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa8:	d819      	bhi.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d004      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8003ab8:	e011      	b.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003aba:	f7fe ffc5 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003abe:	61f8      	str	r0, [r7, #28]
          break;
 8003ac0:	e010      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe ff29 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003ac6:	61f8      	str	r0, [r7, #28]
          break;
 8003ac8:	e00c      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003aca:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d104      	bne.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003ada:	61fb      	str	r3, [r7, #28]
          break;
 8003adc:	e001      	b.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8003ade:	bf00      	nop
 8003ae0:	e0e8      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003ae2:	bf00      	nop
        break;
 8003ae4:	e0e6      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003ae6:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d011      	beq.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d818      	bhi.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d004      	beq.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe ff9c 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003b10:	61f8      	str	r0, [r7, #28]
          break;
 8003b12:	e010      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b14:	f7fe ff00 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003b18:	61f8      	str	r0, [r7, #28]
          break;
 8003b1a:	e00c      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b28:	d104      	bne.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8003b2a:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003b2c:	61fb      	str	r3, [r7, #28]
          break;
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8003b30:	bf00      	nop
 8003b32:	e0bf      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003b34:	bf00      	nop
        break;
 8003b36:	e0bd      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b52:	d833      	bhi.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b5a:	d01a      	beq.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b62:	d82b      	bhi.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b70:	d004      	beq.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8003b72:	e023      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe ff68 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003b78:	61f8      	str	r0, [r7, #28]
          break;
 8003b7a:	e026      	b.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8003b8a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003b8e:	61fb      	str	r3, [r7, #28]
          break;
 8003b90:	e016      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003ba2:	61fb      	str	r3, [r7, #28]
          break;
 8003ba4:	e00e      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8003bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb8:	61fb      	str	r3, [r7, #28]
          break;
 8003bba:	e005      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8003bbc:	bf00      	nop
 8003bbe:	e079      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003bc0:	bf00      	nop
 8003bc2:	e077      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003bc4:	bf00      	nop
 8003bc6:	e075      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003bc8:	bf00      	nop
        break;
 8003bca:	e073      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003be6:	d02c      	beq.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bee:	d833      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf6:	d01a      	beq.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfe:	d82b      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0c:	d004      	beq.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003c0e:	e023      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe ff1a 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
          break;
 8003c16:	e026      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8003c26:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003c2a:	61fb      	str	r3, [r7, #28]
          break;
 8003c2c:	e016      	b.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d111      	bne.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8003c3e:	61fb      	str	r3, [r7, #28]
          break;
 8003c40:	e00e      	b.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d109      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8003c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c54:	61fb      	str	r3, [r7, #28]
          break;
 8003c56:	e005      	b.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8003c58:	bf00      	nop
 8003c5a:	e02b      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003c5c:	bf00      	nop
 8003c5e:	e029      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003c60:	bf00      	nop
 8003c62:	e027      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003c64:	bf00      	nop
        break;
 8003c66:	e025      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003c68:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d004      	beq.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8003c82:	e00d      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fee0 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003c88:	61f8      	str	r0, [r7, #28]
          break;
 8003c8a:	e009      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8003c9c:	61fb      	str	r3, [r7, #28]
          break;
 8003c9e:	bf00      	nop
        break;
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e004      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003caa:	bf00      	nop
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003cb2:	bf00      	nop
    }
  }

  return(frequency);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	00f42400 	.word	0x00f42400

08003cc8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	6013      	str	r3, [r2, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cf6:	4b74      	ldr	r3, [pc, #464]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d02:	4b71      	ldr	r3, [pc, #452]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0203 	and.w	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d10d      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
       ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d1a:	4b6b      	ldr	r3, [pc, #428]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
       ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d047      	beq.n	8003dbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	e044      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d018      	beq.n	8003d6e <RCCEx_PLLSAI1_Config+0x86>
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d825      	bhi.n	8003d8c <RCCEx_PLLSAI1_Config+0xa4>
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d002      	beq.n	8003d4a <RCCEx_PLLSAI1_Config+0x62>
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d009      	beq.n	8003d5c <RCCEx_PLLSAI1_Config+0x74>
 8003d48:	e020      	b.n	8003d8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d4a:	4b5f      	ldr	r3, [pc, #380]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11d      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5a:	e01a      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d5c:	4b5a      	ldr	r3, [pc, #360]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d116      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6c:	e013      	b.n	8003d96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d6e:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d7a:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d8a:	e006      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	e004      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003da2:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	430b      	orrs	r3, r1
 8003db8:	4943      	ldr	r1, [pc, #268]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d17c      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dc4:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3f      	ldr	r2, [pc, #252]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd0:	f7fd fa30 	bl	8001234 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dd6:	e009      	b.n	8003dec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dd8:	f7fd fa2c 	bl	8001234 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d902      	bls.n	8003dec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	73fb      	strb	r3, [r7, #15]
        break;
 8003dea:	e005      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ef      	bne.n	8003dd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d15f      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d110      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e04:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6892      	ldr	r2, [r2, #8]
 8003e14:	0211      	lsls	r1, r2, #8
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68d2      	ldr	r2, [r2, #12]
 8003e1a:	06d2      	lsls	r2, r2, #27
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	492a      	ldr	r1, [pc, #168]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	610b      	str	r3, [r1, #16]
 8003e24:	e027      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d112      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	0211      	lsls	r1, r2, #8
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6912      	ldr	r2, [r2, #16]
 8003e42:	0852      	lsrs	r2, r2, #1
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0552      	lsls	r2, r2, #21
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	491f      	ldr	r1, [pc, #124]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	610b      	str	r3, [r1, #16]
 8003e50:	e011      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	0211      	lsls	r1, r2, #8
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6952      	ldr	r2, [r2, #20]
 8003e68:	0852      	lsrs	r2, r2, #1
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	0652      	lsls	r2, r2, #25
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	4915      	ldr	r1, [pc, #84]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fd f9d7 	bl	8001234 <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e88:	e009      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e8a:	f7fd f9d3 	bl	8001234 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d902      	bls.n	8003e9e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e9c:	e005      	b.n	8003eaa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ef      	beq.n	8003e8a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000

08003ecc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eda:	4b69      	ldr	r3, [pc, #420]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d018      	beq.n	8003f18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ee6:	4b66      	ldr	r3, [pc, #408]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d10d      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003efe:	4b60      	ldr	r3, [pc, #384]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d047      	beq.n	8003fa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e044      	b.n	8003fa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d018      	beq.n	8003f52 <RCCEx_PLLSAI2_Config+0x86>
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d825      	bhi.n	8003f70 <RCCEx_PLLSAI2_Config+0xa4>
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d002      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0x62>
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d009      	beq.n	8003f40 <RCCEx_PLLSAI2_Config+0x74>
 8003f2c:	e020      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f2e:	4b54      	ldr	r3, [pc, #336]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11d      	bne.n	8003f76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3e:	e01a      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d116      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f50:	e013      	b.n	8003f7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f52:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f5e:	4b48      	ldr	r3, [pc, #288]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f6e:	e006      	b.n	8003f7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e004      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6819      	ldr	r1, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	4938      	ldr	r1, [pc, #224]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d166      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a34      	ldr	r2, [pc, #208]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb4:	f7fd f93e 	bl	8001234 <HAL_GetTick>
 8003fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fba:	e009      	b.n	8003fd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fbc:	f7fd f93a 	bl	8001234 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d902      	bls.n	8003fd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003fce:	e005      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ef      	bne.n	8003fbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d149      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d110      	bne.n	800400a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	0211      	lsls	r1, r2, #8
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	06d2      	lsls	r2, r2, #27
 8004000:	430a      	orrs	r2, r1
 8004002:	491f      	ldr	r1, [pc, #124]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	614b      	str	r3, [r1, #20]
 8004008:	e011      	b.n	800402e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800400a:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004012:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	0211      	lsls	r1, r2, #8
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6912      	ldr	r2, [r2, #16]
 8004020:	0852      	lsrs	r2, r2, #1
 8004022:	3a01      	subs	r2, #1
 8004024:	0652      	lsls	r2, r2, #25
 8004026:	430a      	orrs	r2, r1
 8004028:	4915      	ldr	r1, [pc, #84]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd f8fb 	bl	8001234 <HAL_GetTick>
 800403e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004040:	e009      	b.n	8004056 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004042:	f7fd f8f7 	bl	8001234 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d902      	bls.n	8004056 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	73fb      	strb	r3, [r7, #15]
          break;
 8004054:	e005      	b.n	8004062 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ef      	beq.n	8004042 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000

08004084 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a0:	d10c      	bne.n	80040bc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80040a2:	4b77      	ldr	r3, [pc, #476]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80040ac:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b4:	d112      	bne.n	80040dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80040b6:	4b73      	ldr	r3, [pc, #460]	; (8004284 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	e00f      	b.n	80040dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d10b      	bne.n	80040dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80040c4:	4b6e      	ldr	r3, [pc, #440]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80040ce:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040d6:	d101      	bne.n	80040dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80040da:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 80c6 	bne.w	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ee:	d003      	beq.n	80040f8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f6:	d13b      	bne.n	8004170 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80040f8:	4b61      	ldr	r3, [pc, #388]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004104:	f040 80b3 	bne.w	800426e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8004108:	4b5d      	ldr	r3, [pc, #372]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80ac 	beq.w	800426e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	3301      	adds	r3, #1
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800412a:	4b55      	ldr	r3, [pc, #340]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004134:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004136:	4b52      	ldr	r3, [pc, #328]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	0edb      	lsrs	r3, r3, #27
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8004154:	2311      	movs	r3, #17
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e001      	b.n	800415e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800415a:	2307      	movs	r3, #7
 800415c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	fb03 f202 	mul.w	r2, r3, r2
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800416e:	e07e      	b.n	800426e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d139      	bne.n	80041ea <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004176:	4b42      	ldr	r3, [pc, #264]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004182:	d175      	bne.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d06f      	beq.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004190:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	3301      	adds	r3, #1
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ae:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80041b0:	4b33      	ldr	r3, [pc, #204]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	0edb      	lsrs	r3, r3, #27
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80041c2:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80041ce:	2311      	movs	r3, #17
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e001      	b.n	80041d8 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 80041d4:	2307      	movs	r3, #7
 80041d6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	fb03 f202 	mul.w	r2, r3, r2
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e042      	b.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f0:	d003      	beq.n	80041fa <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f8:	d13a      	bne.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004206:	d133      	bne.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02d      	beq.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	3301      	adds	r3, #1
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004232:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	0edb      	lsrs	r3, r3, #27
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8004252:	2311      	movs	r3, #17
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e001      	b.n	800425c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8004258:	2307      	movs	r3, #7
 800425a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	fb03 f202 	mul.w	r2, r3, r2
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e000      	b.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800426e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004270:	69fb      	ldr	r3, [r7, #28]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	; 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	001fff68 	.word	0x001fff68

08004288 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e022      	b.n	80042e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fc fd17 	bl	8000ce0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f814 	bl	80042e8 <HAL_SD_InitCard>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e00a      	b.n	80042e0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004304:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004308:	f7fe ff26 	bl	8003158 <HAL_RCCEx_GetPeriphCLKFreq>
 800430c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e07b      	b.n	8004420 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	09db      	lsrs	r3, r3, #7
 800432c:	4a3e      	ldr	r2, [pc, #248]	; (8004428 <HAL_SD_InitCard+0x140>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	3b02      	subs	r3, #2
 8004336:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681d      	ldr	r5, [r3, #0]
 800433c:	466c      	mov	r4, sp
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004350:	4628      	mov	r0, r5
 8004352:	f001 fae4 	bl	800591e <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004364:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f001 fb11 	bl	8005992 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3302      	adds	r3, #2
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800438c:	4a27      	ldr	r2, [pc, #156]	; (800442c <HAL_SD_InitCard+0x144>)
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	3301      	adds	r3, #1
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc ff58 	bl	800124c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb77 	bl	8004a90 <SD_PowerON>
 80043a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02e      	b.n	8004420 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa96 	bl	80048f4 <SD_InitCard>
 80043c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e01b      	b.n	8004420 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 fb61 	bl	8005ab8 <SDMMC_CmdBlockLength>
 80043f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00f      	beq.n	800441e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_SD_InitCard+0x148>)
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3728      	adds	r7, #40	; 0x28
 8004424:	46bd      	mov	sp, r7
 8004426:	bdb0      	pop	{r4, r5, r7, pc}
 8004428:	014f8b59 	.word	0x014f8b59
 800442c:	00012110 	.word	0x00012110
 8004430:	004005ff 	.word	0x004005ff

08004434 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004442:	0f9b      	lsrs	r3, r3, #30
 8004444:	b2da      	uxtb	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	b2da      	uxtb	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	b2da      	uxtb	r2, r3
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	b2da      	uxtb	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	b2da      	uxtb	r2, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004494:	0d1b      	lsrs	r3, r3, #20
 8004496:	b29a      	uxth	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b2:	0bdb      	lsrs	r3, r3, #15
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c4:	0b9b      	lsrs	r3, r3, #14
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e8:	0b1b      	lsrs	r3, r3, #12
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2200      	movs	r2, #0
 80044fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	2b00      	cmp	r3, #0
 8004502:	d163      	bne.n	80045cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004508:	009a      	lsls	r2, r3, #2
 800450a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004514:	0f92      	lsrs	r2, r2, #30
 8004516:	431a      	orrs	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004520:	0edb      	lsrs	r3, r3, #27
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	b2da      	uxtb	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004532:	0e1b      	lsrs	r3, r3, #24
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	b2da      	uxtb	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004544:	0d5b      	lsrs	r3, r3, #21
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	b2da      	uxtb	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	0c9b      	lsrs	r3, r3, #18
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	b2da      	uxtb	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004568:	0bdb      	lsrs	r3, r3, #15
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	b2da      	uxtb	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	7e1b      	ldrb	r3, [r3, #24]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	3302      	adds	r3, #2
 800458c:	2201      	movs	r2, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004596:	fb03 f202 	mul.w	r2, r3, r2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	7a1b      	ldrb	r3, [r3, #8]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	2201      	movs	r2, #1
 80045aa:	409a      	lsls	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045b8:	0a52      	lsrs	r2, r2, #9
 80045ba:	fb03 f202 	mul.w	r2, r3, r2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
 80045ca:	e031      	b.n	8004630 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d11d      	bne.n	8004610 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e2:	0c1b      	lsrs	r3, r3, #16
 80045e4:	431a      	orrs	r2, r3
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	3301      	adds	r3, #1
 80045f0:	029a      	lsls	r2, r3, #10
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004604:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	661a      	str	r2, [r3, #96]	; 0x60
 800460e:	e00f      	b.n	8004630 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_SD_GetCardCSD+0x344>)
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e09d      	b.n	800476c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004634:	0b9b      	lsrs	r3, r3, #14
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464e:	b2da      	uxtb	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465e:	b2da      	uxtb	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	0fdb      	lsrs	r3, r3, #31
 800466a:	b2da      	uxtb	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	0f5b      	lsrs	r3, r3, #29
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	b2da      	uxtb	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	0e9b      	lsrs	r3, r3, #26
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	b2da      	uxtb	r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	0d9b      	lsrs	r3, r3, #22
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	0d5b      	lsrs	r3, r3, #21
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	0bdb      	lsrs	r3, r3, #15
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	0b9b      	lsrs	r3, r3, #14
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	0b5b      	lsrs	r3, r3, #13
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	b2da      	uxtb	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	0b1b      	lsrs	r3, r3, #12
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	b2da      	uxtb	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	b2da      	uxtb	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475a:	b2da      	uxtb	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	004005ff 	.word	0x004005ff

0800477c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b090      	sub	sp, #64	; 0x40
 8004780:	af04      	add	r7, sp, #16
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2203      	movs	r2, #3
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	2b03      	cmp	r3, #3
 800479a:	d02e      	beq.n	80047fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	d106      	bne.n	80047b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
 80047b0:	e029      	b.n	8004806 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d10a      	bne.n	80047d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9f6 	bl	8004bac <SD_WideBus_Enable>
 80047c0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
 80047ce:	e01a      	b.n	8004806 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa33 	bl	8004c42 <SD_WideBus_Disable>
 80047dc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
 80047ea:	e00c      	b.n	8004806 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
 80047f8:	e005      	b.n	8004806 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a35      	ldr	r2, [pc, #212]	; (80048e8 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800481c:	e042      	b.n	80048a4 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800481e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004822:	f7fe fc99 	bl	8003158 <HAL_RCCEx_GetPeriphCLKFreq>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d031      	beq.n	8004892 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	3302      	adds	r3, #2
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	4a25      	ldr	r2, [pc, #148]	; (80048ec <HAL_SD_ConfigWideBusOperation+0x170>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d907      	bls.n	800486c <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <HAL_SD_ConfigWideBusOperation+0x174>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	0ddb      	lsrs	r3, r3, #23
 8004866:	3b02      	subs	r3, #2
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	e002      	b.n	8004872 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681d      	ldr	r5, [r3, #0]
 8004876:	466c      	mov	r4, sp
 8004878:	f107 0318 	add.w	r3, r7, #24
 800487c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004880:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	cb0e      	ldmia	r3, {r1, r2, r3}
 800488a:	4628      	mov	r0, r5
 800488c:	f001 f847 	bl	800591e <SDMMC_Init>
 8004890:	e008      	b.n	80048a4 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f903 	bl	8005ab8 <SDMMC_CmdBlockLength>
 80048b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80048dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3730      	adds	r7, #48	; 0x30
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bdb0      	pop	{r4, r5, r7, pc}
 80048e8:	004005ff 	.word	0x004005ff
 80048ec:	017d7840 	.word	0x017d7840
 80048f0:	55e63b89 	.word	0x55e63b89

080048f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048f4:	b5b0      	push	{r4, r5, r7, lr}
 80048f6:	b094      	sub	sp, #80	; 0x50
 80048f8:	af04      	add	r7, sp, #16
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80048fc:	2301      	movs	r3, #1
 80048fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f853 	bl	80059b0 <SDMMC_GetPowerState>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004910:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004914:	e0b8      	b.n	8004a88 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	2b03      	cmp	r3, #3
 800491c:	d02f      	beq.n	800497e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f001 f9d2 	bl	8005ccc <SDMMC_CmdSendCID>
 8004928:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SD_InitCard+0x40>
    {
      return errorstate;
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	e0a9      	b.n	8004a88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f87d 	bl	8005a3a <SDMMC_GetResponse>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2104      	movs	r1, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f001 f874 	bl	8005a3a <SDMMC_GetResponse>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2108      	movs	r1, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f86b 	bl	8005a3a <SDMMC_GetResponse>
 8004964:	4602      	mov	r2, r0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	210c      	movs	r1, #12
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f862 	bl	8005a3a <SDMMC_GetResponse>
 8004976:	4602      	mov	r2, r0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	2b03      	cmp	r3, #3
 8004984:	d00d      	beq.n	80049a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f107 020e 	add.w	r2, r7, #14
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f001 f9d8 	bl	8005d46 <SDMMC_CmdSetRelAdd>
 8004996:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	e072      	b.n	8004a88 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d036      	beq.n	8004a18 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049aa:	89fb      	ldrh	r3, [r7, #14]
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f001 f9a2 	bl	8005d08 <SDMMC_CmdSendCSD>
 80049c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	e05b      	b.n	8004a88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f82f 	bl	8005a3a <SDMMC_GetResponse>
 80049dc:	4602      	mov	r2, r0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2104      	movs	r1, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f826 	bl	8005a3a <SDMMC_GetResponse>
 80049ee:	4602      	mov	r2, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2108      	movs	r1, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 f81d 	bl	8005a3a <SDMMC_GetResponse>
 8004a00:	4602      	mov	r2, r0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	210c      	movs	r1, #12
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 f814 	bl	8005a3a <SDMMC_GetResponse>
 8004a12:	4602      	mov	r2, r0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2104      	movs	r1, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f80b 	bl	8005a3a <SDMMC_GetResponse>
 8004a24:	4603      	mov	r3, r0
 8004a26:	0d1a      	lsrs	r2, r3, #20
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fcfe 	bl	8004434 <HAL_SD_GetCardCSD>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a42:	e021      	b.n	8004a88 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	2200      	movs	r2, #0
 8004a50:	461c      	mov	r4, r3
 8004a52:	4615      	mov	r5, r2
 8004a54:	4622      	mov	r2, r4
 8004a56:	462b      	mov	r3, r5
 8004a58:	4608      	mov	r0, r1
 8004a5a:	f001 f84f 	bl	8005afc <SDMMC_CmdSelDesel>
 8004a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <SD_InitCard+0x176>
  {
    return errorstate;
 8004a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a68:	e00e      	b.n	8004a88 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	466c      	mov	r4, sp
 8004a72:	f103 0210 	add.w	r2, r3, #16
 8004a76:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a80:	4628      	mov	r0, r5
 8004a82:	f000 ff4c 	bl	800591e <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3740      	adds	r7, #64	; 0x40
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bdb0      	pop	{r4, r5, r7, pc}

08004a90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f84a 	bl	8005b42 <SDMMC_CmdGoIdleState>
 8004aae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <SD_PowerON+0x2a>
  {
    return errorstate;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	e072      	b.n	8004ba0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 f85d 	bl	8005b7e <SDMMC_CmdOperCond>
 8004ac4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f833 	bl	8005b42 <SDMMC_CmdGoIdleState>
 8004adc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	e05b      	b.n	8004ba0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d137      	bne.n	8004b66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 f85d 	bl	8005bbc <SDMMC_CmdAppCommand>
 8004b02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d02d      	beq.n	8004b66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b0e:	e047      	b.n	8004ba0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 f850 	bl	8005bbc <SDMMC_CmdAppCommand>
 8004b1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	e03b      	b.n	8004ba0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	491e      	ldr	r1, [pc, #120]	; (8004ba8 <SD_PowerON+0x118>)
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 f866 	bl	8005c00 <SDMMC_CmdAppOperCommand>
 8004b34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b40:	e02e      	b.n	8004ba0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 ff76 	bl	8005a3a <SDMMC_GetResponse>
 8004b4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	0fdb      	lsrs	r3, r3, #31
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <SD_PowerON+0xcc>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <SD_PowerON+0xce>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]

    count++;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d802      	bhi.n	8004b76 <SD_PowerON+0xe6>
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0cc      	beq.n	8004b10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d902      	bls.n	8004b86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b84:	e00c      	b.n	8004ba0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
 8004b96:	e002      	b.n	8004b9e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	c1100000 	.word	0xc1100000

08004bac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 ff39 	bl	8005a3a <SDMMC_GetResponse>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd2:	d102      	bne.n	8004bda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd8:	e02f      	b.n	8004c3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bda:	f107 030c 	add.w	r3, r7, #12
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f879 	bl	8004cd8 <SD_FindSCR>
 8004be6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	e023      	b.n	8004c3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 ffd7 	bl	8005bbc <SDMMC_CmdAppCommand>
 8004c0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	e00f      	b.n	8004c3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2102      	movs	r1, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f810 	bl	8005c46 <SDMMC_CmdBusWidth>
 8004c26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	e003      	b.n	8004c3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e001      	b.n	8004c3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 feee 	bl	8005a3a <SDMMC_GetResponse>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c68:	d102      	bne.n	8004c70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c6e:	e02f      	b.n	8004cd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f82e 	bl	8004cd8 <SD_FindSCR>
 8004c7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	e023      	b.n	8004cd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01c      	beq.n	8004ccc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f000 ff8c 	bl	8005bbc <SDMMC_CmdAppCommand>
 8004ca4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	e00f      	b.n	8004cd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 ffc5 	bl	8005c46 <SDMMC_CmdBusWidth>
 8004cbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	e003      	b.n	8004cd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e001      	b.n	8004cd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ccc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b08f      	sub	sp, #60	; 0x3c
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ce2:	f7fc faa7 	bl	8001234 <HAL_GetTick>
 8004ce6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2108      	movs	r1, #8
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 feda 	bl	8005ab8 <SDMMC_CmdBlockLength>
 8004d04:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	e0a9      	b.n	8004e64 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 ff4d 	bl	8005bbc <SDMMC_CmdAppCommand>
 8004d22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	e09a      	b.n	8004e64 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d34:	2308      	movs	r3, #8
 8004d36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004d38:	2330      	movs	r3, #48	; 0x30
 8004d3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f107 0210 	add.w	r2, r7, #16
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fe84 	bl	8005a60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 ff94 	bl	8005c8a <SDMMC_CmdSendSCR>
 8004d62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d022      	beq.n	8004db0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	e07a      	b.n	8004e64 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00e      	beq.n	8004d9a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	f107 0208 	add.w	r2, r7, #8
 8004d88:	18d4      	adds	r4, r2, r3
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	f000 fdf4 	bl	8005978 <SDMMC_ReadFIFO>
 8004d90:	4603      	mov	r3, r0
 8004d92:	6023      	str	r3, [r4, #0]
      index++;
 8004d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d96:	3301      	adds	r3, #1
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d9a:	f7fc fa4b 	bl	8001234 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d102      	bne.n	8004db0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004daa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dae:	e059      	b.n	8004e64 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db6:	f240 432a 	movw	r3, #1066	; 0x42a
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0d6      	beq.n	8004d6e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	e044      	b.n	8004e64 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2202      	movs	r2, #2
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004df0:	2302      	movs	r3, #2
 8004df2:	e037      	b.n	8004e64 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2220      	movs	r2, #32
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	e02a      	b.n	8004e64 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	061a      	lsls	r2, r3, #24
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e24:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	0e1b      	lsrs	r3, r3, #24
 8004e34:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	601a      	str	r2, [r3, #0]
    scr++;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	061a      	lsls	r2, r3, #24
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	0e1b      	lsrs	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	373c      	adds	r7, #60	; 0x3c
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd90      	pop	{r4, r7, pc}

08004e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e095      	b.n	8004faa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d108      	bne.n	8004e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8e:	d009      	beq.n	8004ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	61da      	str	r2, [r3, #28]
 8004e96:	e005      	b.n	8004ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fb ff70 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee4:	d902      	bls.n	8004eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e002      	b.n	8004ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004efa:	d007      	beq.n	8004f0c <HAL_SPI_Init+0xa0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4e:	ea42 0103 	orr.w	r1, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	f003 0204 	and.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f88:	ea42 0103 	orr.w	r1, r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e040      	b.n	8005046 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fb ff79 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2224      	movs	r2, #36	; 0x24
 8004fde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f82d 	bl	8005050 <UART_SetConfig>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e022      	b.n	8005046 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fad9 	bl	80055c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800501c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800502c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb60 	bl	8005704 <UART_CheckIdleState>
 8005044:	4603      	mov	r3, r0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b08a      	sub	sp, #40	; 0x28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	431a      	orrs	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4313      	orrs	r3, r2
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4ba4      	ldr	r3, [pc, #656]	; (8005310 <UART_SetConfig+0x2c0>)
 8005080:	4013      	ands	r3, r2
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005088:	430b      	orrs	r3, r1
 800508a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a99      	ldr	r2, [pc, #612]	; (8005314 <UART_SetConfig+0x2c4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	4313      	orrs	r3, r2
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a90      	ldr	r2, [pc, #576]	; (8005318 <UART_SetConfig+0x2c8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d126      	bne.n	8005128 <UART_SetConfig+0xd8>
 80050da:	4b90      	ldr	r3, [pc, #576]	; (800531c <UART_SetConfig+0x2cc>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d81b      	bhi.n	8005120 <UART_SetConfig+0xd0>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0xa0>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005111 	.word	0x08005111
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005119 	.word	0x08005119
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e116      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510e:	e112      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e10e      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e10a      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e106      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7c      	ldr	r2, [pc, #496]	; (8005320 <UART_SetConfig+0x2d0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d138      	bne.n	80051a4 <UART_SetConfig+0x154>
 8005132:	4b7a      	ldr	r3, [pc, #488]	; (800531c <UART_SetConfig+0x2cc>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d82d      	bhi.n	800519c <UART_SetConfig+0x14c>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0xf8>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800517d 	.word	0x0800517d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	0800519d 	.word	0x0800519d
 8005154:	0800519d 	.word	0x0800519d
 8005158:	0800518d 	.word	0x0800518d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	0800519d 	.word	0x0800519d
 8005164:	0800519d 	.word	0x0800519d
 8005168:	08005185 	.word	0x08005185
 800516c:	0800519d 	.word	0x0800519d
 8005170:	0800519d 	.word	0x0800519d
 8005174:	0800519d 	.word	0x0800519d
 8005178:	08005195 	.word	0x08005195
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e0d8      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e0d4      	b.n	8005336 <UART_SetConfig+0x2e6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e0d0      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e0cc      	b.n	8005336 <UART_SetConfig+0x2e6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e0c8      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5e      	ldr	r2, [pc, #376]	; (8005324 <UART_SetConfig+0x2d4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d125      	bne.n	80051fa <UART_SetConfig+0x1aa>
 80051ae:	4b5b      	ldr	r3, [pc, #364]	; (800531c <UART_SetConfig+0x2cc>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d016      	beq.n	80051ea <UART_SetConfig+0x19a>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d818      	bhi.n	80051f2 <UART_SetConfig+0x1a2>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d00a      	beq.n	80051da <UART_SetConfig+0x18a>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d814      	bhi.n	80051f2 <UART_SetConfig+0x1a2>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <UART_SetConfig+0x182>
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d008      	beq.n	80051e2 <UART_SetConfig+0x192>
 80051d0:	e00f      	b.n	80051f2 <UART_SetConfig+0x1a2>
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d8:	e0ad      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051da:	2302      	movs	r3, #2
 80051dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e0:	e0a9      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051e2:	2304      	movs	r3, #4
 80051e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e8:	e0a5      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051ea:	2308      	movs	r3, #8
 80051ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f0:	e0a1      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051f2:	2310      	movs	r3, #16
 80051f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f8:	e09d      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a4a      	ldr	r2, [pc, #296]	; (8005328 <UART_SetConfig+0x2d8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d125      	bne.n	8005250 <UART_SetConfig+0x200>
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <UART_SetConfig+0x2cc>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800520e:	2bc0      	cmp	r3, #192	; 0xc0
 8005210:	d016      	beq.n	8005240 <UART_SetConfig+0x1f0>
 8005212:	2bc0      	cmp	r3, #192	; 0xc0
 8005214:	d818      	bhi.n	8005248 <UART_SetConfig+0x1f8>
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d00a      	beq.n	8005230 <UART_SetConfig+0x1e0>
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	d814      	bhi.n	8005248 <UART_SetConfig+0x1f8>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <UART_SetConfig+0x1d8>
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d008      	beq.n	8005238 <UART_SetConfig+0x1e8>
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x1f8>
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e082      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005230:	2302      	movs	r3, #2
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005236:	e07e      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523e:	e07a      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005246:	e076      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524e:	e072      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a35      	ldr	r2, [pc, #212]	; (800532c <UART_SetConfig+0x2dc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d12a      	bne.n	80052b0 <UART_SetConfig+0x260>
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <UART_SetConfig+0x2cc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005268:	d01a      	beq.n	80052a0 <UART_SetConfig+0x250>
 800526a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0x258>
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d00c      	beq.n	8005290 <UART_SetConfig+0x240>
 8005276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527a:	d815      	bhi.n	80052a8 <UART_SetConfig+0x258>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <UART_SetConfig+0x238>
 8005280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005284:	d008      	beq.n	8005298 <UART_SetConfig+0x248>
 8005286:	e00f      	b.n	80052a8 <UART_SetConfig+0x258>
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e052      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005290:	2302      	movs	r3, #2
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e04e      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529e:	e04a      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a6:	e046      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ae:	e042      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <UART_SetConfig+0x2c4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d13a      	bne.n	8005330 <UART_SetConfig+0x2e0>
 80052ba:	4b18      	ldr	r3, [pc, #96]	; (800531c <UART_SetConfig+0x2cc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052c8:	d01a      	beq.n	8005300 <UART_SetConfig+0x2b0>
 80052ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ce:	d81b      	bhi.n	8005308 <UART_SetConfig+0x2b8>
 80052d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d4:	d00c      	beq.n	80052f0 <UART_SetConfig+0x2a0>
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052da:	d815      	bhi.n	8005308 <UART_SetConfig+0x2b8>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <UART_SetConfig+0x298>
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d008      	beq.n	80052f8 <UART_SetConfig+0x2a8>
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x2b8>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e022      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e01e      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052f8:	2304      	movs	r3, #4
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e01a      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005300:	2308      	movs	r3, #8
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e016      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005308:	2310      	movs	r3, #16
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e012      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	40008000 	.word	0x40008000
 8005318:	40013800 	.word	0x40013800
 800531c:	40021000 	.word	0x40021000
 8005320:	40004400 	.word	0x40004400
 8005324:	40004800 	.word	0x40004800
 8005328:	40004c00 	.word	0x40004c00
 800532c:	40005000 	.word	0x40005000
 8005330:	2310      	movs	r3, #16
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a9f      	ldr	r2, [pc, #636]	; (80055b8 <UART_SetConfig+0x568>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d17a      	bne.n	8005436 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005344:	2b08      	cmp	r3, #8
 8005346:	d824      	bhi.n	8005392 <UART_SetConfig+0x342>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x300>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005375 	.word	0x08005375
 8005354:	08005393 	.word	0x08005393
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005393 	.word	0x08005393
 8005360:	08005383 	.word	0x08005383
 8005364:	08005393 	.word	0x08005393
 8005368:	08005393 	.word	0x08005393
 800536c:	08005393 	.word	0x08005393
 8005370:	0800538b 	.word	0x0800538b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fd fb68 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8005378:	61f8      	str	r0, [r7, #28]
        break;
 800537a:	e010      	b.n	800539e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800537c:	4b8f      	ldr	r3, [pc, #572]	; (80055bc <UART_SetConfig+0x56c>)
 800537e:	61fb      	str	r3, [r7, #28]
        break;
 8005380:	e00d      	b.n	800539e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005382:	f7fd fac9 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8005386:	61f8      	str	r0, [r7, #28]
        break;
 8005388:	e009      	b.n	800539e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e005      	b.n	800539e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800539c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80fb 	beq.w	800559c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d305      	bcc.n	80053c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d903      	bls.n	80053ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053c8:	e0e8      	b.n	800559c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2200      	movs	r2, #0
 80053ce:	461c      	mov	r4, r3
 80053d0:	4615      	mov	r5, r2
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	022b      	lsls	r3, r5, #8
 80053dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053e0:	0222      	lsls	r2, r4, #8
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6849      	ldr	r1, [r1, #4]
 80053e6:	0849      	lsrs	r1, r1, #1
 80053e8:	2000      	movs	r0, #0
 80053ea:	4688      	mov	r8, r1
 80053ec:	4681      	mov	r9, r0
 80053ee:	eb12 0a08 	adds.w	sl, r2, r8
 80053f2:	eb43 0b09 	adc.w	fp, r3, r9
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005404:	4650      	mov	r0, sl
 8005406:	4659      	mov	r1, fp
 8005408:	f7fa fef0 	bl	80001ec <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800541a:	d308      	bcc.n	800542e <UART_SetConfig+0x3de>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005422:	d204      	bcs.n	800542e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e0b6      	b.n	800559c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005434:	e0b2      	b.n	800559c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d15e      	bne.n	80054fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005444:	2b08      	cmp	r3, #8
 8005446:	d828      	bhi.n	800549a <UART_SetConfig+0x44a>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x400>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549b 	.word	0x0800549b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800549b 	.word	0x0800549b
 8005468:	0800549b 	.word	0x0800549b
 800546c:	0800549b 	.word	0x0800549b
 8005470:	08005493 	.word	0x08005493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fd fae8 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8005478:	61f8      	str	r0, [r7, #28]
        break;
 800547a:	e014      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800547c:	f7fd fafa 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8005480:	61f8      	str	r0, [r7, #28]
        break;
 8005482:	e010      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005484:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <UART_SetConfig+0x56c>)
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e00d      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fd fa45 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800548e:	61f8      	str	r0, [r7, #28]
        break;
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	61fb      	str	r3, [r7, #28]
        break;
 8005498:	e005      	b.n	80054a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d077      	beq.n	800559c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005a      	lsls	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	441a      	add	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d916      	bls.n	80054f6 <UART_SetConfig+0x4a6>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ce:	d212      	bcs.n	80054f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f023 030f 	bic.w	r3, r3, #15
 80054d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	8afb      	ldrh	r3, [r7, #22]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	8afa      	ldrh	r2, [r7, #22]
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e052      	b.n	800559c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054fc:	e04e      	b.n	800559c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005502:	2b08      	cmp	r3, #8
 8005504:	d827      	bhi.n	8005556 <UART_SetConfig+0x506>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x4bc>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	08005557 	.word	0x08005557
 800551c:	08005547 	.word	0x08005547
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	08005557 	.word	0x08005557
 800552c:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fd fa8a 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8005534:	61f8      	str	r0, [r7, #28]
        break;
 8005536:	e014      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fd fa9c 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 800553c:	61f8      	str	r0, [r7, #28]
        break;
 800553e:	e010      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <UART_SetConfig+0x56c>)
 8005542:	61fb      	str	r3, [r7, #28]
        break;
 8005544:	e00d      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fd f9e7 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800554a:	61f8      	str	r0, [r7, #28]
        break;
 800554c:	e009      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005552:	61fb      	str	r3, [r7, #28]
        break;
 8005554:	e005      	b.n	8005562 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005560:	bf00      	nop
    }

    if (pclk != 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d019      	beq.n	800559c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	085a      	lsrs	r2, r3, #1
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	441a      	add	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d909      	bls.n	8005596 <UART_SetConfig+0x546>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d205      	bcs.n	8005596 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e002      	b.n	800559c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b6:	bf00      	nop
 80055b8:	40008000 	.word	0x40008000
 80055bc:	00f42400 	.word	0x00f42400

080055c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	d10a      	bne.n	80056d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005714:	f7fb fd8e 	bl	8001234 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d10e      	bne.n	8005746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f82d 	bl	8005796 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e023      	b.n	800578e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b04      	cmp	r3, #4
 8005752:	d10e      	bne.n	8005772 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f817 	bl	8005796 <UART_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e00d      	b.n	800578e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b09c      	sub	sp, #112	; 0x70
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a6:	e0a5      	b.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	f000 80a1 	beq.w	80058f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fb fd3f 	bl	8001234 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d13e      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057dc:	667b      	str	r3, [r7, #100]	; 0x64
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	663b      	str	r3, [r7, #96]	; 0x60
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800581a:	64ba      	str	r2, [r7, #72]	; 0x48
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e067      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d04f      	beq.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005862:	d147      	bne.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800586c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
 800588e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e6      	bne.n	800586e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	613b      	str	r3, [r7, #16]
   return(result);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058c0:	623a      	str	r2, [r7, #32]
 80058c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	69f9      	ldr	r1, [r7, #28]
 80058c6:	6a3a      	ldr	r2, [r7, #32]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e010      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	429a      	cmp	r2, r3
 8005910:	f43f af4a 	beq.w	80057a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3770      	adds	r7, #112	; 0x70
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800591e:	b084      	sub	sp, #16
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	f107 001c 	add.w	r0, r7, #28
 800592c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800593c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8005940:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005944:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005948:	431a      	orrs	r2, r3
             Init.ClockDiv
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800594c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800595c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	b004      	add	sp, #16
 8005976:	4770      	bx	lr

08005978 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2203      	movs	r2, #3
 800599e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80059a0:	2002      	movs	r0, #2
 80059a2:	f7fb fc53 	bl	800124c <HAL_Delay>

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0303 	and.w	r3, r3, #3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80059ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80059f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80059f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005a06:	f023 030f 	bic.w	r3, r3, #15
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	b2db      	uxtb	r3, r3
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3314      	adds	r3, #20
 8005a48:	461a      	mov	r2, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005a8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005a92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0

}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005ac6:	2310      	movs	r3, #16
 8005ac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ad8:	f107 0308 	add.w	r3, r7, #8
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff ff74 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	2110      	movs	r1, #16
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f94c 	bl	8005d88 <SDMMC_GetCmdResp1>
 8005af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005af2:	69fb      	ldr	r3, [r7, #28]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b1c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b1e:	f107 0310 	add.w	r3, r7, #16
 8005b22:	4619      	mov	r1, r3
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff ff51 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	2107      	movs	r1, #7
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f929 	bl	8005d88 <SDMMC_GetCmdResp1>
 8005b36:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3728      	adds	r7, #40	; 0x28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b088      	sub	sp, #32
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b60:	f107 0308 	add.w	r3, r7, #8
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff ff30 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fb43 	bl	80061f8 <SDMMC_GetCmdError>
 8005b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b74:	69fb      	ldr	r3, [r7, #28]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b088      	sub	sp, #32
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005b86:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b90:	2340      	movs	r3, #64	; 0x40
 8005b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b9e:	f107 0308 	add.w	r3, r7, #8
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff11 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fad6 	bl	800615c <SDMMC_GetCmdResp7>
 8005bb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005bca:	2337      	movs	r3, #55	; 0x37
 8005bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bce:	2340      	movs	r3, #64	; 0x40
 8005bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bdc:	f107 0308 	add.w	r3, r7, #8
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fef2 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bec:	2137      	movs	r1, #55	; 0x37
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f8ca 	bl	8005d88 <SDMMC_GetCmdResp1>
 8005bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c14:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c16:	2329      	movs	r3, #41	; 0x29
 8005c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fecc 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9dd 	bl	8005ff4 <SDMMC_GetCmdResp3>
 8005c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b088      	sub	sp, #32
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005c54:	2306      	movs	r3, #6
 8005c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fead 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c76:	2106      	movs	r1, #6
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f885 	bl	8005d88 <SDMMC_GetCmdResp1>
 8005c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c80:	69fb      	ldr	r3, [r7, #28]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b088      	sub	sp, #32
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005c96:	2333      	movs	r3, #51	; 0x33
 8005c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fe8c 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	2133      	movs	r1, #51	; 0x33
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f864 	bl	8005d88 <SDMMC_GetCmdResp1>
 8005cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005cdc:	23c0      	movs	r3, #192	; 0xc0
 8005cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cea:	f107 0308 	add.w	r3, r7, #8
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff fe6b 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f934 	bl	8005f64 <SDMMC_GetCmdResp2>
 8005cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005d16:	2309      	movs	r3, #9
 8005d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005d1a:	23c0      	movs	r3, #192	; 0xc0
 8005d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fe4c 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f915 	bl	8005f64 <SDMMC_GetCmdResp2>
 8005d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b088      	sub	sp, #32
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005d54:	2303      	movs	r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d58:	2340      	movs	r3, #64	; 0x40
 8005d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fe2d 	bl	80059cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	2103      	movs	r1, #3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f97a 	bl	8006070 <SDMMC_GetCmdResp6>
 8005d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	460b      	mov	r3, r1
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005d96:	4b70      	ldr	r3, [pc, #448]	; (8005f58 <SDMMC_GetCmdResp1+0x1d0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a70      	ldr	r2, [pc, #448]	; (8005f5c <SDMMC_GetCmdResp1+0x1d4>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	0a5a      	lsrs	r2, r3, #9
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	61fa      	str	r2, [r7, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005db8:	e0c9      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0ef      	beq.n	8005daa <SDMMC_GetCmdResp1+0x22>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1ea      	bne.n	8005daa <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2204      	movs	r2, #4
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005de6:	2304      	movs	r3, #4
 8005de8:	e0b1      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0a6      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	22c5      	movs	r2, #197	; 0xc5
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff fe0a 	bl	8005a20 <SDMMC_GetCommandResponse>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d001      	beq.n	8005e1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e099      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff fe0c 	bl	8005a3a <SDMMC_GetResponse>
 8005e22:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4b4e      	ldr	r3, [pc, #312]	; (8005f60 <SDMMC_GetCmdResp1+0x1d8>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e08d      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	da02      	bge.n	8005e3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e3c:	e087      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	e080      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	e079      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e68:	e071      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e78:	e069      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e88:	e061      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e98:	e059      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea8:	e051      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb8:	e049      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ec8:	e041      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed8:	e039      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ee8:	e031      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005ef4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ef8:	e029      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005f04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005f08:	e021      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f18:	e019      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f28:	e011      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f38:	e009      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005f44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005f48:	e001      	b.n	8005f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000000 	.word	0x20000000
 8005f5c:	10624dd3 	.word	0x10624dd3
 8005f60:	fdffe008 	.word	0xfdffe008

08005f64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <SDMMC_GetCmdResp2+0x88>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <SDMMC_GetCmdResp2+0x8c>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0a5b      	lsrs	r3, r3, #9
 8005f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7c:	fb02 f303 	mul.w	r3, r2, r3
 8005f80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1e5a      	subs	r2, r3, #1
 8005f86:	60fa      	str	r2, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f90:	e026      	b.n	8005fe0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0ef      	beq.n	8005f82 <SDMMC_GetCmdResp2+0x1e>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ea      	bne.n	8005f82 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	e00e      	b.n	8005fe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e003      	b.n	8005fe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	22c5      	movs	r2, #197	; 0xc5
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	10624dd3 	.word	0x10624dd3

08005ff4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <SDMMC_GetCmdResp3+0x74>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1a      	ldr	r2, [pc, #104]	; (800606c <SDMMC_GetCmdResp3+0x78>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	0a5b      	lsrs	r3, r3, #9
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	fb02 f303 	mul.w	r3, r2, r3
 8006010:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	60fa      	str	r2, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800601c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006020:	e01b      	b.n	800605a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0ef      	beq.n	8006012 <SDMMC_GetCmdResp3+0x1e>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ea      	bne.n	8006012 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2204      	movs	r2, #4
 800604c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800604e:	2304      	movs	r3, #4
 8006050:	e003      	b.n	800605a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	22c5      	movs	r2, #197	; 0xc5
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000000 	.word	0x20000000
 800606c:	10624dd3 	.word	0x10624dd3

08006070 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	460b      	mov	r3, r1
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800607e:	4b35      	ldr	r3, [pc, #212]	; (8006154 <SDMMC_GetCmdResp6+0xe4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a35      	ldr	r2, [pc, #212]	; (8006158 <SDMMC_GetCmdResp6+0xe8>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	0a5b      	lsrs	r3, r3, #9
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	61fa      	str	r2, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800609e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060a2:	e052      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ef      	beq.n	8006094 <SDMMC_GetCmdResp6+0x24>
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ea      	bne.n	8006094 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2204      	movs	r2, #4
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060d0:	2304      	movs	r3, #4
 80060d2:	e03a      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e02f      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fc98 	bl	8005a20 <SDMMC_GetCommandResponse>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	7afb      	ldrb	r3, [r7, #11]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d001      	beq.n	80060fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e025      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	22c5      	movs	r2, #197	; 0xc5
 8006102:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006104:	2100      	movs	r1, #0
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7ff fc97 	bl	8005a3a <SDMMC_GetResponse>
 800610c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	b29a      	uxth	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006122:	2300      	movs	r3, #0
 8006124:	e011      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006134:	e009      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006144:	e001      	b.n	800614a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000000 	.word	0x20000000
 8006158:	10624dd3 	.word	0x10624dd3

0800615c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006164:	4b22      	ldr	r3, [pc, #136]	; (80061f0 <SDMMC_GetCmdResp7+0x94>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a22      	ldr	r2, [pc, #136]	; (80061f4 <SDMMC_GetCmdResp7+0x98>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0a5b      	lsrs	r3, r3, #9
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	fb02 f303 	mul.w	r3, r2, r3
 8006178:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	60fa      	str	r2, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006188:	e02c      	b.n	80061e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ef      	beq.n	800617a <SDMMC_GetCmdResp7+0x1e>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ea      	bne.n	800617a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2204      	movs	r2, #4
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061b6:	2304      	movs	r3, #4
 80061b8:	e014      	b.n	80061e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e009      	b.n	80061e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80061e2:	2300      	movs	r3, #0

}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	20000000 	.word	0x20000000
 80061f4:	10624dd3 	.word	0x10624dd3

080061f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <SDMMC_GetCmdError+0x50>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a11      	ldr	r2, [pc, #68]	; (800624c <SDMMC_GetCmdError+0x54>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	0a5b      	lsrs	r3, r3, #9
 800620c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006210:	fb02 f303 	mul.w	r3, r2, r3
 8006214:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	60fa      	str	r2, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006224:	e009      	b.n	800623a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f1      	beq.n	8006216 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	22c5      	movs	r2, #197	; 0xc5
 8006236:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000000 	.word	0x20000000
 800624c:	10624dd3 	.word	0x10624dd3

08006250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006250:	b084      	sub	sp, #16
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	f107 001c 	add.w	r0, r7, #28
 800625e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f8ea 	bl	8006448 <USB_CoreReset>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
 800628a:	e005      	b.n	8006298 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a4:	b004      	add	sp, #16
 80062a6:	4770      	bx	lr

080062a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f023 0201 	bic.w	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d115      	bne.n	8006318 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062f8:	2001      	movs	r0, #1
 80062fa:	f7fa ffa7 	bl	800124c <HAL_Delay>
      ms++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f891 	bl	800642c <USB_GetMode>
 800630a:	4603      	mov	r3, r0
 800630c:	2b01      	cmp	r3, #1
 800630e:	d01e      	beq.n	800634e <USB_SetCurrentMode+0x84>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b31      	cmp	r3, #49	; 0x31
 8006314:	d9f0      	bls.n	80062f8 <USB_SetCurrentMode+0x2e>
 8006316:	e01a      	b.n	800634e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d115      	bne.n	800634a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800632a:	2001      	movs	r0, #1
 800632c:	f7fa ff8e 	bl	800124c <HAL_Delay>
      ms++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f878 	bl	800642c <USB_GetMode>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <USB_SetCurrentMode+0x84>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b31      	cmp	r3, #49	; 0x31
 8006346:	d9f0      	bls.n	800632a <USB_SetCurrentMode+0x60>
 8006348:	e001      	b.n	800634e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e005      	b.n	800635a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b32      	cmp	r3, #50	; 0x32
 8006352:	d101      	bne.n	8006358 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <USB_FlushTxFifo+0x64>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e01b      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	daf2      	bge.n	8006372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <USB_FlushTxFifo+0x64>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e006      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d0f0      	beq.n	800639c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	00030d40 	.word	0x00030d40

080063cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a11      	ldr	r2, [pc, #68]	; (8006428 <USB_FlushRxFifo+0x5c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e018      	b.n	800641c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	daf2      	bge.n	80063d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2210      	movs	r2, #16
 80063fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <USB_FlushRxFifo+0x5c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e006      	b.n	800641c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d0f0      	beq.n	80063fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	00030d40 	.word	0x00030d40

0800642c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0301 	and.w	r3, r3, #1
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a13      	ldr	r2, [pc, #76]	; (80064ac <USB_CoreReset+0x64>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e01b      	b.n	800649e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	daf2      	bge.n	8006454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f043 0201 	orr.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4a09      	ldr	r2, [pc, #36]	; (80064ac <USB_CoreReset+0x64>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d901      	bls.n	8006490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d0f0      	beq.n	800647e <USB_CoreReset+0x36>

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	00030d40 	.word	0x00030d40

080064b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b0:	b084      	sub	sp, #16
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d0:	461a      	mov	r2, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006502:	2110      	movs	r1, #16
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff2d 	bl	8006364 <USB_FlushTxFifo>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ff59 	bl	80063cc <USB_FlushRxFifo>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	e015      	b.n	8006556 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006536:	461a      	mov	r2, r3
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	3301      	adds	r3, #1
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3e5      	bcc.n	800652a <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a0c      	ldr	r2, [pc, #48]	; (80065a8 <USB_HostInit+0xf8>)
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a0c      	ldr	r2, [pc, #48]	; (80065ac <USB_HostInit+0xfc>)
 800657c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f043 0210 	orr.w	r2, r3, #16
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <USB_HostInit+0x100>)
 8006592:	4313      	orrs	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065a4:	b004      	add	sp, #16
 80065a6:	4770      	bx	lr
 80065a8:	00600080 	.word	0x00600080
 80065ac:	004000e0 	.word	0x004000e0
 80065b0:	a3200008 	.word	0xa3200008

080065b4 <__libc_init_array>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4d0d      	ldr	r5, [pc, #52]	; (80065ec <__libc_init_array+0x38>)
 80065b8:	4c0d      	ldr	r4, [pc, #52]	; (80065f0 <__libc_init_array+0x3c>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	2600      	movs	r6, #0
 80065c0:	42a6      	cmp	r6, r4
 80065c2:	d109      	bne.n	80065d8 <__libc_init_array+0x24>
 80065c4:	4d0b      	ldr	r5, [pc, #44]	; (80065f4 <__libc_init_array+0x40>)
 80065c6:	4c0c      	ldr	r4, [pc, #48]	; (80065f8 <__libc_init_array+0x44>)
 80065c8:	f000 f820 	bl	800660c <_init>
 80065cc:	1b64      	subs	r4, r4, r5
 80065ce:	10a4      	asrs	r4, r4, #2
 80065d0:	2600      	movs	r6, #0
 80065d2:	42a6      	cmp	r6, r4
 80065d4:	d105      	bne.n	80065e2 <__libc_init_array+0x2e>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065dc:	4798      	blx	r3
 80065de:	3601      	adds	r6, #1
 80065e0:	e7ee      	b.n	80065c0 <__libc_init_array+0xc>
 80065e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e6:	4798      	blx	r3
 80065e8:	3601      	adds	r6, #1
 80065ea:	e7f2      	b.n	80065d2 <__libc_init_array+0x1e>
 80065ec:	08006674 	.word	0x08006674
 80065f0:	08006674 	.word	0x08006674
 80065f4:	08006674 	.word	0x08006674
 80065f8:	08006678 	.word	0x08006678

080065fc <memset>:
 80065fc:	4402      	add	r2, r0
 80065fe:	4603      	mov	r3, r0
 8006600:	4293      	cmp	r3, r2
 8006602:	d100      	bne.n	8006606 <memset+0xa>
 8006604:	4770      	bx	lr
 8006606:	f803 1b01 	strb.w	r1, [r3], #1
 800660a:	e7f9      	b.n	8006600 <memset+0x4>

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
