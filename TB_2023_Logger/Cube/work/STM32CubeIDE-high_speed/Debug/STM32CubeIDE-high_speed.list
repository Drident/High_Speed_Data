
STM32CubeIDE-high_speed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e59c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800e750  0800e750  0001e750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e900  0800e900  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e900  0800e900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e908  0800e908  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e908  0800e908  0001e908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e90c  0800e90c  0001e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003778  20000078  0800e988  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00002000  200037f0  0800e988  000237f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024133  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453f  00000000  00000000  000441db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  00048720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d80  00000000  00000000  0004a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f8b4  00000000  00000000  0004c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ad2  00000000  00000000  0007bca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111f21  00000000  00000000  000a4776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eb0  00000000  00000000  001b66e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e734 	.word	0x0800e734

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800e734 	.word	0x0800e734

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <FRAM_write_reg>:
	HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_RESET);

}
void FRAM_write_reg(SPI_HandleTypeDef hspi_1){
 8000eac:	b084      	sub	sp, #16
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	f107 0c08 	add.w	ip, r7, #8
 8000eb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f002 ff70 	bl	8003da8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi_1, (uint8_t*)&TX_Data_FRAM_REG,1, 100);
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	2201      	movs	r2, #1
 8000ecc:	490a      	ldr	r1, [pc, #40]	; (8000ef8 <FRAM_write_reg+0x4c>)
 8000ece:	f107 0008 	add.w	r0, r7, #8
 8000ed2:	f006 fbc2 	bl	800765a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f002 ff62 	bl	8003da8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000ee4:	2064      	movs	r0, #100	; 0x64
 8000ee6:	f002 f92f 	bl	8003148 <HAL_Delay>
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef2:	b004      	add	sp, #16
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000

08000efc <FRAM_reset_reg>:
void FRAM_reset_reg(SPI_HandleTypeDef hspi_1){
 8000efc:	b084      	sub	sp, #16
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	f107 0c08 	add.w	ip, r7, #8
 8000f06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f002 ff48 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi_1, (uint8_t*)&TX_Data_FRAM_RESET,1, 100);
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	490a      	ldr	r1, [pc, #40]	; (8000f48 <FRAM_reset_reg+0x4c>)
 8000f1e:	f107 0008 	add.w	r0, r7, #8
 8000f22:	f006 fb9a 	bl	800765a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f002 ff3a 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f34:	2064      	movs	r0, #100	; 0x64
 8000f36:	f002 f907 	bl	8003148 <HAL_Delay>
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f42:	b004      	add	sp, #16
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000001 	.word	0x20000001

08000f4c <FRAM_read>:
	SD_write_data(SDFile, reg_name, TX_FRAM_TEST_R[0]);
	SD_write_data(SDFile, reg_name, TX_FRAM_TEST_R[1]);
	SD_write_data(SDFile, reg_name, TX_FRAM_TEST_R[2]);
	SD_write_data(SDFile, reg_name, TX_FRAM_TEST_R[3]);
}
uint8_t* FRAM_read(enum State state_, uint32_t add, SPI_HandleTypeDef hspi_1, uint8_t data_size){
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	f107 0110 	add.w	r1, r7, #16
 8000f5a:	e881 000c 	stmia.w	r1, {r2, r3}
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	PIN_reset();
 8000f62:	f000 f91d 	bl	80011a0 <PIN_reset>
	RX_FRAM_READ[3] = (uint8_t)(add&255);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b66      	ldr	r3, [pc, #408]	; (8001104 <FRAM_read+0x1b8>)
 8000f6c:	70da      	strb	r2, [r3, #3]
	RX_FRAM_READ[2] = (uint8_t)((add>>8)&255);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b63      	ldr	r3, [pc, #396]	; (8001104 <FRAM_read+0x1b8>)
 8000f76:	709a      	strb	r2, [r3, #2]
	RX_FRAM_READ[1] = (uint8_t)((add>>16)&7);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <FRAM_read+0x1b8>)
 8000f86:	705a      	strb	r2, [r3, #1]
	RX_FRAM_READ[0] = 3;
 8000f88:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <FRAM_read+0x1b8>)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	701a      	strb	r2, [r3, #0]
	switch(state_){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	f200 80af 	bhi.w	80010f4 <FRAM_read+0x1a8>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <FRAM_read+0x50>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fe7 	.word	0x08000fe7
 8000fa4:	08001039 	.word	0x08001039
 8000fa8:	0800108b 	.word	0x0800108b
		case FRAM_0:
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2108      	movs	r1, #8
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f002 fef8 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi_1, (uint8_t*)&RX_FRAM_READ,4, 100);
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	2204      	movs	r2, #4
 8000fbc:	4951      	ldr	r1, [pc, #324]	; (8001104 <FRAM_read+0x1b8>)
 8000fbe:	f107 0010 	add.w	r0, r7, #16
 8000fc2:	f006 fb4a 	bl	800765a <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi_1, (uint8_t*)&RX_SAMPLE,data_size, 100);
 8000fc6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	494e      	ldr	r1, [pc, #312]	; (8001108 <FRAM_read+0x1bc>)
 8000fd0:	f107 0010 	add.w	r0, r7, #16
 8000fd4:	f006 fcaf 	bl	8007936 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2108      	movs	r1, #8
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f002 fee2 	bl	8003da8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);
			break;
 8000fe4:	e086      	b.n	80010f4 <FRAM_read+0x1a8>
		case FRAM_1:
			HAL_GPIO_WritePin(SELECTOR_M0_GPIO_Port, SELECTOR_M0_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f002 fedb 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f002 fed5 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi_1, (uint8_t*)&RX_FRAM_READ,4, 100);
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	2204      	movs	r2, #4
 8001002:	4940      	ldr	r1, [pc, #256]	; (8001104 <FRAM_read+0x1b8>)
 8001004:	f107 0010 	add.w	r0, r7, #16
 8001008:	f006 fb27 	bl	800765a <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi_1, (uint8_t*)&RX_SAMPLE,data_size, 100);
 800100c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001010:	b29a      	uxth	r2, r3
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	493c      	ldr	r1, [pc, #240]	; (8001108 <FRAM_read+0x1bc>)
 8001016:	f107 0010 	add.w	r0, r7, #16
 800101a:	f006 fc8c 	bl	8007936 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2108      	movs	r1, #8
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f002 febf 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M0_GPIO_Port, SELECTOR_M0_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f002 feb9 	bl	8003da8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);
			break;
 8001036:	e05d      	b.n	80010f4 <FRAM_read+0x1a8>
		case FRAM_2:
			HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2104      	movs	r1, #4
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f002 feb2 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2108      	movs	r1, #8
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f002 feac 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi_1, (uint8_t*)&RX_FRAM_READ,4, 100);
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2204      	movs	r2, #4
 8001054:	492b      	ldr	r1, [pc, #172]	; (8001104 <FRAM_read+0x1b8>)
 8001056:	f107 0010 	add.w	r0, r7, #16
 800105a:	f006 fafe 	bl	800765a <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi_1, (uint8_t*)&RX_SAMPLE,data_size, 100);
 800105e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001062:	b29a      	uxth	r2, r3
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	4928      	ldr	r1, [pc, #160]	; (8001108 <FRAM_read+0x1bc>)
 8001068:	f107 0010 	add.w	r0, r7, #16
 800106c:	f006 fc63 	bl	8007936 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2108      	movs	r1, #8
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f002 fe96 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2104      	movs	r1, #4
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f002 fe90 	bl	8003da8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);
			break;
 8001088:	e034      	b.n	80010f4 <FRAM_read+0x1a8>
		case FRAM_3:
			HAL_GPIO_WritePin(SELECTOR_M0_GPIO_Port, SELECTOR_M0_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f002 fe89 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2104      	movs	r1, #4
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f002 fe83 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2108      	movs	r1, #8
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f002 fe7d 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi_1, (uint8_t*)&RX_FRAM_READ,4, 100);
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	2204      	movs	r2, #4
 80010b2:	4914      	ldr	r1, [pc, #80]	; (8001104 <FRAM_read+0x1b8>)
 80010b4:	f107 0010 	add.w	r0, r7, #16
 80010b8:	f006 facf 	bl	800765a <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi_1, (uint8_t*)&RX_SAMPLE,data_size, 100);
 80010bc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	4910      	ldr	r1, [pc, #64]	; (8001108 <FRAM_read+0x1bc>)
 80010c6:	f107 0010 	add.w	r0, r7, #16
 80010ca:	f006 fc34 	bl	8007936 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2108      	movs	r1, #8
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f002 fe67 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2104      	movs	r1, #4
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f002 fe61 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SELECTOR_M0_GPIO_Port, SELECTOR_M0_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f002 fe5b 	bl	8003da8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);
			break;
 80010f2:	bf00      	nop
	}
	return (uint8_t*)&RX_SAMPLE;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <FRAM_read+0x1bc>)
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001100:	b002      	add	sp, #8
 8001102:	4770      	bx	lr
 8001104:	20000098 	.word	0x20000098
 8001108:	20000094 	.word	0x20000094

0800110c <setTriggChannel>:
	HAL_SPI_Transmit(&hspi_1, &pretrig, 1, 100);
	HAL_GPIO_WritePin(FPGA_PRETRIG_GPIO_Port, FPGA_PRETRIG_Pin, GPIO_PIN_RESET);

}

void setTriggChannel(enum trig_channel chan){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	switch(chan){
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d83b      	bhi.n	8001194 <setTriggChannel+0x88>
 800111c:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <setTriggChannel+0x18>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001135 	.word	0x08001135
 8001128:	0800114d 	.word	0x0800114d
 800112c:	08001165 	.word	0x08001165
 8001130:	0800117d 	.word	0x0800117d
		case CHANNEL_0:
			HAL_GPIO_WritePin(TRIG_SRC0_GPIO_Port, TRIG_SRC0_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2120      	movs	r1, #32
 8001138:	4818      	ldr	r0, [pc, #96]	; (800119c <setTriggChannel+0x90>)
 800113a:	f002 fe35 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRIG_SRC1_GPIO_Port, TRIG_SRC1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	4815      	ldr	r0, [pc, #84]	; (800119c <setTriggChannel+0x90>)
 8001146:	f002 fe2f 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 800114a:	e023      	b.n	8001194 <setTriggChannel+0x88>
		case CHANNEL_1:
			HAL_GPIO_WritePin(TRIG_SRC0_GPIO_Port, TRIG_SRC0_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2120      	movs	r1, #32
 8001150:	4812      	ldr	r0, [pc, #72]	; (800119c <setTriggChannel+0x90>)
 8001152:	f002 fe29 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRIG_SRC1_GPIO_Port, TRIG_SRC1_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	480f      	ldr	r0, [pc, #60]	; (800119c <setTriggChannel+0x90>)
 800115e:	f002 fe23 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 8001162:	e017      	b.n	8001194 <setTriggChannel+0x88>
		case CHANNEL_2:
			HAL_GPIO_WritePin(TRIG_SRC0_GPIO_Port, TRIG_SRC0_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2120      	movs	r1, #32
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <setTriggChannel+0x90>)
 800116a:	f002 fe1d 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRIG_SRC1_GPIO_Port, TRIG_SRC1_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <setTriggChannel+0x90>)
 8001176:	f002 fe17 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 800117a:	e00b      	b.n	8001194 <setTriggChannel+0x88>
		case CHANNEL_3:
			HAL_GPIO_WritePin(TRIG_SRC0_GPIO_Port, TRIG_SRC0_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2120      	movs	r1, #32
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <setTriggChannel+0x90>)
 8001182:	f002 fe11 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRIG_SRC1_GPIO_Port, TRIG_SRC1_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <setTriggChannel+0x90>)
 800118e:	f002 fe0b 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 8001192:	bf00      	nop
	}
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	48000400 	.word	0x48000400

080011a0 <PIN_reset>:


void PIN_reset(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f002 fdfb 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SELECTOR_M2_GPIO_Port, SELECTOR_M2_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f002 fdf5 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2104      	movs	r1, #4
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f002 fdef 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SELECTOR_M0_GPIO_Port, SELECTOR_M0_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f002 fde9 	bl	8003da8 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <LED_on>:

void LED_on(enum color_Led color){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	switch(color){
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d83e      	bhi.n	800126a <LED_on+0x8e>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <LED_on+0x18>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	08001225 	.word	0x08001225
 80011fc:	08001245 	.word	0x08001245
 8001200:	08001265 	.word	0x08001265
		case RED:
			HAL_GPIO_WritePin(UI_LED_R_GPIO_Port, UI_LED_R_Pin, SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2102      	movs	r1, #2
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <LED_on+0x9c>)
 800120a:	f002 fdcd 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2104      	movs	r1, #4
 8001212:	4819      	ldr	r0, [pc, #100]	; (8001278 <LED_on+0x9c>)
 8001214:	f002 fdc8 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UI_LED_G_GPIO_Port, UI_LED_G_Pin, RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2101      	movs	r1, #1
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <LED_on+0x9c>)
 800121e:	f002 fdc3 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 8001222:	e022      	b.n	800126a <LED_on+0x8e>
		case BLUE:
			HAL_GPIO_WritePin(UI_LED_R_GPIO_Port, UI_LED_R_Pin, RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2102      	movs	r1, #2
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <LED_on+0x9c>)
 800122a:	f002 fdbd 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2104      	movs	r1, #4
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <LED_on+0x9c>)
 8001234:	f002 fdb8 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UI_LED_G_GPIO_Port, UI_LED_G_Pin, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2101      	movs	r1, #1
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <LED_on+0x9c>)
 800123e:	f002 fdb3 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 8001242:	e012      	b.n	800126a <LED_on+0x8e>
		case GREEN:
			HAL_GPIO_WritePin(UI_LED_R_GPIO_Port, UI_LED_R_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2102      	movs	r1, #2
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <LED_on+0x9c>)
 800124a:	f002 fdad 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2104      	movs	r1, #4
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <LED_on+0x9c>)
 8001254:	f002 fda8 	bl	8003da8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UI_LED_G_GPIO_Port, UI_LED_G_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2101      	movs	r1, #1
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <LED_on+0x9c>)
 800125e:	f002 fda3 	bl	8003da8 <HAL_GPIO_WritePin>
			break;
 8001262:	e002      	b.n	800126a <LED_on+0x8e>
		case OFF:
			LED_off();
 8001264:	f000 f80c 	bl	8001280 <LED_off>
			break;
 8001268:	bf00      	nop
	}
	LED_STATE = color;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <LED_on+0xa0>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	7013      	strb	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	48000400 	.word	0x48000400
 800127c:	20000002 	.word	0x20000002

08001280 <LED_off>:

void LED_off(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UI_LED_R_GPIO_Port, UI_LED_R_Pin, RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <LED_off+0x2c>)
 800128a:	f002 fd8d 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <LED_off+0x2c>)
 8001294:	f002 fd88 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UI_LED_G_GPIO_Port, UI_LED_G_Pin, RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2101      	movs	r1, #1
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <LED_off+0x2c>)
 800129e:	f002 fd83 	bl	8003da8 <HAL_GPIO_WritePin>
	LED_STATE = OFF;
 80012a2:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <LED_off+0x30>)
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	48000400 	.word	0x48000400
 80012b0:	20000002 	.word	0x20000002

080012b4 <HAL_GPIO_EXTI_Callback>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "fram_func.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == FPGA_DONE_Pin){
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c4:	d10b      	bne.n	80012de <HAL_GPIO_EXTI_Callback+0x2a>
		//---------------------------------------------------RECEIVE ADD------------------------------------------
		LED_on(BLUE);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff ff88 	bl	80011dc <LED_on>
		start = true;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_GPIO_EXTI_Callback+0x68>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
		HAL_ResumeTick();
 80012d2:	f001 ff6d 	bl	80031b0 <HAL_ResumeTick>
		acqu = false;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_GPIO_EXTI_Callback+0x6c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		if(reset){
			reset = false;
			HAL_NVIC_SystemReset();
		}
	}
}
 80012dc:	e019      	b.n	8001312 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == WAKE_UP_Pin ){
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e4:	d109      	bne.n	80012fa <HAL_GPIO_EXTI_Callback+0x46>
		if(start){
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_GPIO_EXTI_Callback+0x68>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d011      	beq.n	8001312 <HAL_GPIO_EXTI_Callback+0x5e>
			HAL_ResumeTick();
 80012ee:	f001 ff5f 	bl	80031b0 <HAL_ResumeTick>
			start = false;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_GPIO_EXTI_Callback+0x68>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	e00b      	b.n	8001312 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == ARM_BUTTON_Pin){
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d108      	bne.n	8001312 <HAL_GPIO_EXTI_Callback+0x5e>
		if(reset){
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_GPIO_EXTI_Callback+0x70>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_GPIO_EXTI_Callback+0x5e>
			reset = false;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_GPIO_EXTI_Callback+0x70>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
			HAL_NVIC_SystemReset();
 800130e:	f002 f87a 	bl	8003406 <HAL_NVIC_SystemReset>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004
 8001320:	20000005 	.word	0x20000005
 8001324:	20000003 	.word	0x20000003

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	f5ad 5d91 	sub.w	sp, sp, #4640	; 0x1220
 800132e:	b082      	sub	sp, #8
 8001330:	f241 0728 	movw	r7, #4136	; 0x1028
 8001334:	446f      	add	r7, sp
	//FRESULT res; /* FatFs function common result code */
	TCHAR* fileName0 ;
	TCHAR* fileName1 ;
	TCHAR* fileName2 ;
	TCHAR* fileName3 ;
	TCHAR* file_Init = "INIT.txt";
 8001336:	4bde      	ldr	r3, [pc, #888]	; (80016b0 <main+0x388>)
 8001338:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	uint8_t	 TX_Data_ADC[2];
	uint8_t  TX_FRAM_TEST_R[10] ;
	uint16_t DATA_SD;
	uint16_t DATA_ind [TAB_SIZE/2];
 800133c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	3b01      	subs	r3, #1
 8001344:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	2200      	movs	r2, #0
 8001350:	461c      	mov	r4, r3
 8001352:	4615      	mov	r5, r2
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	012b      	lsls	r3, r5, #4
 800135e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001362:	0122      	lsls	r2, r4, #4
 8001364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	2200      	movs	r2, #0
 800136c:	4618      	mov	r0, r3
 800136e:	4611      	mov	r1, r2
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	010b      	lsls	r3, r1, #4
 800137a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800137e:	0102      	lsls	r2, r0, #4
 8001380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	3307      	adds	r3, #7
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	ebad 0d03 	sub.w	sp, sp, r3
 8001392:	f50d 5381 	add.w	r3, sp, #4128	; 0x1020
 8001396:	3308      	adds	r3, #8
 8001398:	3301      	adds	r3, #1
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	uint8_t pretrigValue = 100;
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f001 fe59 	bl	800305e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 fc42 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f000 fe8c 	bl	80020cc <MX_GPIO_Init>
  MX_DAC1_Init();
 80013b4:	f000 fc92 	bl	8001cdc <MX_DAC1_Init>
  MX_SDMMC1_SD_Init();
 80013b8:	f000 fd4c 	bl	8001e54 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80013bc:	f000 fd6a 	bl	8001e94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013c0:	f000 fe0c 	bl	8001fdc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80013c4:	f000 fcc6 	bl	8001d54 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013c8:	f000 fd04 	bl	8001dd4 <MX_I2C2_Init>
  MX_SPI2_Init();
 80013cc:	f000 fda0 	bl	8001f10 <MX_SPI2_Init>
  MX_DMA_Init();
 80013d0:	f000 fe56 	bl	8002080 <MX_DMA_Init>
  MX_USB_OTG_FS_HCD_Init();
 80013d4:	f000 fe32 	bl	800203c <MX_USB_OTG_FS_HCD_Init>
  MX_FATFS_Init();
 80013d8:	f008 fe36 	bl	800a048 <MX_FATFS_Init>
  MX_TIM16_Init();
 80013dc:	f000 fdd6 	bl	8001f8c <MX_TIM16_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   uint8_t start_Add[4] ;
   uint32_t start_Add_tot = 0 ;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
   uint32_t Add_= 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
   uint8_t TX_32 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
   uint16_t boucle = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
   uint8_t wtext_3 [100] ;
   uint8_t* receive;
   uint8_t chann;
   double* dataInit_;
   double triggDacValue;
   PIN_reset();
 80013f8:	f7ff fed2 	bl	80011a0 <PIN_reset>
   //FRAM_device(hspi1);
  while (1)
  {
	acqu = true;
 80013fc:	4bad      	ldr	r3, [pc, #692]	; (80016b4 <main+0x38c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	TX_32 = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	start = true;
 8001408:	4bab      	ldr	r3, [pc, #684]	; (80016b8 <main+0x390>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
	HAL_SuspendTick();
 800140e:	f001 febf 	bl	8003190 <HAL_SuspendTick>
	__WFI();
 8001412:	bf30      	wfi

	//--------------------------------------------------RESET FPGA----------------------------------------
	HAL_GPIO_WritePin(FPGA_RESET_GPIO_Port, FPGA_RESET_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2101      	movs	r1, #1
 8001418:	48a8      	ldr	r0, [pc, #672]	; (80016bc <main+0x394>)
 800141a:	f002 fcc5 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800141e:	2064      	movs	r0, #100	; 0x64
 8001420:	f001 fe92 	bl	8003148 <HAL_Delay>
	HAL_GPIO_WritePin(FPGA_RESET_GPIO_Port, FPGA_RESET_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2101      	movs	r1, #1
 8001428:	48a4      	ldr	r0, [pc, #656]	; (80016bc <main+0x394>)
 800142a:	f002 fcbd 	bl	8003da8 <HAL_GPIO_WritePin>
	//--------------------------------------------------RESET M---------------------------------------
	PIN_reset();
 800142e:	f7ff feb7 	bl	80011a0 <PIN_reset>
	//----------------------------------------------------------INIT-------------------------------------------
	//-------------------init file sd --------------------------------------
	sprintf((char*)wtext_0, "FRAM0_%d.bin",boucle);
 8001432:	f8b7 21f4 	ldrh.w	r2, [r7, #500]	; 0x1f4
 8001436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800143a:	49a1      	ldr	r1, [pc, #644]	; (80016c0 <main+0x398>)
 800143c:	4618      	mov	r0, r3
 800143e:	f00b fdff 	bl	800d040 <siprintf>
	fileName0 = (TCHAR*)wtext_0;
 8001442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001446:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	SD_create_file(SDFile, fileName0);
 800144a:	4c9e      	ldr	r4, [pc, #632]	; (80016c4 <main+0x39c>)
 800144c:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001450:	461a      	mov	r2, r3
 8001452:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001456:	6213      	str	r3, [r2, #32]
 8001458:	4668      	mov	r0, sp
 800145a:	f104 0310 	add.w	r3, r4, #16
 800145e:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 8001462:	4619      	mov	r1, r3
 8001464:	f00b fdd6 	bl	800d014 <memcpy>
 8001468:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800146c:	f000 ff2c 	bl	80022c8 <SD_create_file>
	sprintf((char*)wtext_1, "FRAM1_%d.bin",boucle);
 8001470:	f8b7 21f4 	ldrh.w	r2, [r7, #500]	; 0x1f4
 8001474:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001478:	4993      	ldr	r1, [pc, #588]	; (80016c8 <main+0x3a0>)
 800147a:	4618      	mov	r0, r3
 800147c:	f00b fde0 	bl	800d040 <siprintf>
	fileName1 = (TCHAR*)wtext_1;
 8001480:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001484:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	SD_create_file(SDFile, fileName1);
 8001488:	4c8e      	ldr	r4, [pc, #568]	; (80016c4 <main+0x39c>)
 800148a:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800148e:	461a      	mov	r2, r3
 8001490:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4668      	mov	r0, sp
 8001498:	f104 0310 	add.w	r3, r4, #16
 800149c:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 80014a0:	4619      	mov	r1, r3
 80014a2:	f00b fdb7 	bl	800d014 <memcpy>
 80014a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014aa:	f000 ff0d 	bl	80022c8 <SD_create_file>
	sprintf((char*)wtext_2, "FRAM2_%d.bin",boucle);
 80014ae:	f8b7 21f4 	ldrh.w	r2, [r7, #500]	; 0x1f4
 80014b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014b6:	4985      	ldr	r1, [pc, #532]	; (80016cc <main+0x3a4>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00b fdc1 	bl	800d040 <siprintf>
	fileName2 = (TCHAR*)wtext_2;
 80014be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	SD_create_file(SDFile, fileName2);
 80014c6:	4c7f      	ldr	r4, [pc, #508]	; (80016c4 <main+0x39c>)
 80014c8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80014cc:	461a      	mov	r2, r3
 80014ce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	4668      	mov	r0, sp
 80014d6:	f104 0310 	add.w	r3, r4, #16
 80014da:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 80014de:	4619      	mov	r1, r3
 80014e0:	f00b fd98 	bl	800d014 <memcpy>
 80014e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014e8:	f000 feee 	bl	80022c8 <SD_create_file>
	sprintf((char*)wtext_3, "FRAM3_%d.bin",boucle);
 80014ec:	f8b7 21f4 	ldrh.w	r2, [r7, #500]	; 0x1f4
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4977      	ldr	r1, [pc, #476]	; (80016d0 <main+0x3a8>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00b fda3 	bl	800d040 <siprintf>
	fileName3 = (TCHAR*)wtext_3;
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	SD_create_file(SDFile, fileName3);
 8001500:	4c70      	ldr	r4, [pc, #448]	; (80016c4 <main+0x39c>)
 8001502:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001506:	461a      	mov	r2, r3
 8001508:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	4668      	mov	r0, sp
 8001510:	f104 0310 	add.w	r3, r4, #16
 8001514:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 8001518:	4619      	mov	r1, r3
 800151a:	f00b fd7b 	bl	800d014 <memcpy>
 800151e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001522:	f000 fed1 	bl	80022c8 <SD_create_file>

	//-------------------init value------------------------------------------------------------------------
	dataInit_ = initValue(SDFile, file_Init);
 8001526:	4c67      	ldr	r4, [pc, #412]	; (80016c4 <main+0x39c>)
 8001528:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4668      	mov	r0, sp
 8001536:	f104 0310 	add.w	r3, r4, #16
 800153a:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 800153e:	4619      	mov	r1, r3
 8001540:	f00b fd68 	bl	800d014 <memcpy>
 8001544:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001548:	f000 ffde 	bl	8002508 <initValue>
 800154c:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4

	chann = (uint8_t)dataInit_[0];
 8001550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fb04 	bl	8000b68 <__aeabi_d2uiz>
 8001560:	4603      	mov	r3, r0
 8001562:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
	if(chann >4){
 8001566:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 800156a:	2b04      	cmp	r3, #4
 800156c:	d902      	bls.n	8001574 <main+0x24c>
		chann = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
	}
	triggDacValue = dataInit_[1]*(0.02)+1;
 8001574:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001578:	3308      	adds	r3, #8
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	a348      	add	r3, pc, #288	; (adr r3, 80016a0 <main+0x378>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <main+0x3ac>)
 8001596:	f7fe fe81 	bl	800029c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
	if(triggDacValue <1 || triggDacValue>3.3){
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <main+0x3ac>)
 80015a8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80015ac:	f7ff fa9e 	bl	8000aec <__aeabi_dcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <main+0x2a2>
 80015b6:	a33c      	add	r3, pc, #240	; (adr r3, 80016a8 <main+0x380>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80015c0:	f7ff fab2 	bl	8000b28 <__aeabi_dcmpgt>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <main+0x2ac>
		triggDacValue = 1;
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <main+0x3ac>)
 80015d0:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
	}
	pretrigValue = (uint8_t)dataInit_[2];
 80015d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015d8:	3310      	adds	r3, #16
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fac1 	bl	8000b68 <__aeabi_d2uiz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	if(pretrigValue >100){
 80015ee:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d902      	bls.n	80015fc <main+0x2d4>
		pretrigValue = 100;
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	}
	//--------------------------------------------------LED CONTROL----------------------------------------
	if(LED_STATE != RED){
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <main+0x3b0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80b3 	beq.w	800176c <main+0x444>
		LED_on(BLUE);
 8001606:	2001      	movs	r0, #1
 8001608:	f7ff fde8 	bl	80011dc <LED_on>
			//reset the systeme
		}
	}

	//-------------------init trigg dc value--------------------------------
	uint32_t triggDac = (uint32_t)((triggDacValue/VREF_VOLTAGE)*DAC_MAX_VALUE);
 800160c:	a326      	add	r3, pc, #152	; (adr r3, 80016a8 <main+0x380>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001616:	f7ff f921 	bl	800085c <__aeabi_ddiv>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <main+0x3b4>)
 8001628:	f7fe ffee 	bl	8000608 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa98 	bl	8000b68 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, triggDac);
 800163e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001642:	2200      	movs	r2, #0
 8001644:	2110      	movs	r1, #16
 8001646:	4826      	ldr	r0, [pc, #152]	; (80016e0 <main+0x3b8>)
 8001648:	f001 ff5c 	bl	8003504 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800164c:	2110      	movs	r1, #16
 800164e:	4824      	ldr	r0, [pc, #144]	; (80016e0 <main+0x3b8>)
 8001650:	f001 ff0b 	bl	800346a <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, triggDac);
 8001654:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	4820      	ldr	r0, [pc, #128]	; (80016e0 <main+0x3b8>)
 800165e:	f001 ff51 	bl	8003504 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8001662:	2100      	movs	r1, #0
 8001664:	481e      	ldr	r0, [pc, #120]	; (80016e0 <main+0x3b8>)
 8001666:	f001 ff00 	bl	800346a <HAL_DAC_Start>

	//-------------------init pretrigg value--------------------------------
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&pretrigValue,1, 100);
 800166a:	f207 119b 	addw	r1, r7, #411	; 0x19b
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	2201      	movs	r2, #1
 8001672:	481c      	ldr	r0, [pc, #112]	; (80016e4 <main+0x3bc>)
 8001674:	f005 fff1 	bl	800765a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(FPGA_PRETRIG_GPIO_Port, FPGA_PRETRIG_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2104      	movs	r1, #4
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <main+0x394>)
 800167e:	f002 fb93 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&pretrigValue,1, 100);
 8001682:	f207 119b 	addw	r1, r7, #411	; 0x19b
 8001686:	2364      	movs	r3, #100	; 0x64
 8001688:	2201      	movs	r2, #1
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <main+0x3bc>)
 800168c:	f005 ffe5 	bl	800765a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(FPGA_PRETRIG_GPIO_Port, FPGA_PRETRIG_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2104      	movs	r1, #4
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <main+0x394>)
 8001696:	f002 fb87 	bl	8003da8 <HAL_GPIO_WritePin>
 800169a:	e025      	b.n	80016e8 <main+0x3c0>
 800169c:	f3af 8000 	nop.w
 80016a0:	47ae147b 	.word	0x47ae147b
 80016a4:	3f947ae1 	.word	0x3f947ae1
 80016a8:	66666666 	.word	0x66666666
 80016ac:	400a6666 	.word	0x400a6666
 80016b0:	0800e750 	.word	0x0800e750
 80016b4:	20000005 	.word	0x20000005
 80016b8:	20000004 	.word	0x20000004
 80016bc:	48000800 	.word	0x48000800
 80016c0:	0800e75c 	.word	0x0800e75c
 80016c4:	2000277c 	.word	0x2000277c
 80016c8:	0800e76c 	.word	0x0800e76c
 80016cc:	0800e77c 	.word	0x0800e77c
 80016d0:	0800e78c 	.word	0x0800e78c
 80016d4:	3ff00000 	.word	0x3ff00000
 80016d8:	20000002 	.word	0x20000002
 80016dc:	40b00000 	.word	0x40b00000
 80016e0:	200000a0 	.word	0x200000a0
 80016e4:	200001e0 	.word	0x200001e0

	//-------------------init trigg channel --------------------------------------
	setTriggChannel(chann);
 80016e8:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd0d 	bl	800110c <setTriggChannel>
	//--------------------------------------------------RESET FRAM REG----------------------------------------
	FRAM_reset_reg(hspi1);
 80016f2:	4cc8      	ldr	r4, [pc, #800]	; (8001a14 <main+0x6ec>)
 80016f4:	4668      	mov	r0, sp
 80016f6:	f104 0310 	add.w	r3, r4, #16
 80016fa:	2254      	movs	r2, #84	; 0x54
 80016fc:	4619      	mov	r1, r3
 80016fe:	f00b fc89 	bl	800d014 <memcpy>
 8001702:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001706:	f7ff fbf9 	bl	8000efc <FRAM_reset_reg>
	//--------------------------------------------------WRITE FRAM REG----------------------------------------
	FRAM_write_reg(hspi1);
 800170a:	4cc2      	ldr	r4, [pc, #776]	; (8001a14 <main+0x6ec>)
 800170c:	4668      	mov	r0, sp
 800170e:	f104 0310 	add.w	r3, r4, #16
 8001712:	2254      	movs	r2, #84	; 0x54
 8001714:	4619      	mov	r1, r3
 8001716:	f00b fc7d 	bl	800d014 <memcpy>
 800171a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171e:	f7ff fbc5 	bl	8000eac <FRAM_write_reg>
	//--------------------------------------------------ADC WRITE REG-----------------------------------------
	TX_Data_ADC[0] = 0xA2;
 8001722:	23a2      	movs	r3, #162	; 0xa2
 8001724:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
	TX_Data_ADC[1] = 0x80;
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
	HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2104      	movs	r1, #4
 8001732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001736:	f002 fb37 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)TX_Data_ADC,2, 100);
 800173a:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 800173e:	2364      	movs	r3, #100	; 0x64
 8001740:	2202      	movs	r2, #2
 8001742:	48b4      	ldr	r0, [pc, #720]	; (8001a14 <main+0x6ec>)
 8001744:	f005 ff89 	bl	800765a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f002 fb2a 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f001 fcf7 	bl	8003148 <HAL_Delay>

	//---------------------------------------------------WRITE FRAM-------------------------------------------
	PIN_reset();
 800175a:	f7ff fd21 	bl	80011a0 <PIN_reset>
	TX_FRAM_TEST_R[0] = 2;
 800175e:	2302      	movs	r3, #2
 8001760:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
	for(int i =1; i<5;i++){
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800176a:	e00c      	b.n	8001786 <main+0x45e>
		while(1){
 800176c:	e7fe      	b.n	800176c <main+0x444>
	  TX_FRAM_TEST_R[i] = 0;
 800176e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001772:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001776:	4413      	add	r3, r2
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	for(int i =1; i<5;i++){
 800177c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001786:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800178a:	2b04      	cmp	r3, #4
 800178c:	ddef      	ble.n	800176e <main+0x446>
	}
	TX_FRAM_TEST_R[3] = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	TX_FRAM_TEST_R[4] = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
	TX_FRAM_TEST_R[5] = 56;
 800179a:	2338      	movs	r3, #56	; 0x38
 800179c:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1

	HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f002 fafd 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)TX_FRAM_TEST_R,6, 100);
 80017ae:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80017b2:	2364      	movs	r3, #100	; 0x64
 80017b4:	2206      	movs	r2, #6
 80017b6:	4897      	ldr	r0, [pc, #604]	; (8001a14 <main+0x6ec>)
 80017b8:	f005 ff4f 	bl	800765a <HAL_SPI_Transmit>
	HAL_Delay(100);
 80017bc:	2064      	movs	r0, #100	; 0x64
 80017be:	f001 fcc3 	bl	8003148 <HAL_Delay>

	//---------------------------------------------------ADC TO FRAM--------------------------------------------
	HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2104      	movs	r1, #4
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f002 faed 	bl	8003da8 <HAL_GPIO_WritePin>
	//---------------------------------------------------SLEEP MODE--------------------------------------------
	//HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	while(acqu){
 80017ce:	e002      	b.n	80017d6 <main+0x4ae>
		HAL_SuspendTick();
 80017d0:	f001 fcde 	bl	8003190 <HAL_SuspendTick>
		__WFI();
 80017d4:	bf30      	wfi
	while(acqu){
 80017d6:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <main+0x6f0>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f8      	bne.n	80017d0 <main+0x4a8>
	}
	//HAL_PWR_ENTER
	PIN_reset();
 80017de:	f7ff fcdf 	bl	80011a0 <PIN_reset>
	while(TX_32 <16) {
 80017e2:	e1fc      	b.n	8001bde <main+0x8b6>
		  if(TX_32 == 0){
 80017e4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d138      	bne.n	800185e <main+0x536>
			  PIN_reset();
 80017ec:	f7ff fcd8 	bl	80011a0 <PIN_reset>
			  HAL_GPIO_WritePin(SELECTOR_M0_GPIO_Port, SELECTOR_M0_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2101      	movs	r1, #1
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f002 fad6 	bl	8003da8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SELECTOR_M1_GPIO_Port, SELECTOR_M1_Pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2104      	movs	r1, #4
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f002 fad0 	bl	8003da8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SELECTOR_M3_GPIO_Port, SELECTOR_M3_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f002 fac9 	bl	8003da8 <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, (uint8_t*)start_Add,4, 100);
 8001816:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	2204      	movs	r2, #4
 800181e:	487d      	ldr	r0, [pc, #500]	; (8001a14 <main+0x6ec>)
 8001820:	f006 f889 	bl	8007936 <HAL_SPI_Receive>
			  HAL_Delay(100);
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f001 fc8f 	bl	8003148 <HAL_Delay>
			  start_Add_tot = (((uint32_t)start_Add[0])<<24)+(((uint32_t)start_Add[1])<<16)
 800182a:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800182e:	061a      	lsls	r2, r3, #24
 8001830:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	441a      	add	r2, r3
										+(((uint32_t)start_Add[2])<<8)+((uint32_t)start_Add[3]);
 8001838:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4413      	add	r3, r2
 8001840:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
			  start_Add_tot = (((uint32_t)start_Add[0])<<24)+(((uint32_t)start_Add[1])<<16)
 8001844:	4413      	add	r3, r2
 8001846:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			  PIN_reset();
 800184a:	f7ff fca9 	bl	80011a0 <PIN_reset>
			  start_Add_tot = start_Add_tot>>12;
 800184e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001852:	0b1b      	lsrs	r3, r3, #12
 8001854:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			  //start_Add_tot = 0;
			  HAL_TIM_Base_Start_IT(&htim16);
 8001858:	4870      	ldr	r0, [pc, #448]	; (8001a1c <main+0x6f4>)
 800185a:	f006 fde9 	bl	8008430 <HAL_TIM_Base_Start_IT>
		  }
		 //---------------------------------------------------READ FRAM 0--------------------------------------------
		 for(uint32_t i = 0; i<(TAB_SIZE/2) ; i++){
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001864:	e046      	b.n	80018f4 <main+0x5cc>
			  Add_ = i*2+TAB_SIZE*TX_32+(MEMORY_SIZE);
 8001866:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800186a:	005a      	lsls	r2, r3, #1
 800186c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 800187e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  if(Add_> MEMORY_SIZE){
 8001882:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001886:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800188a:	d905      	bls.n	8001898 <main+0x570>
				  Add_ = Add_ - MEMORY_SIZE;
 800188c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001890:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8001894:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  }
			  //receive = FRAM_read(FRAM_0,i*2+TAB_SIZE*TX_32, hspi1, 2);
			 receive = FRAM_read(FRAM_0, Add_, hspi1, 2);
 8001898:	4c5e      	ldr	r4, [pc, #376]	; (8001a14 <main+0x6ec>)
 800189a:	2302      	movs	r3, #2
 800189c:	9317      	str	r3, [sp, #92]	; 0x5c
 800189e:	4668      	mov	r0, sp
 80018a0:	f104 0308 	add.w	r3, r4, #8
 80018a4:	225c      	movs	r2, #92	; 0x5c
 80018a6:	4619      	mov	r1, r3
 80018a8:	f00b fbb4 	bl	800d014 <memcpy>
 80018ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018b0:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fb49 	bl	8000f4c <FRAM_read>
 80018ba:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			 DATA_SD = (((uint16_t)receive[0])<<8)+(uint16_t)(receive[1]);
 80018be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018ce:	3301      	adds	r3, #1
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
			 // DATA_SD = (((uint16_t)RX_FAST[i*2])<<8)+(uint16_t)(RX_FAST[i*2+1]);
			  DATA_ind[i] = DATA_SD;
 80018da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018de:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80018e2:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 80018e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		 for(uint32_t i = 0; i<(TAB_SIZE/2) ; i++){
 80018ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018ee:	3301      	adds	r3, #1
 80018f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3b1      	bcc.n	8001866 <main+0x53e>
		  }
		  SD_write_data(SDFile, fileName0, DATA_ind);
 8001902:	4c47      	ldr	r4, [pc, #284]	; (8001a20 <main+0x6f8>)
 8001904:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001908:	461a      	mov	r2, r3
 800190a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800190e:	6253      	str	r3, [r2, #36]	; 0x24
 8001910:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001914:	461a      	mov	r2, r3
 8001916:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	4668      	mov	r0, sp
 800191e:	f104 0310 	add.w	r3, r4, #16
 8001922:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 8001926:	4619      	mov	r1, r3
 8001928:	f00b fb74 	bl	800d014 <memcpy>
 800192c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001930:	f000 fd0e 	bl	8002350 <SD_write_data>
		  //---------------------------------------------------READ FRAM 1--------------------------------------------
		  for(uint32_t i = 0; i<(TAB_SIZE/2) ; i++){
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800193a:	e046      	b.n	80019ca <main+0x6a2>
			  Add_ = i*2+TAB_SIZE*TX_32+(MEMORY_SIZE);
 800193c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001940:	005a      	lsls	r2, r3, #1
 8001942:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001954:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  if(Add_> MEMORY_SIZE){
 8001958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800195c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001960:	d905      	bls.n	800196e <main+0x646>
				  Add_ = Add_ - MEMORY_SIZE;
 8001962:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001966:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800196a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  }
			  receive = FRAM_read(FRAM_1, Add_, hspi1, 2);
 800196e:	4c29      	ldr	r4, [pc, #164]	; (8001a14 <main+0x6ec>)
 8001970:	2302      	movs	r3, #2
 8001972:	9317      	str	r3, [sp, #92]	; 0x5c
 8001974:	4668      	mov	r0, sp
 8001976:	f104 0308 	add.w	r3, r4, #8
 800197a:	225c      	movs	r2, #92	; 0x5c
 800197c:	4619      	mov	r1, r3
 800197e:	f00b fb49 	bl	800d014 <memcpy>
 8001982:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001986:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff fade 	bl	8000f4c <FRAM_read>
 8001990:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			  DATA_SD = (((uint16_t)receive[0])<<8)+(uint16_t)(receive[1]);
 8001994:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80019a4:	3301      	adds	r3, #1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
			  //DATA_SD = (short)DATA_SD;
			  DATA_ind[i] = DATA_SD;
 80019b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019b4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80019b8:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 80019bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(uint32_t i = 0; i<(TAB_SIZE/2) ; i++){
 80019c0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80019c4:	3301      	adds	r3, #1
 80019c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d3b1      	bcc.n	800193c <main+0x614>
		  }
		  SD_write_data(SDFile, fileName1, DATA_ind);
 80019d8:	4c11      	ldr	r4, [pc, #68]	; (8001a20 <main+0x6f8>)
 80019da:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80019de:	461a      	mov	r2, r3
 80019e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019e4:	6253      	str	r3, [r2, #36]	; 0x24
 80019e6:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80019ea:	461a      	mov	r2, r3
 80019ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4668      	mov	r0, sp
 80019f4:	f104 0310 	add.w	r3, r4, #16
 80019f8:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 80019fc:	4619      	mov	r1, r3
 80019fe:	f00b fb09 	bl	800d014 <memcpy>
 8001a02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a06:	f000 fca3 	bl	8002350 <SD_write_data>
		  //---------------------------------------------------READ FRAM 2--------------------------------------------
		  for(uint32_t i = 0; i<TAB_SIZE/2 ; i++){
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001a10:	e052      	b.n	8001ab8 <main+0x790>
 8001a12:	bf00      	nop
 8001a14:	200001e0 	.word	0x200001e0
 8001a18:	20000005 	.word	0x20000005
 8001a1c:	20000338 	.word	0x20000338
 8001a20:	2000277c 	.word	0x2000277c
			  Add_ = i*2+TAB_SIZE*TX_32+(MEMORY_SIZE-start_Add_tot);
 8001a24:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001a28:	005a      	lsls	r2, r3, #1
 8001a2a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	441a      	add	r2, r3
 8001a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001a42:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  if(Add_> MEMORY_SIZE){
 8001a46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a4e:	d905      	bls.n	8001a5c <main+0x734>
				  Add_ = Add_ - MEMORY_SIZE;
 8001a50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a54:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8001a58:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  }
			  receive = FRAM_read(FRAM_2,Add_, hspi1, 2);
 8001a5c:	4c71      	ldr	r4, [pc, #452]	; (8001c24 <main+0x8fc>)
 8001a5e:	2302      	movs	r3, #2
 8001a60:	9317      	str	r3, [sp, #92]	; 0x5c
 8001a62:	4668      	mov	r0, sp
 8001a64:	f104 0308 	add.w	r3, r4, #8
 8001a68:	225c      	movs	r2, #92	; 0x5c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f00b fad2 	bl	800d014 <memcpy>
 8001a70:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001a74:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f7ff fa67 	bl	8000f4c <FRAM_read>
 8001a7e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			  DATA_SD = (((uint16_t)receive[0])<<8)+(uint16_t)(receive[1]);
 8001a82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a92:	3301      	adds	r3, #1
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
			  //DATA_SD = (short)DATA_SD;
			  DATA_ind[i] = DATA_SD;
 8001a9e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001aa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001aa6:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 8001aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(uint32_t i = 0; i<TAB_SIZE/2 ; i++){
 8001aae:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3ae      	bcc.n	8001a24 <main+0x6fc>
		  }
		  SD_write_data(SDFile, fileName2, DATA_ind);
 8001ac6:	4c58      	ldr	r4, [pc, #352]	; (8001c28 <main+0x900>)
 8001ac8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001acc:	461a      	mov	r2, r3
 8001ace:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ad2:	6253      	str	r3, [r2, #36]	; 0x24
 8001ad4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	4668      	mov	r0, sp
 8001ae2:	f104 0310 	add.w	r3, r4, #16
 8001ae6:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 8001aea:	4619      	mov	r1, r3
 8001aec:	f00b fa92 	bl	800d014 <memcpy>
 8001af0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001af4:	f000 fc2c 	bl	8002350 <SD_write_data>
		  //---------------------------------------------------READ FRAM 3--------------------------------------------
		  for(uint32_t i = 0; i<TAB_SIZE/2 ; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001afe:	e049      	b.n	8001b94 <main+0x86c>
			  Add_ = i*2+TAB_SIZE*TX_32+(MEMORY_SIZE-start_Add_tot);
 8001b00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b04:	005a      	lsls	r2, r3, #1
 8001b06:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	441a      	add	r2, r3
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001b1e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  if(Add_> MEMORY_SIZE){
 8001b22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b2a:	d905      	bls.n	8001b38 <main+0x810>
				  Add_ = Add_ - MEMORY_SIZE;
 8001b2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b30:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8001b34:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  }
			  receive = FRAM_read(FRAM_3,Add_, hspi1, 2);
 8001b38:	4c3a      	ldr	r4, [pc, #232]	; (8001c24 <main+0x8fc>)
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8001b3e:	4668      	mov	r0, sp
 8001b40:	f104 0308 	add.w	r3, r4, #8
 8001b44:	225c      	movs	r2, #92	; 0x5c
 8001b46:	4619      	mov	r1, r3
 8001b48:	f00b fa64 	bl	800d014 <memcpy>
 8001b4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001b50:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001b54:	2003      	movs	r0, #3
 8001b56:	f7ff f9f9 	bl	8000f4c <FRAM_read>
 8001b5a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			  DATA_SD = (((uint16_t)receive[0])<<8)+(uint16_t)(receive[1]);
 8001b5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b6e:	3301      	adds	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
			  //DATA_SD = (short)DATA_SD;
			  DATA_ind[i] = DATA_SD;
 8001b7a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b7e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b82:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 8001b86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(uint32_t i = 0; i<TAB_SIZE/2 ; i++){
 8001b8a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3ae      	bcc.n	8001b00 <main+0x7d8>
		  }
		  SD_write_data(SDFile, fileName3, DATA_ind);
 8001ba2:	4c21      	ldr	r4, [pc, #132]	; (8001c28 <main+0x900>)
 8001ba4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bae:	6253      	str	r3, [r2, #36]	; 0x24
 8001bb0:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4668      	mov	r0, sp
 8001bbe:	f104 0310 	add.w	r3, r4, #16
 8001bc2:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f00b fa24 	bl	800d014 <memcpy>
 8001bcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bd0:	f000 fbbe 	bl	8002350 <SD_write_data>
		  TX_32++;
 8001bd4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	while(TX_32 <16) {
 8001bde:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f adfe 	bls.w	80017e4 <main+0x4bc>
		  //receive = FRAM_read(FRAM_3, TX_32, hspi1, 2);
		  //DATA_SD = (((uint16_t)receive[0])<<8)+(uint16_t)(receive[1]);
		  //DATA_SD = (short)DATA_SD;
		  //SD_write_data(SDFile, fileName3, DATA_SD);
	  }
	  if(TX_32==16){
 8001be8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d111      	bne.n	8001c14 <main+0x8ec>
		  HAL_TIM_Base_Stop(&htim16);
 8001bf0:	480e      	ldr	r0, [pc, #56]	; (8001c2c <main+0x904>)
 8001bf2:	f006 fbf6 	bl	80083e2 <HAL_TIM_Base_Stop>
		  if(LED_STATE != RED){
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <main+0x908>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <main+0x8e2>
			  LED_off();
 8001bfe:	f7ff fb3f 	bl	8001280 <LED_off>
		  	  LED_on(GREEN); //6
 8001c02:	2002      	movs	r0, #2
 8001c04:	f7ff faea 	bl	80011dc <LED_on>
 8001c08:	e004      	b.n	8001c14 <main+0x8ec>
		  }
		  else{
			  LED_off();
 8001c0a:	f7ff fb39 	bl	8001280 <LED_off>
			  LED_on(RED);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fae4 	bl	80011dc <LED_on>
		  }
	  }
	  boucle++;
 8001c14:	f8b7 31f4 	ldrh.w	r3, [r7, #500]	; 0x1f4
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
  {
 8001c1e:	f7ff bbed 	b.w	80013fc <main+0xd4>
 8001c22:	bf00      	nop
 8001c24:	200001e0 	.word	0x200001e0
 8001c28:	2000277c 	.word	0x2000277c
 8001c2c:	20000338 	.word	0x20000338
 8001c30:	20000002 	.word	0x20000002

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b096      	sub	sp, #88	; 0x58
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2244      	movs	r2, #68	; 0x44
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00b f9f4 	bl	800d030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c5a:	f002 fa85 	bl	8004168 <HAL_PWREx_ControlVoltageScaling>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c64:	f000 fb2a 	bl	80022bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8001c68:	2330      	movs	r3, #48	; 0x30
 8001c6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c78:	2360      	movs	r3, #96	; 0x60
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c80:	2301      	movs	r3, #1
 8001c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fac9 	bl	8004234 <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ca8:	f000 fb08 	bl	80022bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
 8001cae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fecf 	bl	8004a68 <HAL_RCC_ClockConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001cd0:	f000 faf4 	bl	80022bc <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3758      	adds	r7, #88	; 0x58
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2224      	movs	r2, #36	; 0x24
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00b f9a1 	bl	800d030 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_DAC1_Init+0x70>)
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <MX_DAC1_Init+0x74>)
 8001cf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001cf4:	4815      	ldr	r0, [pc, #84]	; (8001d4c <MX_DAC1_Init+0x70>)
 8001cf6:	f001 fb96 	bl	8003426 <HAL_DAC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d00:	f000 fadc 	bl	80022bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480b      	ldr	r0, [pc, #44]	; (8001d4c <MX_DAC1_Init+0x70>)
 8001d20:	f001 fc15 	bl	800354e <HAL_DAC_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d2a:	f000 fac7 	bl	80022bc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2210      	movs	r2, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_DAC1_Init+0x70>)
 8001d36:	f001 fc0a 	bl	800354e <HAL_DAC_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001d40:	f000 fabc 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200000a0 	.word	0x200000a0
 8001d50:	40007400 	.word	0x40007400

08001d54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <MX_I2C1_Init+0x78>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <MX_I2C1_Init+0x7c>)
 8001d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d8e:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d90:	f002 f8b6 	bl	8003f00 <HAL_I2C_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d9a:	f000 fa8f 	bl	80022bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001da2:	f002 f93c 	bl	800401e <HAL_I2CEx_ConfigAnalogFilter>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dac:	f000 fa86 	bl	80022bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001db0:	2100      	movs	r1, #0
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001db4:	f002 f97e 	bl	80040b4 <HAL_I2CEx_ConfigDigitalFilter>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dbe:	f000 fa7d 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000b4 	.word	0x200000b4
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	10707dbc 	.word	0x10707dbc

08001dd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <MX_I2C2_Init+0x78>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <MX_I2C2_Init+0x7c>)
 8001de2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e0e:	480e      	ldr	r0, [pc, #56]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001e10:	f002 f876 	bl	8003f00 <HAL_I2C_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e1a:	f000 fa4f 	bl	80022bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001e22:	f002 f8fc 	bl	800401e <HAL_I2CEx_ConfigAnalogFilter>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e2c:	f000 fa46 	bl	80022bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_I2C2_Init+0x74>)
 8001e34:	f002 f93e 	bl	80040b4 <HAL_I2CEx_ConfigDigitalFilter>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e3e:	f000 fa3d 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000108 	.word	0x20000108
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	10707dbc 	.word	0x10707dbc

08001e54 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <MX_SDMMC1_SD_Init+0x3c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <MX_SDMMC1_SD_Init+0x38>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	2000015c 	.word	0x2000015c
 8001e90:	40012800 	.word	0x40012800

08001e94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <MX_SPI1_Init+0x78>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ea4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001eae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001eb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_SPI1_Init+0x74>)
 8001ef4:	f005 fb0e 	bl	8007514 <HAL_SPI_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001efe:	f000 f9dd 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200001e0 	.word	0x200001e0
 8001f0c:	40013000 	.word	0x40013000

08001f10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <MX_SPI2_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f2c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f72:	f005 facf 	bl	8007514 <HAL_SPI_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001f7c:	f000 f99e 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000244 	.word	0x20000244
 8001f88:	40003800 	.word	0x40003800

08001f8c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <MX_TIM16_Init+0x4c>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400-1;
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001f98:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001f9c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001faa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001fc0:	f006 f9b8 	bl	8008334 <HAL_TIM_Base_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001fca:	f000 f977 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000338 	.word	0x20000338
 8001fd8:	40014400 	.word	0x40014400

08001fdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART1_UART_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART1_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART1_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART1_UART_Init+0x58>)
 8002020:	f006 fc76 	bl	8008910 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f000 f947 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000384 	.word	0x20000384
 8002038:	40013800 	.word	0x40013800

0800203c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002046:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800204a:	220c      	movs	r2, #12
 800204c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002050:	2201      	movs	r2, #1
 8002052:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800205c:	2202      	movs	r2, #2
 800205e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002068:	f001 fee8 	bl	8003e3c <HAL_HCD_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8002072:	f000 f923 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000408 	.word	0x20000408

08002080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_DMA_Init+0x48>)
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <MX_DMA_Init+0x48>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6493      	str	r3, [r2, #72]	; 0x48
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <MX_DMA_Init+0x48>)
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	200c      	movs	r0, #12
 80020a4:	f001 f985 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020a8:	200c      	movs	r0, #12
 80020aa:	f001 f99e 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	200d      	movs	r0, #13
 80020b4:	f001 f97d 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020b8:	200d      	movs	r0, #13
 80020ba:	f001 f996 	bl	80033ea <HAL_NVIC_EnableIRQ>

}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b69      	ldr	r3, [pc, #420]	; (8002288 <MX_GPIO_Init+0x1bc>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a68      	ldr	r2, [pc, #416]	; (8002288 <MX_GPIO_Init+0x1bc>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <MX_GPIO_Init+0x1bc>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020fa:	4b63      	ldr	r3, [pc, #396]	; (8002288 <MX_GPIO_Init+0x1bc>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a62      	ldr	r2, [pc, #392]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b60      	ldr	r3, [pc, #384]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a5c      	ldr	r2, [pc, #368]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b5a      	ldr	r3, [pc, #360]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4b57      	ldr	r3, [pc, #348]	; (8002288 <MX_GPIO_Init+0x1bc>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a56      	ldr	r2, [pc, #344]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b54      	ldr	r3, [pc, #336]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	4b51      	ldr	r3, [pc, #324]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a50      	ldr	r2, [pc, #320]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <MX_GPIO_Init+0x1bc>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FPGA_RESET_Pin|FPGA_PRETRIG_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	484b      	ldr	r0, [pc, #300]	; (800228c <MX_GPIO_Init+0x1c0>)
 8002160:	f001 fe22 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SELECTOR_M0_Pin|SELECTOR_M1_Pin|SELECTOR_M2_Pin|SELECTOR_M3_Pin, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	f240 110d 	movw	r1, #269	; 0x10d
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f001 fe1b 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UI_LED_G_Pin|UI_LED_R_Pin|UI_LED_B_Pin|TRIG_SRC0_Pin
 8002172:	2200      	movs	r2, #0
 8002174:	f240 1127 	movw	r1, #295	; 0x127
 8002178:	4845      	ldr	r0, [pc, #276]	; (8002290 <MX_GPIO_Init+0x1c4>)
 800217a:	f001 fe15 	bl	8003da8 <HAL_GPIO_WritePin>
                          |TRIG_SRC1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 800217e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002184:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	483d      	ldr	r0, [pc, #244]	; (800228c <MX_GPIO_Init+0x1c0>)
 8002196:	f001 fc5d 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_RESET_Pin FPGA_PRETRIG_Pin */
  GPIO_InitStruct.Pin = FPGA_RESET_Pin|FPGA_PRETRIG_Pin;
 800219a:	2305      	movs	r3, #5
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	4836      	ldr	r0, [pc, #216]	; (800228c <MX_GPIO_Init+0x1c0>)
 80021b2:	f001 fc4f 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECTOR_M0_Pin SELECTOR_M1_Pin SELECTOR_M2_Pin SELECTOR_M3_Pin */
  GPIO_InitStruct.Pin = SELECTOR_M0_Pin|SELECTOR_M1_Pin|SELECTOR_M2_Pin|SELECTOR_M3_Pin;
 80021b6:	f240 130d 	movw	r3, #269	; 0x10d
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021bc:	2301      	movs	r3, #1
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f001 fc3f 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_LED_G_Pin UI_LED_R_Pin UI_LED_B_Pin TRIG_SRC0_Pin
                           TRIG_SRC1_Pin */
  GPIO_InitStruct.Pin = UI_LED_G_Pin|UI_LED_R_Pin|UI_LED_B_Pin|TRIG_SRC0_Pin
 80021d6:	f240 1327 	movw	r3, #295	; 0x127
 80021da:	617b      	str	r3, [r7, #20]
                          |TRIG_SRC1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4828      	ldr	r0, [pc, #160]	; (8002290 <MX_GPIO_Init+0x1c4>)
 80021f0:	f001 fc30 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : FPGA_DONE_Pin */
  GPIO_InitStruct.Pin = FPGA_DONE_Pin;
 80021f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021fa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FPGA_DONE_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4821      	ldr	r0, [pc, #132]	; (8002290 <MX_GPIO_Init+0x1c4>)
 800220c:	f001 fc22 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_INT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_INT_Pin;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_INT_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	481a      	ldr	r0, [pc, #104]	; (800228c <MX_GPIO_Init+0x1c0>)
 8002224:	f001 fc16 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_INT_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_INT_Pin;
 8002228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800222e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_INT_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f001 fc07 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_BUTTON_Pin */
  GPIO_InitStruct.Pin = ARM_BUTTON_Pin;
 8002246:	2310      	movs	r3, #16
 8002248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800224a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800224e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002250:	2301      	movs	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARM_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_GPIO_Init+0x1c4>)
 800225c:	f001 fbfa 	bl	8003a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2105      	movs	r1, #5
 8002264:	200a      	movs	r0, #10
 8002266:	f001 f8a4 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800226a:	200a      	movs	r0, #10
 800226c:	f001 f8bd 	bl	80033ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2105      	movs	r1, #5
 8002274:	2028      	movs	r0, #40	; 0x28
 8002276:	f001 f89c 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800227a:	2028      	movs	r0, #40	; 0x28
 800227c:	f001 f8b5 	bl	80033ea <HAL_NVIC_EnableIRQ>

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	48000800 	.word	0x48000800
 8002290:	48000400 	.word	0x48000400

08002294 <HAL_TIM_PeriodElapsedCallback>:
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	if(htim== &htim16){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_GPIO_TogglePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin);
 80022a4:	2104      	movs	r1, #4
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80022a8:	f001 fd96 	bl	8003dd8 <HAL_GPIO_TogglePin>
	}
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000338 	.word	0x20000338
 80022b8:	48000400 	.word	0x48000400

080022bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c0:	b672      	cpsid	i
}
 80022c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <Error_Handler+0x8>
	...

080022c8 <SD_create_file>:
uint8_t rtext_ [_MAX_SS] ;
uint8_t wtext_2 [100] ;
uint8_t test [2] ;
double init_Value [4] ;

void SD_create_file(FIL sd_file, TCHAR* fileName){
 80022c8:	b084      	sub	sp, #16
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	f107 0c08 	add.w	ip, r7, #8
 80022d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	res_sd = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) ;
 80022d6:	2200      	movs	r2, #0
 80022d8:	491a      	ldr	r1, [pc, #104]	; (8002344 <SD_create_file+0x7c>)
 80022da:	481b      	ldr	r0, [pc, #108]	; (8002348 <SD_create_file+0x80>)
 80022dc:	f009 fe42 	bl	800bf64 <f_mount>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <SD_create_file+0x84>)
 80022e6:	701a      	strb	r2, [r3, #0]
	if(res_sd != FR_OK){
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <SD_create_file+0x84>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <SD_create_file+0x30>
		LED_on(RED);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7fe ff73 	bl	80011dc <LED_on>
 80022f6:	e019      	b.n	800232c <SD_create_file+0x64>
	}
	else{
	  //Open file for writing (Create)
	  res_sd = f_open(&sd_file, fileName, (FA_CREATE_ALWAYS | FA_WRITE));
 80022f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80022fc:	f103 0308 	add.w	r3, r3, #8
 8002300:	220a      	movs	r2, #10
 8002302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002304:	f107 0008 	add.w	r0, r7, #8
 8002308:	f009 fe72 	bl	800bff0 <f_open>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <SD_create_file+0x84>)
 8002312:	701a      	strb	r2, [r3, #0]
	  if(res_sd != FR_OK){
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <SD_create_file+0x84>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <SD_create_file+0x5c>
		  LED_on(RED);
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe ff5d 	bl	80011dc <LED_on>
 8002322:	e003      	b.n	800232c <SD_create_file+0x64>
	  }
	  else{
		  //LED_on(BLUE);
		  f_close(&sd_file);
 8002324:	f107 0008 	add.w	r0, r7, #8
 8002328:	f00a fb9f 	bl	800ca6a <f_close>
	  }
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <SD_create_file+0x80>)
 8002332:	f009 fe17 	bl	800bf64 <f_mount>
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800233e:	b004      	add	sp, #16
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20001744 	.word	0x20001744
 8002348:	20001748 	.word	0x20001748
 800234c:	2000070c 	.word	0x2000070c

08002350 <SD_write_data>:

void SD_write_data(FIL sd_file, TCHAR* fileName, uint16_t* data){
 8002350:	b084      	sub	sp, #16
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
 8002356:	f107 0c08 	add.w	ip, r7, #8
 800235a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//sprintf((char*)wtext_, "%d \n",data);
	res_sd = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) ;
 800235e:	2200      	movs	r2, #0
 8002360:	492d      	ldr	r1, [pc, #180]	; (8002418 <SD_write_data+0xc8>)
 8002362:	482e      	ldr	r0, [pc, #184]	; (800241c <SD_write_data+0xcc>)
 8002364:	f009 fdfe 	bl	800bf64 <f_mount>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <SD_write_data+0xd0>)
 800236e:	701a      	strb	r2, [r3, #0]
	if(res_sd != FR_OK){
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <SD_write_data+0xd0>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <SD_write_data+0x30>
		LED_on(RED);
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe ff2f 	bl	80011dc <LED_on>
 800237e:	e03f      	b.n	8002400 <SD_write_data+0xb0>
	}
	else{
	//Open file for writing (Create)
	  res_sd = f_open(&sd_file, fileName, (FA_OPEN_ALWAYS | FA_WRITE));
 8002380:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002384:	f103 0308 	add.w	r3, r3, #8
 8002388:	2212      	movs	r2, #18
 800238a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800238c:	f107 0008 	add.w	r0, r7, #8
 8002390:	f009 fe2e 	bl	800bff0 <f_open>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <SD_write_data+0xd0>)
 800239a:	701a      	strb	r2, [r3, #0]
	  if(res_sd != FR_OK){
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <SD_write_data+0xd0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <SD_write_data+0x5c>
		  LED_on(RED);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7fe ff19 	bl	80011dc <LED_on>
 80023aa:	e029      	b.n	8002400 <SD_write_data+0xb0>
	  }
	  else{
		//Write to the text file
		  if(f_lseek(&sd_file, f_size(&sd_file)) == FR_OK){
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f107 0008 	add.w	r0, r7, #8
 80023b4:	f00a fb83 	bl	800cabe <f_lseek>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d120      	bne.n	8002400 <SD_write_data+0xb0>
			  //res_sd = f_write(&sd_file, wtext_, strlen((char *)wtext_), (void *)&byteswritten_sd);
			  res_sd = f_write(&sd_file, data, (TAB_SIZE), (void *)&byteswritten_sd);
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <SD_write_data+0xd4>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80023c6:	f103 0308 	add.w	r3, r3, #8
 80023ca:	4619      	mov	r1, r3
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <SD_write_data+0xd8>)
 80023ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80023d0:	f107 0008 	add.w	r0, r7, #8
 80023d4:	f00a f937 	bl	800c646 <f_write>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <SD_write_data+0xd0>)
 80023de:	701a      	strb	r2, [r3, #0]
			if((byteswritten_sd == 0) || (res_sd != FR_OK)){
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <SD_write_data+0xd8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <SD_write_data+0xa0>
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <SD_write_data+0xd0>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <SD_write_data+0xa8>
				  LED_on(RED);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fef3 	bl	80011dc <LED_on>
 80023f6:	e003      	b.n	8002400 <SD_write_data+0xb0>
			}
			else{
				//LED_on(BLUE);
				f_close(&sd_file);
 80023f8:	f107 0008 	add.w	r0, r7, #8
 80023fc:	f00a fb35 	bl	800ca6a <f_close>
			}
		  }
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <SD_write_data+0xcc>)
 8002406:	f009 fdad 	bl	800bf64 <f_mount>
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002412:	b004      	add	sp, #16
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20001744 	.word	0x20001744
 800241c:	20001748 	.word	0x20001748
 8002420:	2000070c 	.word	0x2000070c
 8002424:	0800e7b8 	.word	0x0800e7b8
 8002428:	20000710 	.word	0x20000710

0800242c <SD_read_data>:

uint8_t* SD_read_data(FIL sd_file, TCHAR* fileName){
 800242c:	b084      	sub	sp, #16
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
 8002432:	f107 0c08 	add.w	ip, r7, #8
 8002436:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	res_sd = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) ;
 800243a:	2200      	movs	r2, #0
 800243c:	492b      	ldr	r1, [pc, #172]	; (80024ec <SD_read_data+0xc0>)
 800243e:	482c      	ldr	r0, [pc, #176]	; (80024f0 <SD_read_data+0xc4>)
 8002440:	f009 fd90 	bl	800bf64 <f_mount>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <SD_read_data+0xc8>)
 800244a:	701a      	strb	r2, [r3, #0]
		if(res_sd != FR_OK){
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <SD_read_data+0xc8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <SD_read_data+0x30>
			LED_on(RED);
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe fec1 	bl	80011dc <LED_on>
 800245a:	e03a      	b.n	80024d2 <SD_read_data+0xa6>
		}
		else{
		//Open file for writing (Create)
		  res_sd = f_open(&sd_file, "INIT.txt", FA_OPEN_ALWAYS | FA_READ);
 800245c:	2211      	movs	r2, #17
 800245e:	4926      	ldr	r1, [pc, #152]	; (80024f8 <SD_read_data+0xcc>)
 8002460:	f107 0008 	add.w	r0, r7, #8
 8002464:	f009 fdc4 	bl	800bff0 <f_open>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <SD_read_data+0xc8>)
 800246e:	701a      	strb	r2, [r3, #0]
		  if(res_sd != FR_OK){
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <SD_read_data+0xc8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <SD_read_data+0x54>
			  LED_on(RED);
 8002478:	2000      	movs	r0, #0
 800247a:	f7fe feaf 	bl	80011dc <LED_on>
 800247e:	e028      	b.n	80024d2 <SD_read_data+0xa6>
		  }
		  else{
			//Write to the text file
			  if(f_lseek(&sd_file, 0) == FR_OK){
 8002480:	2100      	movs	r1, #0
 8002482:	f107 0008 	add.w	r0, r7, #8
 8002486:	f00a fb1a 	bl	800cabe <f_lseek>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d120      	bne.n	80024d2 <SD_read_data+0xa6>
				  while(bytesread_sd == 0){
 8002490:	e00b      	b.n	80024aa <SD_read_data+0x7e>
					  res_sd = f_read(&sd_file, rtext_, sizeof(rtext_), (UINT *)&bytesread_sd);
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <SD_read_data+0xd0>)
 8002494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002498:	4919      	ldr	r1, [pc, #100]	; (8002500 <SD_read_data+0xd4>)
 800249a:	f107 0008 	add.w	r0, r7, #8
 800249e:	f009 ff73 	bl	800c388 <f_read>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <SD_read_data+0xc8>)
 80024a8:	701a      	strb	r2, [r3, #0]
				  while(bytesread_sd == 0){
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <SD_read_data+0xd0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ef      	beq.n	8002492 <SD_read_data+0x66>
				  }
				  //f_gets(wtext_, sd_file.fptr, &sd_file);
				if((bytesread_sd == 0) || (res_sd != FR_OK)){
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <SD_read_data+0xd0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <SD_read_data+0x96>
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <SD_read_data+0xc8>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <SD_read_data+0x9e>
					  LED_on(RED);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fe8a 	bl	80011dc <LED_on>
 80024c8:	e003      	b.n	80024d2 <SD_read_data+0xa6>
				}
				else{
					//LED_on(BLUE);
					f_close(&sd_file);
 80024ca:	f107 0008 	add.w	r0, r7, #8
 80024ce:	f00a facc 	bl	800ca6a <f_close>
				}
			  }
			}
		}
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <SD_read_data+0xc4>)
 80024d8:	f009 fd44 	bl	800bf64 <f_mount>
		return (uint8_t*)&rtext_;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <SD_read_data+0xd4>)
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024e6:	b004      	add	sp, #16
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20001744 	.word	0x20001744
 80024f0:	20001748 	.word	0x20001748
 80024f4:	2000070c 	.word	0x2000070c
 80024f8:	0800e79c 	.word	0x0800e79c
 80024fc:	20000714 	.word	0x20000714
 8002500:	20000718 	.word	0x20000718
 8002504:	00000000 	.word	0x00000000

08002508 <initValue>:
double* initValue(FIL sd_file, TCHAR* fileName){
 8002508:	b084      	sub	sp, #16
 800250a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800250e:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 8002512:	b081      	sub	sp, #4
 8002514:	f241 0728 	movw	r7, #4136	; 0x1028
 8002518:	446f      	add	r7, sp
 800251a:	f607 0438 	addw	r4, r7, #2104	; 0x838
 800251e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t* data = SD_read_data(sd_file, fileName);
 8002522:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8002526:	f103 0318 	add.w	r3, r3, #24
 800252a:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4668      	mov	r0, sp
 8002534:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8002538:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 800253c:	4619      	mov	r1, r3
 800253e:	f00a fd69 	bl	800d014 <memcpy>
 8002542:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8002546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002548:	f7ff ff70 	bl	800242c <SD_read_data>
 800254c:	f8c7 0804 	str.w	r0, [r7, #2052]	; 0x804
	uint8_t value[_MAX_SS/2];
	uint8_t number = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
	uint8_t number_ = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
	uint8_t pow_ = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
	uint8_t div_ = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	bool fraction = false;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
	for(uint32_t i = 0 ; i<_MAX_SS; i++){
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002574:	e0e2      	b.n	800273c <initValue+0x234>
		if(data[i] >= '0' && data[i] <= '9' ){
 8002576:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800257a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b2f      	cmp	r3, #47	; 0x2f
 8002584:	d921      	bls.n	80025ca <initValue+0xc2>
 8002586:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800258a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b39      	cmp	r3, #57	; 0x39
 8002594:	d819      	bhi.n	80025ca <initValue+0xc2>
			value[number] = data[i]-'0';
 8002596:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800259a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800259e:	4413      	add	r3, r2
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80025a6:	3a30      	subs	r2, #48	; 0x30
 80025a8:	b2d1      	uxtb	r1, r2
 80025aa:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80025ae:	f6a2 0214 	subw	r2, r2, #2068	; 0x814
 80025b2:	54d1      	strb	r1, [r2, r3]
			number++;
 80025b4:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80025b8:	3301      	adds	r3, #1
 80025ba:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
			pow_++;
 80025be:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 80025c2:	3301      	adds	r3, #1
 80025c4:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
 80025c8:	e0b3      	b.n	8002732 <initValue+0x22a>
		}
		else if(data[i] == '.' || data[i] == ','){
 80025ca:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80025ce:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b2e      	cmp	r3, #46	; 0x2e
 80025d8:	d007      	beq.n	80025ea <initValue+0xe2>
 80025da:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80025de:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b2c      	cmp	r3, #44	; 0x2c
 80025e8:	d107      	bne.n	80025fa <initValue+0xf2>
			fraction = true;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
			div_ = pow_;
 80025f0:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 80025f4:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
 80025f8:	e09b      	b.n	8002732 <initValue+0x22a>
		}
		else if(data[i] == '\n' || data[i] == '\0'){
 80025fa:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80025fe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b0a      	cmp	r3, #10
 8002608:	d008      	beq.n	800261c <initValue+0x114>
 800260a:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800260e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 808b 	bne.w	8002732 <initValue+0x22a>
			for(uint8_t j = 0; j<number ; j++){
 800261c:	2300      	movs	r3, #0
 800261e:	f887 380b 	strb.w	r3, [r7, #2059]	; 0x80b
 8002622:	e03d      	b.n	80026a0 <initValue+0x198>
				init_Value[number_] = init_Value[number_] + value[j]*pow(10,number-j-1);
 8002624:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8002628:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <initValue+0x260>)
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002632:	f897 380b 	ldrb.w	r3, [r7, #2059]	; 0x80b
 8002636:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800263a:	f6a2 0214 	subw	r2, r2, #2068	; 0x814
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff77 	bl	8000534 <__aeabi_i2d>
 8002646:	4680      	mov	r8, r0
 8002648:	4689      	mov	r9, r1
 800264a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 800264e:	f897 380b 	ldrb.w	r3, [r7, #2059]	; 0x80b
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff6c 	bl	8000534 <__aeabi_i2d>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	ec43 2b11 	vmov	d1, r2, r3
 8002664:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8002760 <initValue+0x258>
 8002668:	f00b f94a 	bl	800d900 <pow>
 800266c:	ec53 2b10 	vmov	r2, r3, d0
 8002670:	4640      	mov	r0, r8
 8002672:	4649      	mov	r1, r9
 8002674:	f7fd ffc8 	bl	8000608 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	f897 6816 	ldrb.w	r6, [r7, #2070]	; 0x816
 8002680:	4620      	mov	r0, r4
 8002682:	4629      	mov	r1, r5
 8002684:	f7fd fe0a 	bl	800029c <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4836      	ldr	r0, [pc, #216]	; (8002768 <initValue+0x260>)
 800268e:	00f1      	lsls	r1, r6, #3
 8002690:	4401      	add	r1, r0
 8002692:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t j = 0; j<number ; j++){
 8002696:	f897 380b 	ldrb.w	r3, [r7, #2059]	; 0x80b
 800269a:	3301      	adds	r3, #1
 800269c:	f887 380b 	strb.w	r3, [r7, #2059]	; 0x80b
 80026a0:	f897 280b 	ldrb.w	r2, [r7, #2059]	; 0x80b
 80026a4:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3bb      	bcc.n	8002624 <initValue+0x11c>
			}
			if(fraction){
 80026ac:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d028      	beq.n	8002706 <initValue+0x1fe>
				fraction = false;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				init_Value[number_] = init_Value[number_]/(pow(10,number-div_));
 80026ba:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80026be:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <initValue+0x260>)
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026c8:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 80026cc:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff2e 	bl	8000534 <__aeabi_i2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	ec43 2b11 	vmov	d1, r2, r3
 80026e0:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8002760 <initValue+0x258>
 80026e4:	f00b f90c 	bl	800d900 <pow>
 80026e8:	ec53 2b10 	vmov	r2, r3, d0
 80026ec:	f897 6816 	ldrb.w	r6, [r7, #2070]	; 0x816
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fe f8b2 	bl	800085c <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	481a      	ldr	r0, [pc, #104]	; (8002768 <initValue+0x260>)
 80026fe:	00f1      	lsls	r1, r6, #3
 8002700:	4401      	add	r1, r0
 8002702:	e9c1 2300 	strd	r2, r3, [r1]
			}
			pow_ = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
			div_ = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
			number = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
			number_++;
 8002718:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800271c:	3301      	adds	r3, #1
 800271e:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
			if(data[i] == '\0'){
 8002722:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8002726:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <initValue+0x242>
	for(uint32_t i = 0 ; i<_MAX_SS; i++){
 8002732:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002736:	3301      	adds	r3, #1
 8002738:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800273c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002744:	f4ff af17 	bcc.w	8002576 <initValue+0x6e>
 8002748:	e000      	b.n	800274c <initValue+0x244>
				break;
 800274a:	bf00      	nop
			}
		}
	}
	return (double*)&init_Value;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <initValue+0x260>)
}
 800274e:	4618      	mov	r0, r3
 8002750:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800275a:	b004      	add	sp, #16
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	00000000 	.word	0x00000000
 8002764:	40240000 	.word	0x40240000
 8002768:	20001718 	.word	0x20001718

0800276c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_MspInit+0x44>)
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_MspInit+0x44>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6613      	str	r3, [r2, #96]	; 0x60
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_MspInit+0x44>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_MspInit+0x44>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_MspInit+0x44>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_MspInit+0x44>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_DAC_MspInit+0x74>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d124      	bne.n	8002820 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_DAC_MspInit+0x78>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_DAC_MspInit+0x78>)
 80027dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_DAC_MspInit+0x78>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_DAC_MspInit+0x78>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_DAC_MspInit+0x78>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_DAC_MspInit+0x78>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002806:	2330      	movs	r3, #48	; 0x30
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280a:	2303      	movs	r3, #3
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281c:	f001 f91a 	bl	8003a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40007400 	.word	0x40007400
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0ae      	sub	sp, #184	; 0xb8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	f107 0318 	add.w	r3, r7, #24
 800284c:	228c      	movs	r2, #140	; 0x8c
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f00a fbed 	bl	800d030 <memset>
  if(hi2c->Instance==I2C1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_I2C_MspInit+0x134>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d13c      	bne.n	80028da <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002860:	2340      	movs	r3, #64	; 0x40
 8002862:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002864:	2300      	movs	r3, #0
 8002866:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fb1f 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002878:	f7ff fd20 	bl	80022bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_I2C_MspInit+0x138>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	4a39      	ldr	r2, [pc, #228]	; (8002968 <HAL_I2C_MspInit+0x138>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_I2C_MspInit+0x138>)
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002894:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289c:	2312      	movs	r3, #18
 800289e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ae:	2304      	movs	r3, #4
 80028b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028b8:	4619      	mov	r1, r3
 80028ba:	482c      	ldr	r0, [pc, #176]	; (800296c <HAL_I2C_MspInit+0x13c>)
 80028bc:	f001 f8ca 	bl	8003a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c0:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_I2C_MspInit+0x138>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_I2C_MspInit+0x138>)
 80028c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_I2C_MspInit+0x138>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028d8:	e040      	b.n	800295c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_I2C_MspInit+0x140>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d13b      	bne.n	800295c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fadd 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80028fc:	f7ff fcde 	bl	80022bc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_I2C_MspInit+0x138>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_I2C_MspInit+0x138>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_I2C_MspInit+0x138>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002918:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800291c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002920:	2312      	movs	r3, #18
 8002922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002932:	2304      	movs	r3, #4
 8002934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800293c:	4619      	mov	r1, r3
 800293e:	480b      	ldr	r0, [pc, #44]	; (800296c <HAL_I2C_MspInit+0x13c>)
 8002940:	f001 f888 	bl	8003a54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_I2C_MspInit+0x138>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_I2C_MspInit+0x138>)
 800294a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_I2C_MspInit+0x138>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
}
 800295c:	bf00      	nop
 800295e:	37b8      	adds	r7, #184	; 0xb8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40005400 	.word	0x40005400
 8002968:	40021000 	.word	0x40021000
 800296c:	48000400 	.word	0x48000400
 8002970:	40005800 	.word	0x40005800

08002974 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0ae      	sub	sp, #184	; 0xb8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	228c      	movs	r2, #140	; 0x8c
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f00a fb4b 	bl	800d030 <memset>
  if(hsd->Instance==SDMMC1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_SD_MspInit+0xf8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d15e      	bne.n	8002a62 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80029a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fa7b 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80029c0:	f7ff fc7c 	bl	80022bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80029c4:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ce:	6613      	str	r3, [r2, #96]	; 0x60
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 80029fa:	f043 0308 	orr.w	r3, r3, #8
 80029fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_SD_MspInit+0xfc>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002a0c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002a26:	230c      	movs	r3, #12
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_SD_MspInit+0x100>)
 8002a34:	f001 f80e 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002a50:	230c      	movs	r3, #12
 8002a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4806      	ldr	r0, [pc, #24]	; (8002a78 <HAL_SD_MspInit+0x104>)
 8002a5e:	f000 fff9 	bl	8003a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	37b8      	adds	r7, #184	; 0xb8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40012800 	.word	0x40012800
 8002a70:	40021000 	.word	0x40021000
 8002a74:	48000800 	.word	0x48000800
 8002a78:	48000c00 	.word	0x48000c00

08002a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6f      	ldr	r2, [pc, #444]	; (8002c58 <HAL_SPI_MspInit+0x1dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f040 808d 	bne.w	8002bba <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aa0:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	4a6d      	ldr	r2, [pc, #436]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aaa:	6613      	str	r3, [r2, #96]	; 0x60
 8002aac:	4b6b      	ldr	r3, [pc, #428]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	4a67      	ldr	r2, [pc, #412]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac4:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STM_FPGA_SCK_Pin|STM_FPGA_MOSI_Pin;
 8002ad0:	2382      	movs	r3, #130	; 0x82
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aee:	f000 ffb1 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_FPGA_MISO_Pin;
 8002af2:	2340      	movs	r3, #64	; 0x40
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002afe:	2301      	movs	r3, #1
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b02:	2305      	movs	r3, #5
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STM_FPGA_MISO_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b10:	f000 ffa0 	bl	8003a54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002b14:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b16:	4a53      	ldr	r2, [pc, #332]	; (8002c64 <HAL_SPI_MspInit+0x1e8>)
 8002b18:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b4a:	4845      	ldr	r0, [pc, #276]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b4c:	f000 fe1a 	bl	8003784 <HAL_DMA_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002b56:	f7ff fbb1 	bl	80022bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b60:	4a3f      	ldr	r2, [pc, #252]	; (8002c60 <HAL_SPI_MspInit+0x1e4>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b68:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_SPI_MspInit+0x1f0>)
 8002b6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b74:	2210      	movs	r2, #16
 8002b76:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b9c:	4832      	ldr	r0, [pc, #200]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002b9e:	f000 fdf1 	bl	8003784 <HAL_DMA_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002ba8:	f7ff fb88 	bl	80022bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <HAL_SPI_MspInit+0x1ec>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bb8:	e049      	b.n	8002c4e <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_SPI_MspInit+0x1f4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d144      	bne.n	8002c4e <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	4a24      	ldr	r2, [pc, #144]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bce:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_SPI_MspInit+0x1e0>)
 8002c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STM_UI_MOSI_Pin;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STM_UI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4619      	mov	r1, r3
 8002c26:	4813      	ldr	r0, [pc, #76]	; (8002c74 <HAL_SPI_MspInit+0x1f8>)
 8002c28:	f000 ff14 	bl	8003a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STM_UI_SCK_Pin;
 8002c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c3e:	2305      	movs	r3, #5
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STM_UI_SCK_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	480b      	ldr	r0, [pc, #44]	; (8002c78 <HAL_SPI_MspInit+0x1fc>)
 8002c4a:	f000 ff03 	bl	8003a54 <HAL_GPIO_Init>
}
 8002c4e:	bf00      	nop
 8002c50:	3730      	adds	r7, #48	; 0x30
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40013000 	.word	0x40013000
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	200002a8 	.word	0x200002a8
 8002c64:	4002001c 	.word	0x4002001c
 8002c68:	200002f0 	.word	0x200002f0
 8002c6c:	40020030 	.word	0x40020030
 8002c70:	40003800 	.word	0x40003800
 8002c74:	48000800 	.word	0x48000800
 8002c78:	48000400 	.word	0x48000400

08002c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <HAL_TIM_Base_MspInit+0x44>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d113      	bne.n	8002cb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_TIM_Base_MspInit+0x48>)
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <HAL_TIM_Base_MspInit+0x48>)
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	6613      	str	r3, [r2, #96]	; 0x60
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_TIM_Base_MspInit+0x48>)
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2019      	movs	r0, #25
 8002cac:	f000 fb81 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002cb0:	2019      	movs	r0, #25
 8002cb2:	f000 fb9a 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40014400 	.word	0x40014400
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b0ae      	sub	sp, #184	; 0xb8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	228c      	movs	r2, #140	; 0x8c
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f00a f9a1 	bl	800d030 <memset>
  if(huart->Instance==USART1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_UART_MspInit+0xf4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d15d      	bne.n	8002db4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 f8d3 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d10:	f7ff fad4 	bl	80022bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d76:	2307      	movs	r3, #7
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d80:	4619      	mov	r1, r3
 8002d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d86:	f000 fe65 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002da2:	2307      	movs	r3, #7
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <HAL_UART_MspInit+0xfc>)
 8002db0:	f000 fe50 	bl	8003a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002db4:	bf00      	nop
 8002db6:	37b8      	adds	r7, #184	; 0xb8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	48000400 	.word	0x48000400

08002dc8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0ae      	sub	sp, #184	; 0xb8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de0:	f107 0318 	add.w	r3, r7, #24
 8002de4:	228c      	movs	r2, #140	; 0x8c
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f00a f921 	bl	800d030 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df6:	d15b      	bne.n	8002eb0 <HAL_HCD_MspInit+0xe8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e04:	f107 0318 	add.w	r3, r7, #24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 f851 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8002e14:	f7ff fa52 	bl	80022bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5a:	f000 fdfb 	bl	8003a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d114      	bne.n	8002eac <HAL_HCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002e9a:	f001 f9bb 	bl	8004214 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <HAL_HCD_MspInit+0xf0>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002eaa:	e001      	b.n	8002eb0 <HAL_HCD_MspInit+0xe8>
      HAL_PWREx_EnableVddUSB();
 8002eac:	f001 f9b2 	bl	8004214 <HAL_PWREx_EnableVddUSB>
}
 8002eb0:	bf00      	nop
 8002eb2:	37b8      	adds	r7, #184	; 0xb8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 f8fe 	bl	8003108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_BUTTON_Pin);
 8002f14:	2010      	movs	r0, #16
 8002f16:	f000 ff79 	bl	8003e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <DMA1_Channel2_IRQHandler+0x10>)
 8002f26:	f000 fce5 	bl	80038f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200002a8 	.word	0x200002a8

08002f34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <DMA1_Channel3_IRQHandler+0x10>)
 8002f3a:	f000 fcdb 	bl	80038f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200002f0 	.word	0x200002f0

08002f48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002f4e:	f005 fadf 	bl	8008510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000338 	.word	0x20000338

08002f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_VBUS_INT_Pin);
 8002f60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f64:	f000 ff52 	bl	8003e0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(WAKE_UP_Pin);
 8002f68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f6c:	f000 ff4e 	bl	8003e0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FPGA_DONE_Pin);
 8002f70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f74:	f000 ff4a 	bl	8003e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <_sbrk+0x5c>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <_sbrk+0x60>)
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_sbrk+0x64>)
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <_sbrk+0x68>)
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fac:	f00a f808 	bl	800cfc0 <__errno>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e009      	b.n	8002fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <_sbrk+0x64>)
 8002fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20050000 	.word	0x20050000
 8002fdc:	00001000 	.word	0x00001000
 8002fe0:	20001738 	.word	0x20001738
 8002fe4:	200037f0 	.word	0x200037f0

08002fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <SystemInit+0x20>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <SystemInit+0x20>)
 8002ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800300c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003010:	f7ff ffea 	bl	8002fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003014:	480c      	ldr	r0, [pc, #48]	; (8003048 <LoopForever+0x6>)
  ldr r1, =_edata
 8003016:	490d      	ldr	r1, [pc, #52]	; (800304c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003018:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <LoopForever+0xe>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <LoopForever+0x16>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800303a:	f009 ffc7 	bl	800cfcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800303e:	f7fe f973 	bl	8001328 <main>

08003042 <LoopForever>:

LoopForever:
    b LoopForever
 8003042:	e7fe      	b.n	8003042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003044:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800304c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003050:	0800e910 	.word	0x0800e910
  ldr r2, =_sbss
 8003054:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003058:	200037f0 	.word	0x200037f0

0800305c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800305c:	e7fe      	b.n	800305c <ADC1_2_IRQHandler>

0800305e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 f997 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800306e:	200f      	movs	r0, #15
 8003070:	f000 f80e 	bl	8003090 <HAL_InitTick>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	71fb      	strb	r3, [r7, #7]
 800307e:	e001      	b.n	8003084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003080:	f7ff fb74 	bl	800276c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003084:	79fb      	ldrb	r3, [r7, #7]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_InitTick+0x6c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <HAL_InitTick+0x70>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_InitTick+0x6c>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f9a7 	bl	800340e <HAL_SYSTICK_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10f      	bne.n	80030e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d809      	bhi.n	80030e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030cc:	2200      	movs	r2, #0
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f000 f96d 	bl	80033b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_InitTick+0x74>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e007      	b.n	80030f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e004      	b.n	80030f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e001      	b.n	80030f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000010 	.word	0x20000010
 8003100:	20000008 	.word	0x20000008
 8003104:	2000000c 	.word	0x2000000c

08003108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_IncTick+0x20>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x24>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_IncTick+0x24>)
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000010 	.word	0x20000010
 800312c:	2000173c 	.word	0x2000173c

08003130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return uwTick;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_GetTick+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	2000173c 	.word	0x2000173c

08003148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff ffee 	bl	8003130 <HAL_GetTick>
 8003154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d005      	beq.n	800316e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_Delay+0x44>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800316e:	bf00      	nop
 8003170:	f7ff ffde 	bl	8003130 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	429a      	cmp	r2, r3
 800317e:	d8f7      	bhi.n	8003170 <HAL_Delay+0x28>
  {
  }
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000010 	.word	0x20000010

08003190 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_SuspendTick+0x1c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_SuspendTick+0x1c>)
 800319a:	f023 0302 	bic.w	r3, r3, #2
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_ResumeTick+0x1c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_ResumeTick+0x1c>)
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e010 	.word	0xe000e010

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	60d3      	str	r3, [r2, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	; (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003330:	f3bf 8f4f 	dsb	sy
}
 8003334:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <__NVIC_SystemReset+0x24>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800333e:	4904      	ldr	r1, [pc, #16]	; (8003350 <__NVIC_SystemReset+0x24>)
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_SystemReset+0x28>)
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003346:	f3bf 8f4f 	dsb	sy
}
 800334a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <__NVIC_SystemReset+0x20>
 8003350:	e000ed00 	.word	0xe000ed00
 8003354:	05fa0004 	.word	0x05fa0004

08003358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003368:	d301      	bcc.n	800336e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2301      	movs	r3, #1
 800336c:	e00f      	b.n	800338e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <SysTick_Config+0x40>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003376:	210f      	movs	r1, #15
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	f7ff ff78 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <SysTick_Config+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <SysTick_Config+0x40>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff13 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033c4:	f7ff ff28 	bl	8003218 <__NVIC_GetPriorityGrouping>
 80033c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f7ff ff78 	bl	80032c4 <NVIC_EncodePriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff47 	bl	8003270 <__NVIC_SetPriority>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff1b 	bl	8003234 <__NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800340a:	f7ff ff8f 	bl	800332c <__NVIC_SystemReset>

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff9e 	bl	8003358 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e014      	b.n	8003462 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff f9b3 	bl	80027b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	795b      	ldrb	r3, [r3, #5]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_DAC_Start+0x16>
 800347c:	2302      	movs	r3, #2
 800347e:	e03b      	b.n	80034f8 <HAL_DAC_Start+0x8e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d118      	bne.n	80034ea <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	e00f      	b.n	80034ea <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d8:	d107      	bne.n	80034ea <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0202 	orr.w	r2, r2, #2
 80034e8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3308      	adds	r3, #8
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e004      	b.n	8003538 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	3314      	adds	r3, #20
 8003536:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	461a      	mov	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	795b      	ldrb	r3, [r3, #5]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_DAC_ConfigChannel+0x1c>
 8003566:	2302      	movs	r3, #2
 8003568:	e107      	b.n	800377a <HAL_DAC_ConfigChannel+0x22c>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2202      	movs	r2, #2
 8003574:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b04      	cmp	r3, #4
 800357c:	d174      	bne.n	8003668 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800357e:	f7ff fdd7 	bl	8003130 <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d134      	bne.n	80035f4 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800358a:	e011      	b.n	80035b0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800358c:	f7ff fdd0 	bl	8003130 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d90a      	bls.n	80035b0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f043 0208 	orr.w	r2, r3, #8
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2203      	movs	r2, #3
 80035aa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0e4      	b.n	800377a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e6      	bne.n	800358c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80035be:	2001      	movs	r0, #1
 80035c0:	f7ff fdc2 	bl	8003148 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	6992      	ldr	r2, [r2, #24]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
 80035ce:	e01e      	b.n	800360e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035d0:	f7ff fdae 	bl	8003130 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d90a      	bls.n	80035f4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2203      	movs	r2, #3
 80035ee:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0c2      	b.n	800377a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dbe8      	blt.n	80035d0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7ff fda2 	bl	8003148 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	6992      	ldr	r2, [r2, #24]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	ea02 0103 	and.w	r1, r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	21ff      	movs	r1, #255	; 0xff
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	ea02 0103 	and.w	r1, r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d11d      	bne.n	80036ac <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	221f      	movs	r2, #31
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2207      	movs	r2, #7
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43da      	mvns	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	400a      	ands	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	22c0      	movs	r2, #192	; 0xc0
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	400a      	ands	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e098      	b.n	80038c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <HAL_DMA_Init+0x150>)
 800379e:	429a      	cmp	r2, r3
 80037a0:	d80f      	bhi.n	80037c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_DMA_Init+0x154>)
 80037aa:	4413      	add	r3, r2
 80037ac:	4a4b      	ldr	r2, [pc, #300]	; (80038dc <HAL_DMA_Init+0x158>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	009a      	lsls	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_DMA_Init+0x15c>)
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
 80037c0:	e00e      	b.n	80037e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_DMA_Init+0x160>)
 80037ca:	4413      	add	r3, r2
 80037cc:	4a43      	ldr	r2, [pc, #268]	; (80038dc <HAL_DMA_Init+0x158>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a42      	ldr	r2, [pc, #264]	; (80038e8 <HAL_DMA_Init+0x164>)
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383a:	d039      	beq.n	80038b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_DMA_Init+0x15c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d11a      	bne.n	800387c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003846:	4b29      	ldr	r3, [pc, #164]	; (80038ec <HAL_DMA_Init+0x168>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f003 031c 	and.w	r3, r3, #28
 8003852:	210f      	movs	r1, #15
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	4924      	ldr	r1, [pc, #144]	; (80038ec <HAL_DMA_Init+0x168>)
 800385c:	4013      	ands	r3, r2
 800385e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_DMA_Init+0x168>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f003 031c 	and.w	r3, r3, #28
 8003870:	fa01 f303 	lsl.w	r3, r1, r3
 8003874:	491d      	ldr	r1, [pc, #116]	; (80038ec <HAL_DMA_Init+0x168>)
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
 800387a:	e019      	b.n	80038b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <HAL_DMA_Init+0x16c>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 031c 	and.w	r3, r3, #28
 8003888:	210f      	movs	r1, #15
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_DMA_Init+0x16c>)
 8003892:	4013      	ands	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_DMA_Init+0x16c>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f003 031c 	and.w	r3, r3, #28
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	4911      	ldr	r1, [pc, #68]	; (80038f0 <HAL_DMA_Init+0x16c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40020407 	.word	0x40020407
 80038d8:	bffdfff8 	.word	0xbffdfff8
 80038dc:	cccccccd 	.word	0xcccccccd
 80038e0:	40020000 	.word	0x40020000
 80038e4:	bffdfbf8 	.word	0xbffdfbf8
 80038e8:	40020400 	.word	0x40020400
 80038ec:	400200a8 	.word	0x400200a8
 80038f0:	400204a8 	.word	0x400204a8

080038f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 031c 	and.w	r3, r3, #28
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d026      	beq.n	800396e <HAL_DMA_IRQHandler+0x7a>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d021      	beq.n	800396e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f003 021c 	and.w	r2, r3, #28
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2104      	movs	r1, #4
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	2b00      	cmp	r3, #0
 8003962:	d071      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800396c:	e06c      	b.n	8003a48 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f003 031c 	and.w	r3, r3, #28
 8003976:	2202      	movs	r2, #2
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02e      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xec>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d029      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 020a 	bic.w	r2, r2, #10
 80039a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 021c 	and.w	r2, r3, #28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2102      	movs	r1, #2
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d038      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039de:	e033      	b.n	8003a48 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f003 031c 	and.w	r3, r3, #28
 80039e8:	2208      	movs	r2, #8
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02a      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x156>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d025      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 020e 	bic.w	r2, r2, #14
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 021c 	and.w	r2, r3, #28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
}
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a62:	e166      	b.n	8003d32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	4013      	ands	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8158 	beq.w	8003d2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d005      	beq.n	8003a94 <HAL_GPIO_Init+0x40>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d130      	bne.n	8003af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aca:	2201      	movs	r2, #1
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0201 	and.w	r2, r3, #1
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d017      	beq.n	8003b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d123      	bne.n	8003b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	08da      	lsrs	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3208      	adds	r2, #8
 8003b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	220f      	movs	r2, #15
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	08da      	lsrs	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	6939      	ldr	r1, [r7, #16]
 8003b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0203 	and.w	r2, r3, #3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80b2 	beq.w	8003d2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc8:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <HAL_GPIO_Init+0x2fc>)
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	4a60      	ldr	r2, [pc, #384]	; (8003d50 <HAL_GPIO_Init+0x2fc>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6613      	str	r3, [r2, #96]	; 0x60
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_GPIO_Init+0x2fc>)
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003be0:	4a5c      	ldr	r2, [pc, #368]	; (8003d54 <HAL_GPIO_Init+0x300>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	3302      	adds	r3, #2
 8003be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c0a:	d02b      	beq.n	8003c64 <HAL_GPIO_Init+0x210>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_GPIO_Init+0x304>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d025      	beq.n	8003c60 <HAL_GPIO_Init+0x20c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a51      	ldr	r2, [pc, #324]	; (8003d5c <HAL_GPIO_Init+0x308>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01f      	beq.n	8003c5c <HAL_GPIO_Init+0x208>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a50      	ldr	r2, [pc, #320]	; (8003d60 <HAL_GPIO_Init+0x30c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d019      	beq.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_GPIO_Init+0x310>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_GPIO_Init+0x200>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a4e      	ldr	r2, [pc, #312]	; (8003d68 <HAL_GPIO_Init+0x314>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00d      	beq.n	8003c50 <HAL_GPIO_Init+0x1fc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a4d      	ldr	r2, [pc, #308]	; (8003d6c <HAL_GPIO_Init+0x318>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <HAL_GPIO_Init+0x1f8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <HAL_GPIO_Init+0x31c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_GPIO_Init+0x1f4>
 8003c44:	2307      	movs	r3, #7
 8003c46:	e00e      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c48:	2308      	movs	r3, #8
 8003c4a:	e00c      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c4c:	2306      	movs	r3, #6
 8003c4e:	e00a      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c50:	2305      	movs	r3, #5
 8003c52:	e008      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c54:	2304      	movs	r3, #4
 8003c56:	e006      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e004      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e002      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_GPIO_Init+0x212>
 8003c64:	2300      	movs	r3, #0
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	f002 0203 	and.w	r2, r2, #3
 8003c6c:	0092      	lsls	r2, r2, #2
 8003c6e:	4093      	lsls	r3, r2
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c76:	4937      	ldr	r1, [pc, #220]	; (8003d54 <HAL_GPIO_Init+0x300>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ca8:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cd2:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_GPIO_Init+0x320>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f ae91 	bne.w	8003a64 <HAL_GPIO_Init+0x10>
  }
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40010000 	.word	0x40010000
 8003d58:	48000400 	.word	0x48000400
 8003d5c:	48000800 	.word	0x48000800
 8003d60:	48000c00 	.word	0x48000c00
 8003d64:	48001000 	.word	0x48001000
 8003d68:	48001400 	.word	0x48001400
 8003d6c:	48001800 	.word	0x48001800
 8003d70:	48001c00 	.word	0x48001c00
 8003d74:	40010400 	.word	0x40010400

08003d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e001      	b.n	8003d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
 8003db4:	4613      	mov	r3, r2
 8003db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db8:	787b      	ldrb	r3, [r7, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dc4:	e002      	b.n	8003dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43d9      	mvns	r1, r3
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	400b      	ands	r3, r1
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	619a      	str	r2, [r3, #24]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e22:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd fa42 	bl	80012b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40010400 	.word	0x40010400

08003e3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b08f      	sub	sp, #60	; 0x3c
 8003e40:	af0a      	add	r7, sp, #40	; 0x28
 8003e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e054      	b.n	8003ef8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7fe ffad 	bl	8002dc8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2203      	movs	r2, #3
 8003e72:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f005 ff55 	bl	8009d3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	687e      	ldr	r6, [r7, #4]
 8003e9a:	466d      	mov	r5, sp
 8003e9c:	f106 0410 	add.w	r4, r6, #16
 8003ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eb0:	1d33      	adds	r3, r6, #4
 8003eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb4:	6838      	ldr	r0, [r7, #0]
 8003eb6:	f005 ff15 	bl	8009ce4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f005 ff4c 	bl	8009d5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	687e      	ldr	r6, [r7, #4]
 8003ece:	466d      	mov	r5, sp
 8003ed0:	f106 0410 	add.w	r4, r6, #16
 8003ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003edc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ee4:	1d33      	adds	r3, r6, #4
 8003ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee8:	6838      	ldr	r0, [r7, #0]
 8003eea:	f006 f82b 	bl	8009f44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e081      	b.n	8004016 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe fc82 	bl	8002830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e006      	b.n	8003f88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d104      	bne.n	8003f9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69d9      	ldr	r1, [r3, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	d138      	bne.n	80040a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800403e:	2302      	movs	r3, #2
 8004040:	e032      	b.n	80040a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2224      	movs	r2, #36	; 0x24
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004070:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d139      	bne.n	800413e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e033      	b.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004106:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_PWREx_GetVoltageRange+0x18>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40007000 	.word	0x40007000

08004168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004176:	d130      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004184:	d038      	beq.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800418e:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004194:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2232      	movs	r2, #50	; 0x32
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0c9b      	lsrs	r3, r3, #18
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ac:	e002      	b.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d102      	bne.n	80041c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f2      	bne.n	80041ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d4:	d110      	bne.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e00f      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d007      	beq.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041f0:	4a05      	ldr	r2, [pc, #20]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40007000 	.word	0x40007000
 800420c:	20000008 	.word	0x20000008
 8004210:	431bde83 	.word	0x431bde83

08004214 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_PWREx_EnableVddUSB+0x1c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_PWREx_EnableVddUSB+0x1c>)
 800421e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004222:	6053      	str	r3, [r2, #4]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f000 bc08 	b.w	8004a58 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004248:	4b96      	ldr	r3, [pc, #600]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004252:	4b94      	ldr	r3, [pc, #592]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80e4 	beq.w	8004432 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_RCC_OscConfig+0x4c>
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	f040 808b 	bne.w	800438e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	f040 8087 	bne.w	800438e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004280:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_OscConfig+0x64>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e3df      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	4b81      	ldr	r3, [pc, #516]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCC_OscConfig+0x7e>
 80042a8:	4b7e      	ldr	r3, [pc, #504]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	e005      	b.n	80042be <HAL_RCC_OscConfig+0x8a>
 80042b2:	4b7c      	ldr	r3, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042be:	4293      	cmp	r3, r2
 80042c0:	d223      	bcs.n	800430a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fd92 	bl	8004df0 <RCC_SetFlashLatencyFromMSIRange>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e3c0      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d6:	4b73      	ldr	r3, [pc, #460]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a72      	ldr	r2, [pc, #456]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b70      	ldr	r3, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	496d      	ldr	r1, [pc, #436]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f4:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	4968      	ldr	r1, [pc, #416]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
 8004308:	e025      	b.n	8004356 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800430a:	4b66      	ldr	r3, [pc, #408]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a65      	ldr	r2, [pc, #404]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004310:	f043 0308 	orr.w	r3, r3, #8
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b63      	ldr	r3, [pc, #396]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4960      	ldr	r1, [pc, #384]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004328:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	495b      	ldr	r1, [pc, #364]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fd52 	bl	8004df0 <RCC_SetFlashLatencyFromMSIRange>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e380      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004356:	f000 fc87 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 800435a:	4602      	mov	r2, r0
 800435c:	4b51      	ldr	r3, [pc, #324]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	4950      	ldr	r1, [pc, #320]	; (80044a8 <HAL_RCC_OscConfig+0x274>)
 8004368:	5ccb      	ldrb	r3, [r1, r3]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	4a4e      	ldr	r2, [pc, #312]	; (80044ac <HAL_RCC_OscConfig+0x278>)
 8004374:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004376:	4b4e      	ldr	r3, [pc, #312]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fe88 	bl	8003090 <HAL_InitTick>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d052      	beq.n	8004430 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	e364      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d032      	beq.n	80043fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004396:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a42      	ldr	r2, [pc, #264]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043a2:	f7fe fec5 	bl	8003130 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043aa:	f7fe fec1 	bl	8003130 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e34d      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043bc:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c8:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a35      	ldr	r2, [pc, #212]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043ce:	f043 0308 	orr.w	r3, r3, #8
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b33      	ldr	r3, [pc, #204]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4930      	ldr	r1, [pc, #192]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e6:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	492b      	ldr	r1, [pc, #172]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 80043fa:	e01a      	b.n	8004432 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043fc:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a28      	ldr	r2, [pc, #160]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004408:	f7fe fe92 	bl	8003130 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004410:	f7fe fe8e 	bl	8003130 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e31a      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1dc>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d073      	beq.n	8004526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d005      	beq.n	8004450 <HAL_RCC_OscConfig+0x21c>
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d10e      	bne.n	8004468 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d063      	beq.n	8004524 <HAL_RCC_OscConfig+0x2f0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d15f      	bne.n	8004524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e2f7      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x24c>
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e025      	b.n	80044cc <HAL_RCC_OscConfig+0x298>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004488:	d114      	bne.n	80044b4 <HAL_RCC_OscConfig+0x280>
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a02      	ldr	r2, [pc, #8]	; (80044a4 <HAL_RCC_OscConfig+0x270>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e013      	b.n	80044cc <HAL_RCC_OscConfig+0x298>
 80044a4:	40021000 	.word	0x40021000
 80044a8:	0800e7bc 	.word	0x0800e7bc
 80044ac:	20000008 	.word	0x20000008
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	4ba0      	ldr	r3, [pc, #640]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a9f      	ldr	r2, [pc, #636]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b9d      	ldr	r3, [pc, #628]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a9c      	ldr	r2, [pc, #624]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe fe2c 	bl	8003130 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fe fe28 	bl	8003130 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e2b4      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ee:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x2a8>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fe18 	bl	8003130 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe fe14 	bl	8003130 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e2a0      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004516:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x2d0>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d060      	beq.n	80045f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d005      	beq.n	8004544 <HAL_RCC_OscConfig+0x310>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d119      	bne.n	8004572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d116      	bne.n	8004572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	4b7c      	ldr	r3, [pc, #496]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_OscConfig+0x328>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e27d      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	4973      	ldr	r1, [pc, #460]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004570:	e040      	b.n	80045f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d023      	beq.n	80045c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800457a:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fe fdd3 	bl	8003130 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458e:	f7fe fdcf 	bl	8003130 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e25b      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a0:	4b65      	ldr	r3, [pc, #404]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	495f      	ldr	r1, [pc, #380]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
 80045c0:	e018      	b.n	80045f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c2:	4b5d      	ldr	r3, [pc, #372]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5c      	ldr	r2, [pc, #368]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80045c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fe fdaf 	bl	8003130 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d6:	f7fe fdab 	bl	8003130 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e237      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e8:	4b53      	ldr	r3, [pc, #332]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d03c      	beq.n	800467a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01c      	beq.n	8004642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460e:	4a4a      	ldr	r2, [pc, #296]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fe fd8a 	bl	8003130 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004620:	f7fe fd86 	bl	8003130 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e212      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <HAL_RCC_OscConfig+0x3ec>
 8004640:	e01b      	b.n	800467a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004648:	4a3b      	ldr	r2, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fe fd6d 	bl	8003130 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465a:	f7fe fd69 	bl	8003130 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e1f5      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1ef      	bne.n	800465a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80a6 	beq.w	80047d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004688:	2300      	movs	r3, #0
 800468a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10d      	bne.n	80046b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	6593      	str	r3, [r2, #88]	; 0x58
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b0:	2301      	movs	r3, #1
 80046b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_RCC_OscConfig+0x508>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d118      	bne.n	80046f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c0:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_OscConfig+0x508>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1d      	ldr	r2, [pc, #116]	; (800473c <HAL_RCC_OscConfig+0x508>)
 80046c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046cc:	f7fe fd30 	bl	8003130 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d4:	f7fe fd2c 	bl	8003130 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e1b8      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_RCC_OscConfig+0x508>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d108      	bne.n	800470c <HAL_RCC_OscConfig+0x4d8>
 80046fa:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800470a:	e029      	b.n	8004760 <HAL_RCC_OscConfig+0x52c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d115      	bne.n	8004740 <HAL_RCC_OscConfig+0x50c>
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	4a07      	ldr	r2, [pc, #28]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	4a03      	ldr	r2, [pc, #12]	; (8004738 <HAL_RCC_OscConfig+0x504>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004734:	e014      	b.n	8004760 <HAL_RCC_OscConfig+0x52c>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
 8004740:	4b9d      	ldr	r3, [pc, #628]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a9c      	ldr	r2, [pc, #624]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004750:	4b99      	ldr	r3, [pc, #612]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	4a98      	ldr	r2, [pc, #608]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d016      	beq.n	8004796 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fe fce2 	bl	8003130 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fe fcde 	bl	8003130 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e168      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004786:	4b8c      	ldr	r3, [pc, #560]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ed      	beq.n	8004770 <HAL_RCC_OscConfig+0x53c>
 8004794:	e015      	b.n	80047c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fe fccb 	bl	8003130 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fe fcc7 	bl	8003130 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e151      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b4:	4b80      	ldr	r3, [pc, #512]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ed      	bne.n	800479e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b7b      	ldr	r3, [pc, #492]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	4a7a      	ldr	r2, [pc, #488]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03c      	beq.n	800485a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01c      	beq.n	8004822 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047e8:	4b73      	ldr	r3, [pc, #460]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80047ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ee:	4a72      	ldr	r2, [pc, #456]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fe fc9a 	bl	8003130 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004800:	f7fe fc96 	bl	8003130 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e122      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004812:	4b69      	ldr	r3, [pc, #420]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ef      	beq.n	8004800 <HAL_RCC_OscConfig+0x5cc>
 8004820:	e01b      	b.n	800485a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004822:	4b65      	ldr	r3, [pc, #404]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004828:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fe fc7d 	bl	8003130 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800483a:	f7fe fc79 	bl	8003130 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e105      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800484c:	4b5a      	ldr	r3, [pc, #360]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 800484e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ef      	bne.n	800483a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80f9 	beq.w	8004a56 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	2b02      	cmp	r3, #2
 800486a:	f040 80cf 	bne.w	8004a0c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800486e:	4b52      	ldr	r3, [pc, #328]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f003 0203 	and.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	429a      	cmp	r2, r3
 8004880:	d12c      	bne.n	80048dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	3b01      	subs	r3, #1
 800488e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d123      	bne.n	80048dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d11b      	bne.n	80048dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d113      	bne.n	80048dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d109      	bne.n	80048dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d071      	beq.n	80049c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d068      	beq.n	80049b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048e2:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048ee:	4b32      	ldr	r3, [pc, #200]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e0ac      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048fe:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004908:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800490a:	f7fe fc11 	bl	8003130 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004912:	f7fe fc0d 	bl	8003130 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e099      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	4b21      	ldr	r3, [pc, #132]	; (80049bc <HAL_RCC_OscConfig+0x788>)
 8004936:	4013      	ands	r3, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004940:	3a01      	subs	r2, #1
 8004942:	0112      	lsls	r2, r2, #4
 8004944:	4311      	orrs	r1, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800494a:	0212      	lsls	r2, r2, #8
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004952:	0852      	lsrs	r2, r2, #1
 8004954:	3a01      	subs	r2, #1
 8004956:	0552      	lsls	r2, r2, #21
 8004958:	4311      	orrs	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800495e:	0852      	lsrs	r2, r2, #1
 8004960:	3a01      	subs	r2, #1
 8004962:	0652      	lsls	r2, r2, #25
 8004964:	4311      	orrs	r1, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800496a:	06d2      	lsls	r2, r2, #27
 800496c:	430a      	orrs	r2, r1
 800496e:	4912      	ldr	r1, [pc, #72]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004970:	4313      	orrs	r3, r2
 8004972:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 8004986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800498a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800498c:	f7fe fbd0 	bl	8003130 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004994:	f7fe fbcc 	bl	8003130 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e058      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a6:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <HAL_RCC_OscConfig+0x784>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049b2:	e050      	b.n	8004a56 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e04f      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c0:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d144      	bne.n	8004a56 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049cc:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 80049d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a20      	ldr	r2, [pc, #128]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049e4:	f7fe fba4 	bl	8003130 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fe fba0 	bl	8003130 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e02c      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x7b8>
 8004a0a:	e024      	b.n	8004a56 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d01f      	beq.n	8004a52 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 8004a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fb87 	bl	8003130 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fe fb83 	bl	8003130 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e00f      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	4905      	ldr	r1, [pc, #20]	; (8004a60 <HAL_RCC_OscConfig+0x82c>)
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_OscConfig+0x830>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
 8004a50:	e001      	b.n	8004a56 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	feeefffc 	.word	0xfeeefffc

08004a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0e7      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b75      	ldr	r3, [pc, #468]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d910      	bls.n	8004aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 0207 	bic.w	r2, r3, #7
 8004a92:	4970      	ldr	r1, [pc, #448]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0cf      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d010      	beq.n	8004ada <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b66      	ldr	r3, [pc, #408]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d908      	bls.n	8004ada <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4960      	ldr	r1, [pc, #384]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04c      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d121      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0a6      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b06:	4b54      	ldr	r3, [pc, #336]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d115      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e09a      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b1e:	4b4e      	ldr	r3, [pc, #312]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e08e      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e086      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b46      	ldr	r3, [pc, #280]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4943      	ldr	r1, [pc, #268]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b50:	f7fe faee 	bl	8003130 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fe faea 	bl	8003130 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e06e      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d010      	beq.n	8004bae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d208      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	492b      	ldr	r1, [pc, #172]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bae:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d210      	bcs.n	8004bde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 0207 	bic.w	r2, r3, #7
 8004bc4:	4923      	ldr	r1, [pc, #140]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bcc:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_RCC_ClockConfig+0x1ec>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e036      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4918      	ldr	r1, [pc, #96]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4910      	ldr	r1, [pc, #64]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c1c:	f000 f824 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	490b      	ldr	r1, [pc, #44]	; (8004c5c <HAL_RCC_ClockConfig+0x1f4>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1f8>)
 8004c3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1fc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fa25 	bl	8003090 <HAL_InitTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40022000 	.word	0x40022000
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800e7bc 	.word	0x0800e7bc
 8004c60:	20000008 	.word	0x20000008
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x34>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d121      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d11e      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ca8:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cc4:	4a2b      	ldr	r2, [pc, #172]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ccc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d102      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e004      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d134      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0xac>
 8004d0c:	e005      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d10:	617b      	str	r3, [r7, #20]
      break;
 8004d12:	e005      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d16:	617b      	str	r3, [r7, #20]
      break;
 8004d18:	e002      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	617b      	str	r3, [r7, #20]
      break;
 8004d1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	fb03 f202 	mul.w	r2, r3, r2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	0e5b      	lsrs	r3, r3, #25
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	3301      	adds	r3, #1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d60:	69bb      	ldr	r3, [r7, #24]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	0800e7d4 	.word	0x0800e7d4
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	007a1200 	.word	0x007a1200

08004d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000008 	.word	0x20000008

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d9c:	f7ff fff0 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	0800e7cc 	.word	0x0800e7cc

08004dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dc8:	f7ff ffda 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0adb      	lsrs	r3, r3, #11
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4904      	ldr	r1, [pc, #16]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	0800e7cc 	.word	0x0800e7cc

08004df0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e08:	f7ff f9a0 	bl	800414c <HAL_PWREx_GetVoltageRange>
 8004e0c:	6178      	str	r0, [r7, #20]
 8004e0e:	e014      	b.n	8004e3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e28:	f7ff f990 	bl	800414c <HAL_PWREx_GetVoltageRange>
 8004e2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d10b      	bne.n	8004e5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d919      	bls.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2ba0      	cmp	r3, #160	; 0xa0
 8004e4c:	d902      	bls.n	8004e54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e4e:	2302      	movs	r3, #2
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e013      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e54:	2301      	movs	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e010      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d902      	bls.n	8004e66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e60:	2303      	movs	r3, #3
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	e00a      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d102      	bne.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e004      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b70      	cmp	r3, #112	; 0x70
 8004e76:	d101      	bne.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e78:	2301      	movs	r3, #1
 8004e7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 0207 	bic.w	r2, r3, #7
 8004e84:	4909      	ldr	r1, [pc, #36]	; (8004eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d001      	beq.n	8004e9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40022000 	.word	0x40022000

08004eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eb8:	2300      	movs	r3, #0
 8004eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d041      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed4:	d02a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ed6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eda:	d824      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee0:	d008      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee6:	d81e      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d010      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ef2:	e018      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef4:	4b86      	ldr	r3, [pc, #536]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a85      	ldr	r2, [pc, #532]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f00:	e015      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 f885 	bl	8006018 <RCCEx_PLLSAI1_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f12:	e00c      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3320      	adds	r3, #32
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 f96e 	bl	80061fc <RCCEx_PLLSAI2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	74fb      	strb	r3, [r7, #19]
      break;
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f34:	4b76      	ldr	r3, [pc, #472]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f42:	4973      	ldr	r1, [pc, #460]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f4a:	e001      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d041      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f64:	d02a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f6a:	d824      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f76:	d81e      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f82:	e018      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f84:	4b62      	ldr	r3, [pc, #392]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a61      	ldr	r2, [pc, #388]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f90:	e015      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 f83d 	bl	8006018 <RCCEx_PLLSAI1_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fa2:	e00c      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3320      	adds	r3, #32
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f926 	bl	80061fc <RCCEx_PLLSAI2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fc4:	4b52      	ldr	r3, [pc, #328]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd2:	494f      	ldr	r1, [pc, #316]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fda:	e001      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80a0 	beq.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ff2:	4b47      	ldr	r3, [pc, #284]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005008:	4b41      	ldr	r3, [pc, #260]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	4a40      	ldr	r2, [pc, #256]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005012:	6593      	str	r3, [r2, #88]	; 0x58
 8005014:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005020:	2301      	movs	r3, #1
 8005022:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005024:	4b3b      	ldr	r3, [pc, #236]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3a      	ldr	r2, [pc, #232]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800502a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005030:	f7fe f87e 	bl	8003130 <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005036:	e009      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005038:	f7fe f87a 	bl	8003130 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	74fb      	strb	r3, [r7, #19]
        break;
 800504a:	e005      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800504c:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ef      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d15c      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800505e:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005068:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01f      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	d019      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005088:	4b21      	ldr	r3, [pc, #132]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	4a20      	ldr	r2, [pc, #128]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005098:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050a8:	4a19      	ldr	r2, [pc, #100]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d016      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fe f839 	bl	8003130 <HAL_GetTick>
 80050be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c0:	e00b      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fe f835 	bl	8003130 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d902      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	74fb      	strb	r3, [r7, #19]
            break;
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ec      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10c      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	4904      	ldr	r1, [pc, #16]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005106:	e009      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	74bb      	strb	r3, [r7, #18]
 800510c:	e006      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511c:	7c7b      	ldrb	r3, [r7, #17]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005122:	4ba6      	ldr	r3, [pc, #664]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005126:	4aa5      	ldr	r2, [pc, #660]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800513a:	4ba0      	ldr	r3, [pc, #640]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f023 0203 	bic.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	499c      	ldr	r1, [pc, #624]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800515c:	4b97      	ldr	r3, [pc, #604]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f023 020c 	bic.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	4994      	ldr	r1, [pc, #592]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800517e:	4b8f      	ldr	r3, [pc, #572]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	498b      	ldr	r1, [pc, #556]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051a0:	4b86      	ldr	r3, [pc, #536]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	4983      	ldr	r1, [pc, #524]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051c2:	4b7e      	ldr	r3, [pc, #504]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d0:	497a      	ldr	r1, [pc, #488]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051e4:	4b75      	ldr	r3, [pc, #468]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	4972      	ldr	r1, [pc, #456]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005214:	4969      	ldr	r1, [pc, #420]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005228:	4b64      	ldr	r3, [pc, #400]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005236:	4961      	ldr	r1, [pc, #388]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800524a:	4b5c      	ldr	r3, [pc, #368]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	4958      	ldr	r1, [pc, #352]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800526c:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	4950      	ldr	r1, [pc, #320]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800528e:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	4947      	ldr	r1, [pc, #284]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052b0:	4b42      	ldr	r3, [pc, #264]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b6:	f023 0203 	bic.w	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	493f      	ldr	r1, [pc, #252]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d028      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052d2:	4b3a      	ldr	r3, [pc, #232]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	4936      	ldr	r1, [pc, #216]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f0:	d106      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f2:	4b32      	ldr	r3, [pc, #200]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	4a31      	ldr	r2, [pc, #196]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fc:	60d3      	str	r3, [r2, #12]
 80052fe:	e011      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fe81 	bl	8006018 <RCCEx_PLLSAI1_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d028      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533e:	491f      	ldr	r1, [pc, #124]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800534e:	d106      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535a:	60d3      	str	r3, [r2, #12]
 800535c:	e011      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005366:	d10c      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	2101      	movs	r1, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fe52 	bl	8006018 <RCCEx_PLLSAI1_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539c:	4907      	ldr	r1, [pc, #28]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ac:	d108      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ae:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	4a02      	ldr	r2, [pc, #8]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b8:	60d3      	str	r3, [r2, #12]
 80053ba:	e013      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80053bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2101      	movs	r1, #1
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fe21 	bl	8006018 <RCCEx_PLLSAI1_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02f      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053f0:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fe:	4929      	ldr	r1, [pc, #164]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800540e:	d10d      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2102      	movs	r1, #2
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fdfe 	bl	8006018 <RCCEx_PLLSAI1_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d014      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	74bb      	strb	r3, [r7, #18]
 800542a:	e011      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005434:	d10c      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3320      	adds	r3, #32
 800543a:	2102      	movs	r1, #2
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fedd 	bl	80061fc <RCCEx_PLLSAI2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546c:	490d      	ldr	r1, [pc, #52]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005490:	4904      	ldr	r1, [pc, #16]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005498:	7cbb      	ldrb	r3, [r7, #18]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000

080054a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ba:	d13e      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054bc:	4bb4      	ldr	r3, [pc, #720]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ce:	d028      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d6:	f200 858c 	bhi.w	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e0:	d005      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e8:	d00e      	beq.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80054ea:	f000 bd82 	b.w	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054ee:	4ba8      	ldr	r3, [pc, #672]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f040 857c 	bne.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	61fb      	str	r3, [r7, #28]
      break;
 8005504:	f000 bd77 	b.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005508:	4ba1      	ldr	r3, [pc, #644]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	f040 8571 	bne.w	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8005518:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800551c:	61fb      	str	r3, [r7, #28]
      break;
 800551e:	f000 bd6c 	b.w	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005522:	4b9b      	ldr	r3, [pc, #620]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800552e:	f040 8566 	bne.w	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8005532:	4b98      	ldr	r3, [pc, #608]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8005534:	61fb      	str	r3, [r7, #28]
      break;
 8005536:	f000 bd62 	b.w	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800553a:	4b95      	ldr	r3, [pc, #596]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d036      	beq.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d840      	bhi.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d003      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d020      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800555c:	e039      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800555e:	4b8c      	ldr	r3, [pc, #560]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d116      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800556a:	4b89      	ldr	r3, [pc, #548]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005576:	4b86      	ldr	r3, [pc, #536]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	e005      	b.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005582:	4b83      	ldr	r3, [pc, #524]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005588:	0a1b      	lsrs	r3, r3, #8
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	4a82      	ldr	r2, [pc, #520]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005594:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005596:	e01f      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
      break;
 800559c:	e01c      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800559e:	4b7c      	ldr	r3, [pc, #496]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055aa:	d102      	bne.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80055ac:	4b7b      	ldr	r3, [pc, #492]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80055b0:	e012      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
      break;
 80055b6:	e00f      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055b8:	4b75      	ldr	r3, [pc, #468]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c4:	d102      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80055c6:	4b76      	ldr	r3, [pc, #472]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80055c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80055ca:	e005      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
      break;
 80055d0:	e002      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
      break;
 80055d6:	bf00      	nop
    }

    switch(PeriphClk)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055de:	f000 842a 	beq.w	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e8:	f200 850b 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055f2:	f000 80df 	beq.w	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055fc:	f200 8501 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005606:	f000 80d5 	beq.w	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005610:	f200 84f7 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561a:	f000 8377 	beq.w	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005624:	f200 84ed 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562e:	f000 84c3 	beq.w	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	f200 84e3 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005642:	f000 82e6 	beq.w	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564c:	f200 84d9 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005656:	f000 80ad 	beq.w	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005660:	f200 84cf 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	f000 809b 	beq.w	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005674:	f200 84c5 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d07f      	beq.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	f200 84bc 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005690:	f000 8448 	beq.w	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	f200 84b2 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	f000 83f0 	beq.w	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ae:	f200 84a8 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b8:	f000 8391 	beq.w	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c2:	f200 849e 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b80      	cmp	r3, #128	; 0x80
 80056ca:	f000 835c 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	f200 8496 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d84b      	bhi.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 848f 	beq.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b1f      	cmp	r3, #31
 80056ea:	f200 848a 	bhi.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	0800590b 	.word	0x0800590b
 80056f8:	0800597b 	.word	0x0800597b
 80056fc:	08006003 	.word	0x08006003
 8005700:	08005a0f 	.word	0x08005a0f
 8005704:	08006003 	.word	0x08006003
 8005708:	08006003 	.word	0x08006003
 800570c:	08006003 	.word	0x08006003
 8005710:	08005a97 	.word	0x08005a97
 8005714:	08006003 	.word	0x08006003
 8005718:	08006003 	.word	0x08006003
 800571c:	08006003 	.word	0x08006003
 8005720:	08006003 	.word	0x08006003
 8005724:	08006003 	.word	0x08006003
 8005728:	08006003 	.word	0x08006003
 800572c:	08006003 	.word	0x08006003
 8005730:	08005b0f 	.word	0x08005b0f
 8005734:	08006003 	.word	0x08006003
 8005738:	08006003 	.word	0x08006003
 800573c:	08006003 	.word	0x08006003
 8005740:	08006003 	.word	0x08006003
 8005744:	08006003 	.word	0x08006003
 8005748:	08006003 	.word	0x08006003
 800574c:	08006003 	.word	0x08006003
 8005750:	08006003 	.word	0x08006003
 8005754:	08006003 	.word	0x08006003
 8005758:	08006003 	.word	0x08006003
 800575c:	08006003 	.word	0x08006003
 8005760:	08006003 	.word	0x08006003
 8005764:	08006003 	.word	0x08006003
 8005768:	08006003 	.word	0x08006003
 800576c:	08006003 	.word	0x08006003
 8005770:	08005b91 	.word	0x08005b91
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	f000 82d9 	beq.w	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800577c:	f000 bc41 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005780:	69b9      	ldr	r1, [r7, #24]
 8005782:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005786:	f000 fe15 	bl	80063b4 <RCCEx_GetSAIxPeriphCLKFreq>
 800578a:	61f8      	str	r0, [r7, #28]
      break;
 800578c:	f000 bc3a 	b.w	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8005790:	40021000 	.word	0x40021000
 8005794:	0003d090 	.word	0x0003d090
 8005798:	0800e7d4 	.word	0x0800e7d4
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80057a4:	69b9      	ldr	r1, [r7, #24]
 80057a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057aa:	f000 fe03 	bl	80063b4 <RCCEx_GetSAIxPeriphCLKFreq>
 80057ae:	61f8      	str	r0, [r7, #28]
      break;
 80057b0:	f000 bc28 	b.w	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80057b4:	4ba6      	ldr	r3, [pc, #664]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057c6:	d015      	beq.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057ce:	f200 8092 	bhi.w	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d8:	d029      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e0:	f200 8089 	bhi.w	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d07b      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f0:	d04a      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 80057f2:	e080      	b.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80057f4:	4b96      	ldr	r3, [pc, #600]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d17c      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005800:	4b93      	ldr	r3, [pc, #588]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800580c:	4b90      	ldr	r3, [pc, #576]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	e005      	b.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005818:	4b8d      	ldr	r3, [pc, #564]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	4a8b      	ldr	r2, [pc, #556]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582a:	61fb      	str	r3, [r7, #28]
          break;
 800582c:	e065      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800582e:	4b88      	ldr	r3, [pc, #544]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800583a:	d160      	bne.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800583c:	4b84      	ldr	r3, [pc, #528]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005848:	d159      	bne.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800584a:	4b81      	ldr	r3, [pc, #516]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005854:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	fb03 f202 	mul.w	r2, r3, r2
 800585e:	4b7c      	ldr	r3, [pc, #496]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	3301      	adds	r3, #1
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005870:	4b77      	ldr	r3, [pc, #476]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	0d5b      	lsrs	r3, r3, #21
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	61fb      	str	r3, [r7, #28]
          break;
 8005886:	e03a      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005888:	4b71      	ldr	r3, [pc, #452]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005894:	d135      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005896:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d12e      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80058a4:	4b6a      	ldr	r3, [pc, #424]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ae:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	fb03 f202 	mul.w	r2, r3, r2
 80058b8:	4b65      	ldr	r3, [pc, #404]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	3301      	adds	r3, #1
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80058ca:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	0d5b      	lsrs	r3, r3, #21
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	3301      	adds	r3, #1
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	fbb2 f3f3 	udiv	r3, r2, r3
 80058de:	61fb      	str	r3, [r7, #28]
          break;
 80058e0:	e00f      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80058e2:	4b5b      	ldr	r3, [pc, #364]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d10a      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 80058f0:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80058f2:	61fb      	str	r3, [r7, #28]
          break;
 80058f4:	e007      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 80058f6:	bf00      	nop
 80058f8:	e384      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80058fa:	bf00      	nop
 80058fc:	e382      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80058fe:	bf00      	nop
 8005900:	e380      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005902:	bf00      	nop
 8005904:	e37e      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005906:	bf00      	nop
        break;
 8005908:	e37c      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800590a:	4b51      	ldr	r3, [pc, #324]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d828      	bhi.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005935 	.word	0x08005935
 8005928:	0800593d 	.word	0x0800593d
 800592c:	08005945 	.word	0x08005945
 8005930:	08005959 	.word	0x08005959
          frequency = HAL_RCC_GetPCLK2Freq();
 8005934:	f7ff fa46 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8005938:	61f8      	str	r0, [r7, #28]
          break;
 800593a:	e01d      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800593c:	f7ff f994 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005940:	61f8      	str	r0, [r7, #28]
          break;
 8005942:	e019      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005944:	4b42      	ldr	r3, [pc, #264]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005950:	d10f      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8005952:	4b42      	ldr	r3, [pc, #264]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005954:	61fb      	str	r3, [r7, #28]
          break;
 8005956:	e00c      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005958:	4b3d      	ldr	r3, [pc, #244]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b02      	cmp	r3, #2
 8005964:	d107      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	61fb      	str	r3, [r7, #28]
          break;
 800596c:	e003      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800596e:	bf00      	nop
 8005970:	e348      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005972:	bf00      	nop
 8005974:	e346      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005976:	bf00      	nop
        break;
 8005978:	e344      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800597a:	4b35      	ldr	r3, [pc, #212]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b0c      	cmp	r3, #12
 800598a:	d83a      	bhi.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059c9 	.word	0x080059c9
 8005998:	08005a03 	.word	0x08005a03
 800599c:	08005a03 	.word	0x08005a03
 80059a0:	08005a03 	.word	0x08005a03
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	08005a03 	.word	0x08005a03
 80059ac:	08005a03 	.word	0x08005a03
 80059b0:	08005a03 	.word	0x08005a03
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	08005a03 	.word	0x08005a03
 80059bc:	08005a03 	.word	0x08005a03
 80059c0:	08005a03 	.word	0x08005a03
 80059c4:	080059ed 	.word	0x080059ed
          frequency = HAL_RCC_GetPCLK1Freq();
 80059c8:	f7ff f9e6 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 80059cc:	61f8      	str	r0, [r7, #28]
          break;
 80059ce:	e01d      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 80059d0:	f7ff f94a 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 80059d4:	61f8      	str	r0, [r7, #28]
          break;
 80059d6:	e019      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d10f      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80059e8:	61fb      	str	r3, [r7, #28]
          break;
 80059ea:	e00c      	b.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059ec:	4b18      	ldr	r3, [pc, #96]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d107      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 80059fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fe:	61fb      	str	r3, [r7, #28]
          break;
 8005a00:	e003      	b.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8005a02:	bf00      	nop
 8005a04:	e2fe      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005a06:	bf00      	nop
 8005a08:	e2fc      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005a0a:	bf00      	nop
        break;
 8005a0c:	e2fa      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b30      	cmp	r3, #48	; 0x30
 8005a1e:	d029      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	d831      	bhi.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d019      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d82b      	bhi.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d004      	beq.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8005a3e:	e024      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7ff f9aa 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005a44:	61f8      	str	r0, [r7, #28]
          break;
 8005a46:	e025      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a48:	f7ff f90e 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005a4c:	61f8      	str	r0, [r7, #28]
          break;
 8005a4e:	e021      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8005a50:	40021000 	.word	0x40021000
 8005a54:	0800e7d4 	.word	0x0800e7d4
 8005a58:	02dc6c00 	.word	0x02dc6c00
 8005a5c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a60:	4b8f      	ldr	r3, [pc, #572]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d10f      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8005a6e:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005a70:	61fb      	str	r3, [r7, #28]
          break;
 8005a72:	e00c      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a74:	4b8a      	ldr	r3, [pc, #552]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d107      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a86:	61fb      	str	r3, [r7, #28]
          break;
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8005a8a:	bf00      	nop
 8005a8c:	e2ba      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005a8e:	bf00      	nop
 8005a90:	e2b8      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005a92:	bf00      	nop
        break;
 8005a94:	e2b6      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005a96:	4b82      	ldr	r3, [pc, #520]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa6:	d021      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8005aac:	d829      	bhi.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d011      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b80      	cmp	r3, #128	; 0x80
 8005ab8:	d823      	bhi.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d004      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8005ac6:	e01c      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7ff f966 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005acc:	61f8      	str	r0, [r7, #28]
          break;
 8005ace:	e01d      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ad0:	f7ff f8ca 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005ad4:	61f8      	str	r0, [r7, #28]
          break;
 8005ad6:	e019      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ad8:	4b71      	ldr	r3, [pc, #452]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae4:	d10f      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8005ae6:	4b6f      	ldr	r3, [pc, #444]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005ae8:	61fb      	str	r3, [r7, #28]
          break;
 8005aea:	e00c      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005aec:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d107      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8005afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afe:	61fb      	str	r3, [r7, #28]
          break;
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8005b02:	bf00      	nop
 8005b04:	e27e      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005b06:	bf00      	nop
 8005b08:	e27c      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005b0a:	bf00      	nop
        break;
 8005b0c:	e27a      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b0e:	4b64      	ldr	r3, [pc, #400]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b20:	d025      	beq.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b28:	d82c      	bhi.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b30:	d013      	beq.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b38:	d824      	bhi.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b46:	d004      	beq.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8005b48:	e01c      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7ff f925 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005b4e:	61f8      	str	r0, [r7, #28]
          break;
 8005b50:	e01d      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b52:	f7ff f889 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005b56:	61f8      	str	r0, [r7, #28]
          break;
 8005b58:	e019      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b5a:	4b51      	ldr	r3, [pc, #324]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b66:	d10f      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8005b68:	4b4e      	ldr	r3, [pc, #312]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005b6a:	61fb      	str	r3, [r7, #28]
          break;
 8005b6c:	e00c      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8005b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b80:	61fb      	str	r3, [r7, #28]
          break;
 8005b82:	e003      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8005b84:	bf00      	nop
 8005b86:	e23d      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005b88:	bf00      	nop
 8005b8a:	e23b      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005b8c:	bf00      	nop
        break;
 8005b8e:	e239      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005b90:	4b43      	ldr	r3, [pc, #268]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba2:	d025      	beq.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005baa:	d82c      	bhi.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d013      	beq.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bba:	d824      	bhi.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d004      	beq.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8005bca:	e01c      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7ff f8e4 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	61f8      	str	r0, [r7, #28]
          break;
 8005bd2:	e01d      	b.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bd4:	f7ff f848 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005bd8:	61f8      	str	r0, [r7, #28]
          break;
 8005bda:	e019      	b.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bdc:	4b30      	ldr	r3, [pc, #192]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d10f      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8005bea:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005bec:	61fb      	str	r3, [r7, #28]
          break;
 8005bee:	e00c      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bf0:	4b2b      	ldr	r3, [pc, #172]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	61fb      	str	r3, [r7, #28]
          break;
 8005c04:	e003      	b.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8005c06:	bf00      	nop
 8005c08:	e1fc      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005c0a:	bf00      	nop
 8005c0c:	e1fa      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005c0e:	bf00      	nop
        break;
 8005c10:	e1f8      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c12:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c24:	d00c      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c2c:	d868      	bhi.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c34:	d008      	beq.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3c:	d034      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8005c3e:	e05f      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c40:	f7ff f812 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005c44:	61f8      	str	r0, [r7, #28]
          break;
 8005c46:	e060      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005c48:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c54:	d156      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d050      	beq.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c62:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	fb03 f202 	mul.w	r2, r3, r2
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	3301      	adds	r3, #1
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	0e5b      	lsrs	r3, r3, #25
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	3301      	adds	r3, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	61fb      	str	r3, [r7, #28]
          break;
 8005c9e:	e031      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005ca8:	4b9c      	ldr	r3, [pc, #624]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb4:	d128      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8005cb6:	4b99      	ldr	r3, [pc, #612]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d022      	beq.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005cc2:	4b96      	ldr	r3, [pc, #600]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ccc:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	fb03 f202 	mul.w	r2, r3, r2
 8005cd6:	4b91      	ldr	r3, [pc, #580]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005ce8:	4b8c      	ldr	r3, [pc, #560]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	0e5b      	lsrs	r3, r3, #25
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	61fb      	str	r3, [r7, #28]
          break;
 8005cfe:	e003      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8005d00:	bf00      	nop
 8005d02:	e17f      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005d04:	bf00      	nop
 8005d06:	e17d      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005d08:	bf00      	nop
        break;
 8005d0a:	e17b      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005d0c:	4b83      	ldr	r3, [pc, #524]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005d1e:	f7ff f851 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8005d22:	61f8      	str	r0, [r7, #28]
        break;
 8005d24:	e16e      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d26:	f7fe ff9f 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005d2a:	61f8      	str	r0, [r7, #28]
        break;
 8005d2c:	e16a      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d2e:	4b7b      	ldr	r3, [pc, #492]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d40:	d013      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d48:	d819      	bhi.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d56:	d004      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005d58:	e011      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d5a:	f7ff f81d 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005d5e:	61f8      	str	r0, [r7, #28]
          break;
 8005d60:	e010      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d62:	f7fe ff81 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005d66:	61f8      	str	r0, [r7, #28]
          break;
 8005d68:	e00c      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d6a:	4b6c      	ldr	r3, [pc, #432]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d76:	d104      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8005d78:	4b69      	ldr	r3, [pc, #420]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005d7a:	61fb      	str	r3, [r7, #28]
          break;
 8005d7c:	e001      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8005d7e:	bf00      	nop
 8005d80:	e140      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005d82:	bf00      	nop
        break;
 8005d84:	e13e      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d86:	4b65      	ldr	r3, [pc, #404]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d98:	d013      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da0:	d819      	bhi.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dae:	d004      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8005db0:	e011      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005db2:	f7fe fff1 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005db6:	61f8      	str	r0, [r7, #28]
          break;
 8005db8:	e010      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fe ff55 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005dbe:	61f8      	str	r0, [r7, #28]
          break;
 8005dc0:	e00c      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc2:	4b56      	ldr	r3, [pc, #344]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d104      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8005dd0:	4b53      	ldr	r3, [pc, #332]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005dd2:	61fb      	str	r3, [r7, #28]
          break;
 8005dd4:	e001      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8005dd6:	bf00      	nop
 8005dd8:	e114      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005dda:	bf00      	nop
        break;
 8005ddc:	e112      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005dde:	4b4f      	ldr	r3, [pc, #316]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df0:	d013      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df8:	d819      	bhi.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e06:	d004      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8005e08:	e011      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e0a:	f7fe ffc5 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005e0e:	61f8      	str	r0, [r7, #28]
          break;
 8005e10:	e010      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e12:	f7fe ff29 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005e16:	61f8      	str	r0, [r7, #28]
          break;
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e1a:	4b40      	ldr	r3, [pc, #256]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e26:	d104      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8005e28:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005e2a:	61fb      	str	r3, [r7, #28]
          break;
 8005e2c:	e001      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8005e2e:	bf00      	nop
 8005e30:	e0e8      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005e32:	bf00      	nop
        break;
 8005e34:	e0e6      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d011      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d818      	bhi.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d004      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8005e5a:	e011      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fe ff9c 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005e60:	61f8      	str	r0, [r7, #28]
          break;
 8005e62:	e010      	b.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e64:	f7fe ff00 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005e68:	61f8      	str	r0, [r7, #28]
          break;
 8005e6a:	e00c      	b.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e6c:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e78:	d104      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8005e7a:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005e7c:	61fb      	str	r3, [r7, #28]
          break;
 8005e7e:	e001      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8005e80:	bf00      	nop
 8005e82:	e0bf      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005e84:	bf00      	nop
        break;
 8005e86:	e0bd      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e9a:	d02c      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ea2:	d833      	bhi.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eaa:	d01a      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eb2:	d82b      	bhi.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ec0:	d004      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8005ec2:	e023      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fe ff68 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	61f8      	str	r0, [r7, #28]
          break;
 8005eca:	e026      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ecc:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d11a      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8005eda:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ede:	61fb      	str	r3, [r7, #28]
          break;
 8005ee0:	e016      	b.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d111      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005ef2:	61fb      	str	r3, [r7, #28]
          break;
 8005ef4:	e00e      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ef6:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d109      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8005f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f08:	61fb      	str	r3, [r7, #28]
          break;
 8005f0a:	e005      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8005f0c:	bf00      	nop
 8005f0e:	e079      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005f10:	bf00      	nop
 8005f12:	e077      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005f14:	bf00      	nop
 8005f16:	e075      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005f18:	bf00      	nop
        break;
 8005f1a:	e073      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f36:	d02c      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f3e:	d833      	bhi.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f46:	d01a      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f4e:	d82b      	bhi.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5c:	d004      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005f5e:	e023      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f60:	f7fe ff1a 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005f64:	61f8      	str	r0, [r7, #28]
          break;
 8005f66:	e026      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f68:	4b29      	ldr	r3, [pc, #164]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d11a      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8005f76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f7a:	61fb      	str	r3, [r7, #28]
          break;
 8005f7c:	e016      	b.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f7e:	4b24      	ldr	r3, [pc, #144]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8a:	d111      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8005f8c:	4b21      	ldr	r3, [pc, #132]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8005f8e:	61fb      	str	r3, [r7, #28]
          break;
 8005f90:	e00e      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f92:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d109      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8005fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa4:	61fb      	str	r3, [r7, #28]
          break;
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005fa8:	bf00      	nop
 8005faa:	e02b      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005fac:	bf00      	nop
 8005fae:	e029      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005fb0:	bf00      	nop
 8005fb2:	e027      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005fb4:	bf00      	nop
        break;
 8005fb6:	e025      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d004      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8005fd2:	e00d      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe fee0 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
          break;
 8005fda:	e009      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d101      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8005fea:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8005fec:	61fb      	str	r3, [r7, #28]
          break;
 8005fee:	bf00      	nop
        break;
 8005ff0:	e008      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e006      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8006002:	bf00      	nop
    }
  }

  return(frequency);
 8006004:	69fb      	ldr	r3, [r7, #28]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	00f42400 	.word	0x00f42400

08006018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006026:	4b74      	ldr	r3, [pc, #464]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d018      	beq.n	8006064 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006032:	4b71      	ldr	r3, [pc, #452]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0203 	and.w	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d10d      	bne.n	800605e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
       ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800604a:	4b6b      	ldr	r3, [pc, #428]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
       ||
 800605a:	429a      	cmp	r2, r3
 800605c:	d047      	beq.n	80060ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
 8006062:	e044      	b.n	80060ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d018      	beq.n	800609e <RCCEx_PLLSAI1_Config+0x86>
 800606c:	2b03      	cmp	r3, #3
 800606e:	d825      	bhi.n	80060bc <RCCEx_PLLSAI1_Config+0xa4>
 8006070:	2b01      	cmp	r3, #1
 8006072:	d002      	beq.n	800607a <RCCEx_PLLSAI1_Config+0x62>
 8006074:	2b02      	cmp	r3, #2
 8006076:	d009      	beq.n	800608c <RCCEx_PLLSAI1_Config+0x74>
 8006078:	e020      	b.n	80060bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800607a:	4b5f      	ldr	r3, [pc, #380]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d11d      	bne.n	80060c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800608a:	e01a      	b.n	80060c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800608c:	4b5a      	ldr	r3, [pc, #360]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006094:	2b00      	cmp	r3, #0
 8006096:	d116      	bne.n	80060c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800609c:	e013      	b.n	80060c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800609e:	4b56      	ldr	r3, [pc, #344]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060aa:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060ba:	e006      	b.n	80060ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e004      	b.n	80060cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060c2:	bf00      	nop
 80060c4:	e002      	b.n	80060cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060c6:	bf00      	nop
 80060c8:	e000      	b.n	80060cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060d2:	4b49      	ldr	r3, [pc, #292]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	430b      	orrs	r3, r1
 80060e8:	4943      	ldr	r1, [pc, #268]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d17c      	bne.n	80061ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060f4:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a3f      	ldr	r2, [pc, #252]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006100:	f7fd f816 	bl	8003130 <HAL_GetTick>
 8006104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006106:	e009      	b.n	800611c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006108:	f7fd f812 	bl	8003130 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d902      	bls.n	800611c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	73fb      	strb	r3, [r7, #15]
        break;
 800611a:	e005      	b.n	8006128 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800611c:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ef      	bne.n	8006108 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d15f      	bne.n	80061ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d110      	bne.n	8006156 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006134:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800613c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6892      	ldr	r2, [r2, #8]
 8006144:	0211      	lsls	r1, r2, #8
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68d2      	ldr	r2, [r2, #12]
 800614a:	06d2      	lsls	r2, r2, #27
 800614c:	430a      	orrs	r2, r1
 800614e:	492a      	ldr	r1, [pc, #168]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006150:	4313      	orrs	r3, r2
 8006152:	610b      	str	r3, [r1, #16]
 8006154:	e027      	b.n	80061a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d112      	bne.n	8006182 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800615c:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006164:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6892      	ldr	r2, [r2, #8]
 800616c:	0211      	lsls	r1, r2, #8
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6912      	ldr	r2, [r2, #16]
 8006172:	0852      	lsrs	r2, r2, #1
 8006174:	3a01      	subs	r2, #1
 8006176:	0552      	lsls	r2, r2, #21
 8006178:	430a      	orrs	r2, r1
 800617a:	491f      	ldr	r1, [pc, #124]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
 8006180:	e011      	b.n	80061a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800618a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	0211      	lsls	r1, r2, #8
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6952      	ldr	r2, [r2, #20]
 8006198:	0852      	lsrs	r2, r2, #1
 800619a:	3a01      	subs	r2, #1
 800619c:	0652      	lsls	r2, r2, #25
 800619e:	430a      	orrs	r2, r1
 80061a0:	4915      	ldr	r1, [pc, #84]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061a6:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b2:	f7fc ffbd 	bl	8003130 <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061b8:	e009      	b.n	80061ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061ba:	f7fc ffb9 	bl	8003130 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d902      	bls.n	80061ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
          break;
 80061cc:	e005      	b.n	80061da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061ce:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ef      	beq.n	80061ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	4903      	ldr	r1, [pc, #12]	; (80061f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000

080061fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800620a:	4b69      	ldr	r3, [pc, #420]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006216:	4b66      	ldr	r3, [pc, #408]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0203 	and.w	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d10d      	bne.n	8006242 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
       ||
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800622e:	4b60      	ldr	r3, [pc, #384]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
       ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d047      	beq.n	80062d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
 8006246:	e044      	b.n	80062d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d018      	beq.n	8006282 <RCCEx_PLLSAI2_Config+0x86>
 8006250:	2b03      	cmp	r3, #3
 8006252:	d825      	bhi.n	80062a0 <RCCEx_PLLSAI2_Config+0xa4>
 8006254:	2b01      	cmp	r3, #1
 8006256:	d002      	beq.n	800625e <RCCEx_PLLSAI2_Config+0x62>
 8006258:	2b02      	cmp	r3, #2
 800625a:	d009      	beq.n	8006270 <RCCEx_PLLSAI2_Config+0x74>
 800625c:	e020      	b.n	80062a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800625e:	4b54      	ldr	r3, [pc, #336]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11d      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626e:	e01a      	b.n	80062a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006270:	4b4f      	ldr	r3, [pc, #316]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006278:	2b00      	cmp	r3, #0
 800627a:	d116      	bne.n	80062aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006280:	e013      	b.n	80062aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006282:	4b4b      	ldr	r3, [pc, #300]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800628e:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800629e:	e006      	b.n	80062ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e004      	b.n	80062b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062b6:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6819      	ldr	r1, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	430b      	orrs	r3, r1
 80062cc:	4938      	ldr	r1, [pc, #224]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d166      	bne.n	80063a6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062d8:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a34      	ldr	r2, [pc, #208]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e4:	f7fc ff24 	bl	8003130 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062ea:	e009      	b.n	8006300 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062ec:	f7fc ff20 	bl	8003130 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d902      	bls.n	8006300 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
        break;
 80062fe:	e005      	b.n	800630c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006300:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ef      	bne.n	80062ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d149      	bne.n	80063a6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d110      	bne.n	800633a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006320:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
 8006328:	0211      	lsls	r1, r2, #8
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68d2      	ldr	r2, [r2, #12]
 800632e:	06d2      	lsls	r2, r2, #27
 8006330:	430a      	orrs	r2, r1
 8006332:	491f      	ldr	r1, [pc, #124]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006334:	4313      	orrs	r3, r2
 8006336:	614b      	str	r3, [r1, #20]
 8006338:	e011      	b.n	800635e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800633a:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006342:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6892      	ldr	r2, [r2, #8]
 800634a:	0211      	lsls	r1, r2, #8
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6912      	ldr	r2, [r2, #16]
 8006350:	0852      	lsrs	r2, r2, #1
 8006352:	3a01      	subs	r2, #1
 8006354:	0652      	lsls	r2, r2, #25
 8006356:	430a      	orrs	r2, r1
 8006358:	4915      	ldr	r1, [pc, #84]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800635a:	4313      	orrs	r3, r2
 800635c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800635e:	4b14      	ldr	r3, [pc, #80]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636a:	f7fc fee1 	bl	8003130 <HAL_GetTick>
 800636e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006370:	e009      	b.n	8006386 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006372:	f7fc fedd 	bl	8003130 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d902      	bls.n	8006386 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	73fb      	strb	r3, [r7, #15]
          break;
 8006384:	e005      	b.n	8006392 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ef      	beq.n	8006372 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	4903      	ldr	r1, [pc, #12]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40021000 	.word	0x40021000

080063b4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d0:	d10c      	bne.n	80063ec <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80063d2:	4b77      	ldr	r3, [pc, #476]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80063dc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063e4:	d112      	bne.n	800640c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80063e6:	4b73      	ldr	r3, [pc, #460]	; (80065b4 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e00f      	b.n	800640c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f2:	d10b      	bne.n	800640c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80063f4:	4b6e      	ldr	r3, [pc, #440]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80063fe:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006406:	d101      	bne.n	800640c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006408:	4b6a      	ldr	r3, [pc, #424]	; (80065b4 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800640a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 80c6 	bne.w	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800641e:	d003      	beq.n	8006428 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006426:	d13b      	bne.n	80064a0 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006434:	f040 80b3 	bne.w	800659e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8006438:	4b5d      	ldr	r3, [pc, #372]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80ac 	beq.w	800659e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006446:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	3301      	adds	r3, #1
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800645a:	4b55      	ldr	r3, [pc, #340]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006464:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006466:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	0edb      	lsrs	r3, r3, #27
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006478:	4b4d      	ldr	r3, [pc, #308]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8006484:	2311      	movs	r3, #17
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e001      	b.n	800648e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800648a:	2307      	movs	r3, #7
 800648c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	fb03 f202 	mul.w	r2, r3, r2
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800649e:	e07e      	b.n	800659e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d139      	bne.n	800651a <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80064a6:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b2:	d175      	bne.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80064b4:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d06f      	beq.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	3301      	adds	r3, #1
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064d4:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	0a1b      	lsrs	r3, r3, #8
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80064e0:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	0edb      	lsrs	r3, r3, #27
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80064f2:	4b2f      	ldr	r3, [pc, #188]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80064fe:	2311      	movs	r3, #17
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e001      	b.n	8006508 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8006504:	2307      	movs	r3, #7
 8006506:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	fb03 f202 	mul.w	r2, r3, r2
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e042      	b.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006520:	d003      	beq.n	800652a <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006528:	d13a      	bne.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800652a:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006536:	d133      	bne.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02d      	beq.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	3301      	adds	r3, #1
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006562:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006564:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	0edb      	lsrs	r3, r3, #27
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006576:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006582:	2311      	movs	r3, #17
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e001      	b.n	800658c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006588:	2307      	movs	r3, #7
 800658a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	fb03 f202 	mul.w	r2, r3, r2
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e000      	b.n	80065a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800659e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80065a0:	69fb      	ldr	r3, [r7, #28]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3724      	adds	r7, #36	; 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	001fff68 	.word	0x001fff68

080065b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e022      	b.n	8006610 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fc f9c9 	bl	8002974 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2203      	movs	r2, #3
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f814 	bl	8006618 <HAL_SD_InitCard>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e00a      	b.n	8006610 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006618:	b5b0      	push	{r4, r5, r7, lr}
 800661a:	b08e      	sub	sp, #56	; 0x38
 800661c:	af04      	add	r7, sp, #16
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006620:	2300      	movs	r3, #0
 8006622:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006638:	f7fe ff36 	bl	80054a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e07b      	b.n	8006750 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	09db      	lsrs	r3, r3, #7
 800665c:	4a3e      	ldr	r2, [pc, #248]	; (8006758 <HAL_SD_InitCard+0x140>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	091b      	lsrs	r3, r3, #4
 8006664:	3b02      	subs	r3, #2
 8006666:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681d      	ldr	r5, [r3, #0]
 800666c:	466c      	mov	r4, sp
 800666e:	f107 0314 	add.w	r3, r7, #20
 8006672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006680:	4628      	mov	r0, r5
 8006682:	f002 fdfa 	bl	800927a <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006694:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f002 fe38 	bl	8009310 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ae:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	3302      	adds	r3, #2
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80066bc:	4a27      	ldr	r2, [pc, #156]	; (800675c <HAL_SD_InitCard+0x144>)
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	3301      	adds	r3, #1
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fc fd3e 	bl	8003148 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fe6b 	bl	80073a8 <SD_PowerON>
 80066d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e02e      	b.n	8006750 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fd8a 	bl	800720c <SD_InitCard>
 80066f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e01b      	b.n	8006750 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006720:	4618      	mov	r0, r3
 8006722:	f002 fe88 	bl	8009436 <SDMMC_CmdBlockLength>
 8006726:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a0b      	ldr	r2, [pc, #44]	; (8006760 <HAL_SD_InitCard+0x148>)
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3728      	adds	r7, #40	; 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bdb0      	pop	{r4, r5, r7, pc}
 8006758:	014f8b59 	.word	0x014f8b59
 800675c:	00012110 	.word	0x00012110
 8006760:	004005ff 	.word	0x004005ff

08006764 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b092      	sub	sp, #72	; 0x48
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006772:	f7fc fcdd 	bl	8003130 <HAL_GetTick>
 8006776:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d107      	bne.n	8006796 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e1bd      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	f040 81b0 	bne.w	8006b04 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	441a      	add	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d907      	bls.n	80067c8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e1a4      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2203      	movs	r2, #3
 80067cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2200      	movs	r2, #0
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d002      	beq.n	80067e6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	025b      	lsls	r3, r3, #9
 80067e4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	025b      	lsls	r3, r3, #9
 80067f0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067f2:	2390      	movs	r3, #144	; 0x90
 80067f4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067f6:	2302      	movs	r3, #2
 80067f8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80067fe:	2301      	movs	r3, #1
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f107 0214 	add.w	r2, r7, #20
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f002 fde6 	bl	80093de <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d90a      	bls.n	800682e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2202      	movs	r2, #2
 800681c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006824:	4618      	mov	r0, r3
 8006826:	f002 fe4a 	bl	80094be <SDMMC_CmdReadMultiBlock>
 800682a:	6478      	str	r0, [r7, #68]	; 0x44
 800682c:	e009      	b.n	8006842 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fe1d 	bl	800947a <SDMMC_CmdReadSingleBlock>
 8006840:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7a      	ldr	r2, [pc, #488]	; (8006a38 <HAL_SD_ReadBlocks+0x2d4>)
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	431a      	orrs	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e151      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006872:	e061      	b.n	8006938 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d03c      	beq.n	80068fc <HAL_SD_ReadBlocks+0x198>
 8006882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d039      	beq.n	80068fc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006888:	2300      	movs	r3, #0
 800688a:	643b      	str	r3, [r7, #64]	; 0x40
 800688c:	e033      	b.n	80068f6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f002 fd1e 	bl	80092d4 <SDMMC_ReadFIFO>
 8006898:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	b2da      	uxtb	r2, r3
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	3301      	adds	r3, #1
 80068a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068aa:	3b01      	subs	r3, #1
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	3301      	adds	r3, #1
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c0:	3b01      	subs	r3, #1
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	3301      	adds	r3, #1
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	3b01      	subs	r3, #1
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	0e1b      	lsrs	r3, r3, #24
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	3301      	adds	r3, #1
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	3b01      	subs	r3, #1
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80068f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f2:	3301      	adds	r3, #1
 80068f4:	643b      	str	r3, [r7, #64]	; 0x40
 80068f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	d9c8      	bls.n	800688e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80068fc:	f7fc fc18 	bl	8003130 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006908:	429a      	cmp	r2, r3
 800690a:	d902      	bls.n	8006912 <HAL_SD_ReadBlocks+0x1ae>
 800690c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690e:	2b00      	cmp	r3, #0
 8006910:	d112      	bne.n	8006938 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a48      	ldr	r2, [pc, #288]	; (8006a38 <HAL_SD_ReadBlocks+0x2d4>)
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e0ec      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006942:	2b00      	cmp	r3, #0
 8006944:	d096      	beq.n	8006874 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006950:	2b00      	cmp	r3, #0
 8006952:	d022      	beq.n	800699a <HAL_SD_ReadBlocks+0x236>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d91f      	bls.n	800699a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	2b03      	cmp	r3, #3
 8006960:	d01b      	beq.n	800699a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f002 fe10 	bl	800958c <SDMMC_CmdStopTransfer>
 800696c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	2b00      	cmp	r3, #0
 8006972:	d012      	beq.n	800699a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <HAL_SD_ReadBlocks+0x2d4>)
 800697a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006982:	431a      	orrs	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e0bb      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d012      	beq.n	80069ce <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_SD_ReadBlocks+0x2d4>)
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	f043 0208 	orr.w	r2, r3, #8
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e0a1      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <HAL_SD_ReadBlocks+0x2d4>)
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	f043 0202 	orr.w	r2, r3, #2
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e087      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d064      	beq.n	8006ada <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <HAL_SD_ReadBlocks+0x2d4>)
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	f043 0220 	orr.w	r2, r3, #32
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e06d      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
 8006a36:	bf00      	nop
 8006a38:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f002 fc47 	bl	80092d4 <SDMMC_ReadFIFO>
 8006a46:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	3301      	adds	r3, #1
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	3301      	adds	r3, #1
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	3301      	adds	r3, #1
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	3b01      	subs	r3, #1
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	0e1b      	lsrs	r3, r3, #24
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a90:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	3301      	adds	r3, #1
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a9e:	f7fc fb47 	bl	8003130 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d902      	bls.n	8006ab4 <HAL_SD_ReadBlocks+0x350>
 8006aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d112      	bne.n	8006ada <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <HAL_SD_ReadBlocks+0x3b8>)
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e01b      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_SD_ReadBlocks+0x38a>
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1a6      	bne.n	8006a3c <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f240 523a 	movw	r2, #1338	; 0x53a
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e006      	b.n	8006b12 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3748      	adds	r7, #72	; 0x48
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	004005ff 	.word	0x004005ff

08006b20 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b092      	sub	sp, #72	; 0x48
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b2e:	f7fc faff 	bl	8003130 <HAL_GetTick>
 8006b32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d107      	bne.n	8006b52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e165      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	f040 8158 	bne.w	8006e10 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d907      	bls.n	8006b84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e14c      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2203      	movs	r2, #3
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d002      	beq.n	8006ba2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	025b      	lsls	r3, r3, #9
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	025b      	lsls	r3, r3, #9
 8006bac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006bae:	2390      	movs	r3, #144	; 0x90
 8006bb0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f107 0218 	add.w	r2, r7, #24
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f002 fc08 	bl	80093de <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d90a      	bls.n	8006bea <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006be0:	4618      	mov	r0, r3
 8006be2:	f002 fcb0 	bl	8009546 <SDMMC_CmdWriteMultiBlock>
 8006be6:	6478      	str	r0, [r7, #68]	; 0x44
 8006be8:	e009      	b.n	8006bfe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2210      	movs	r2, #16
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f002 fc83 	bl	8009502 <SDMMC_CmdWriteSingleBlock>
 8006bfc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a87      	ldr	r2, [pc, #540]	; (8006e28 <HAL_SD_WriteBlocks+0x308>)
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c12:	431a      	orrs	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e0f9      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006c2e:	e065      	b.n	8006cfc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d040      	beq.n	8006cc0 <HAL_SD_WriteBlocks+0x1a0>
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d03d      	beq.n	8006cc0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c44:	2300      	movs	r3, #0
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40
 8006c48:	e037      	b.n	8006cba <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	3301      	adds	r3, #1
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	021a      	lsls	r2, r3, #8
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c70:	3b01      	subs	r3, #1
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	041a      	lsls	r2, r3, #16
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	3301      	adds	r3, #1
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	061a      	lsls	r2, r3, #24
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f107 0214 	add.w	r2, r7, #20
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f002 fb1d 	bl	80092ee <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbc:	2b07      	cmp	r3, #7
 8006cbe:	d9c4      	bls.n	8006c4a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006cc0:	f7fc fa36 	bl	8003130 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d902      	bls.n	8006cd6 <HAL_SD_WriteBlocks+0x1b6>
 8006cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d112      	bne.n	8006cfc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a53      	ldr	r2, [pc, #332]	; (8006e28 <HAL_SD_WriteBlocks+0x308>)
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e090      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d092      	beq.n	8006c30 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d022      	beq.n	8006d5e <HAL_SD_WriteBlocks+0x23e>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d91f      	bls.n	8006d5e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d01b      	beq.n	8006d5e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f002 fc2e 	bl	800958c <SDMMC_CmdStopTransfer>
 8006d30:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d012      	beq.n	8006d5e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <HAL_SD_WriteBlocks+0x308>)
 8006d3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d46:	431a      	orrs	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e05f      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a2d      	ldr	r2, [pc, #180]	; (8006e28 <HAL_SD_WriteBlocks+0x308>)
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	f043 0208 	orr.w	r2, r3, #8
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e045      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d012      	beq.n	8006dc6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a20      	ldr	r2, [pc, #128]	; (8006e28 <HAL_SD_WriteBlocks+0x308>)
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	f043 0202 	orr.w	r2, r3, #2
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e02b      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d012      	beq.n	8006dfa <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <HAL_SD_WriteBlocks+0x308>)
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	f043 0210 	orr.w	r2, r3, #16
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e011      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e006      	b.n	8006e1e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3748      	adds	r7, #72	; 0x48
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	004005ff 	.word	0x004005ff

08006e2c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3a:	0f9b      	lsrs	r3, r3, #30
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e46:	0e9b      	lsrs	r3, r3, #26
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e58:	0e1b      	lsrs	r3, r3, #24
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8c:	0d1b      	lsrs	r3, r3, #20
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e98:	0c1b      	lsrs	r3, r3, #16
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eaa:	0bdb      	lsrs	r3, r3, #15
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ebc:	0b9b      	lsrs	r3, r3, #14
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ece:	0b5b      	lsrs	r3, r3, #13
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee0:	0b1b      	lsrs	r3, r3, #12
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d163      	bne.n	8006fc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f00:	009a      	lsls	r2, r3, #2
 8006f02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f06:	4013      	ands	r3, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006f0c:	0f92      	lsrs	r2, r2, #30
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f18:	0edb      	lsrs	r3, r3, #27
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f2a:	0e1b      	lsrs	r3, r3, #24
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f3c:	0d5b      	lsrs	r3, r3, #21
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f4e:	0c9b      	lsrs	r3, r3, #18
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f60:	0bdb      	lsrs	r3, r3, #15
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	7e1b      	ldrb	r3, [r3, #24]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	3302      	adds	r3, #2
 8006f84:	2201      	movs	r2, #1
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f8e:	fb03 f202 	mul.w	r2, r3, r2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	7a1b      	ldrb	r3, [r3, #8]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	409a      	lsls	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006fb0:	0a52      	lsrs	r2, r2, #9
 8006fb2:	fb03 f202 	mul.w	r2, r3, r2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fc0:	661a      	str	r2, [r3, #96]	; 0x60
 8006fc2:	e031      	b.n	8007028 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d11d      	bne.n	8007008 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	029a      	lsls	r2, r3, #10
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	661a      	str	r2, [r3, #96]	; 0x60
 8007006:	e00f      	b.n	8007028 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a58      	ldr	r2, [pc, #352]	; (8007170 <HAL_SD_GetCardCSD+0x344>)
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e09d      	b.n	8007164 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702c:	0b9b      	lsrs	r3, r3, #14
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	09db      	lsrs	r3, r3, #7
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007056:	b2da      	uxtb	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	0fdb      	lsrs	r3, r3, #31
 8007062:	b2da      	uxtb	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	0f5b      	lsrs	r3, r3, #29
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	b2da      	uxtb	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	0e9b      	lsrs	r3, r3, #26
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	b2da      	uxtb	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	0d9b      	lsrs	r3, r3, #22
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	b2da      	uxtb	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	0d5b      	lsrs	r3, r3, #21
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	0bdb      	lsrs	r3, r3, #15
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	0b9b      	lsrs	r3, r3, #14
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	0b5b      	lsrs	r3, r3, #13
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	b2da      	uxtb	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	0b1b      	lsrs	r3, r3, #12
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	b2da      	uxtb	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	0a9b      	lsrs	r3, r3, #10
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	b2da      	uxtb	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	b2da      	uxtb	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007152:	b2da      	uxtb	r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	004005ff 	.word	0x004005ff

08007174 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f970 	bl	80074c4 <SD_SendStatus>
 80071e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	0a5b      	lsrs	r3, r3, #9
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007202:	693b      	ldr	r3, [r7, #16]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b094      	sub	sp, #80	; 0x50
 8007210:	af04      	add	r7, sp, #16
 8007212:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007214:	2301      	movs	r3, #1
 8007216:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f002 f886 	bl	800932e <SDMMC_GetPowerState>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800722c:	e0b8      	b.n	80073a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	2b03      	cmp	r3, #3
 8007234:	d02f      	beq.n	8007296 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f002 fa6d 	bl	800971a <SDMMC_CmdSendCID>
 8007240:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <SD_InitCard+0x40>
    {
      return errorstate;
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	e0a9      	b.n	80073a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f002 f8b0 	bl	80093b8 <SDMMC_GetResponse>
 8007258:	4602      	mov	r2, r0
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2104      	movs	r1, #4
 8007264:	4618      	mov	r0, r3
 8007266:	f002 f8a7 	bl	80093b8 <SDMMC_GetResponse>
 800726a:	4602      	mov	r2, r0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2108      	movs	r1, #8
 8007276:	4618      	mov	r0, r3
 8007278:	f002 f89e 	bl	80093b8 <SDMMC_GetResponse>
 800727c:	4602      	mov	r2, r0
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	210c      	movs	r1, #12
 8007288:	4618      	mov	r0, r3
 800728a:	f002 f895 	bl	80093b8 <SDMMC_GetResponse>
 800728e:	4602      	mov	r2, r0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	2b03      	cmp	r3, #3
 800729c:	d00d      	beq.n	80072ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f107 020e 	add.w	r2, r7, #14
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f002 fa73 	bl	8009794 <SDMMC_CmdSetRelAdd>
 80072ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80072b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <SD_InitCard+0xae>
    {
      return errorstate;
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	e072      	b.n	80073a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d036      	beq.n	8007330 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80072c2:	89fb      	ldrh	r3, [r7, #14]
 80072c4:	461a      	mov	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f002 fa3d 	bl	8009756 <SDMMC_CmdSendCSD>
 80072dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80072de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80072e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e6:	e05b      	b.n	80073a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2100      	movs	r1, #0
 80072ee:	4618      	mov	r0, r3
 80072f0:	f002 f862 	bl	80093b8 <SDMMC_GetResponse>
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2104      	movs	r1, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f002 f859 	bl	80093b8 <SDMMC_GetResponse>
 8007306:	4602      	mov	r2, r0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2108      	movs	r1, #8
 8007312:	4618      	mov	r0, r3
 8007314:	f002 f850 	bl	80093b8 <SDMMC_GetResponse>
 8007318:	4602      	mov	r2, r0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	210c      	movs	r1, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f002 f847 	bl	80093b8 <SDMMC_GetResponse>
 800732a:	4602      	mov	r2, r0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2104      	movs	r1, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f002 f83e 	bl	80093b8 <SDMMC_GetResponse>
 800733c:	4603      	mov	r3, r0
 800733e:	0d1a      	lsrs	r2, r3, #20
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fd6e 	bl	8006e2c <HAL_SD_GetCardCSD>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800735a:	e021      	b.n	80073a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6819      	ldr	r1, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	2200      	movs	r2, #0
 8007368:	461c      	mov	r4, r3
 800736a:	4615      	mov	r5, r2
 800736c:	4622      	mov	r2, r4
 800736e:	462b      	mov	r3, r5
 8007370:	4608      	mov	r0, r1
 8007372:	f002 f92d 	bl	80095d0 <SDMMC_CmdSelDesel>
 8007376:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <SD_InitCard+0x176>
  {
    return errorstate;
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	e00e      	b.n	80073a0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681d      	ldr	r5, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	466c      	mov	r4, sp
 800738a:	f103 0210 	add.w	r2, r3, #16
 800738e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007394:	3304      	adds	r3, #4
 8007396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007398:	4628      	mov	r0, r5
 800739a:	f001 ff6e 	bl	800927a <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3740      	adds	r7, #64	; 0x40
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bdb0      	pop	{r4, r5, r7, pc}

080073a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f002 f928 	bl	8009616 <SDMMC_CmdGoIdleState>
 80073c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	e072      	b.n	80074b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f002 f93b 	bl	8009652 <SDMMC_CmdOperCond>
 80073dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f002 f911 	bl	8009616 <SDMMC_CmdGoIdleState>
 80073f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <SD_PowerON+0x5e>
    {
      return errorstate;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	e05b      	b.n	80074b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740a:	2b01      	cmp	r3, #1
 800740c:	d137      	bne.n	800747e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f002 f93b 	bl	8009690 <SDMMC_CmdAppCommand>
 800741a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d02d      	beq.n	800747e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007422:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007426:	e047      	b.n	80074b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f002 f92e 	bl	8009690 <SDMMC_CmdAppCommand>
 8007434:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <SD_PowerON+0x98>
    {
      return errorstate;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e03b      	b.n	80074b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	491e      	ldr	r1, [pc, #120]	; (80074c0 <SD_PowerON+0x118>)
 8007446:	4618      	mov	r0, r3
 8007448:	f002 f944 	bl	80096d4 <SDMMC_CmdAppOperCommand>
 800744c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007458:	e02e      	b.n	80074b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2100      	movs	r1, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f001 ffa9 	bl	80093b8 <SDMMC_GetResponse>
 8007466:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	0fdb      	lsrs	r3, r3, #31
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <SD_PowerON+0xcc>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <SD_PowerON+0xce>
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]

    count++;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	3301      	adds	r3, #1
 800747c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007484:	4293      	cmp	r3, r2
 8007486:	d802      	bhi.n	800748e <SD_PowerON+0xe6>
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0cc      	beq.n	8007428 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007494:	4293      	cmp	r3, r2
 8007496:	d902      	bls.n	800749e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800749c:	e00c      	b.n	80074b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44
 80074ae:	e002      	b.n	80074b6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	c1100000 	.word	0xc1100000

080074c4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80074d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074d8:	e018      	b.n	800750c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f002 f975 	bl	80097d6 <SDMMC_CmdSendStatus>
 80074ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	e009      	b.n	800750c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 ff5a 	bl	80093b8 <SDMMC_GetResponse>
 8007504:	4602      	mov	r2, r0
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e095      	b.n	8007652 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b00      	cmp	r3, #0
 800752c:	d108      	bne.n	8007540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007536:	d009      	beq.n	800754c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	61da      	str	r2, [r3, #28]
 800753e:	e005      	b.n	800754c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fb fa88 	bl	8002a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007582:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800758c:	d902      	bls.n	8007594 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e002      	b.n	800759a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007598:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80075a2:	d007      	beq.n	80075b4 <HAL_SPI_Init+0xa0>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075ac:	d002      	beq.n	80075b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	ea42 0103 	orr.w	r1, r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	f003 0204 	and.w	r2, r3, #4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007630:	ea42 0103 	orr.w	r1, r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_SPI_Transmit+0x22>
 8007678:	2302      	movs	r3, #2
 800767a:	e158      	b.n	800792e <HAL_SPI_Transmit+0x2d4>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007684:	f7fb fd54 	bl	8003130 <HAL_GetTick>
 8007688:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800769a:	2302      	movs	r3, #2
 800769c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800769e:	e13d      	b.n	800791c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_SPI_Transmit+0x52>
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076b0:	e134      	b.n	800791c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2203      	movs	r2, #3
 80076b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fc:	d10f      	bne.n	800771e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800770c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800771c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d007      	beq.n	800773c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800773a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007744:	d94b      	bls.n	80077de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_SPI_Transmit+0xfa>
 800774e:	8afb      	ldrh	r3, [r7, #22]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d13e      	bne.n	80077d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	881a      	ldrh	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	1c9a      	adds	r2, r3, #2
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007778:	e02b      	b.n	80077d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	d112      	bne.n	80077ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	881a      	ldrh	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	1c9a      	adds	r2, r3, #2
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077ac:	e011      	b.n	80077d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ae:	f7fb fcbf 	bl	8003130 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d803      	bhi.n	80077c6 <HAL_SPI_Transmit+0x16c>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d102      	bne.n	80077cc <HAL_SPI_Transmit+0x172>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077d0:	e0a4      	b.n	800791c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1ce      	bne.n	800777a <HAL_SPI_Transmit+0x120>
 80077dc:	e07c      	b.n	80078d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_SPI_Transmit+0x192>
 80077e6:	8afb      	ldrh	r3, [r7, #22]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d170      	bne.n	80078ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d912      	bls.n	800781c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b02      	subs	r3, #2
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800781a:	e058      	b.n	80078ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	7812      	ldrb	r2, [r2, #0]
 8007828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007842:	e044      	b.n	80078ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d12b      	bne.n	80078aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d912      	bls.n	8007882 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	881a      	ldrh	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	1c9a      	adds	r2, r3, #2
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b02      	subs	r3, #2
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007880:	e025      	b.n	80078ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	330c      	adds	r3, #12
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078a8:	e011      	b.n	80078ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078aa:	f7fb fc41 	bl	8003130 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d803      	bhi.n	80078c2 <HAL_SPI_Transmit+0x268>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d102      	bne.n	80078c8 <HAL_SPI_Transmit+0x26e>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078cc:	e026      	b.n	800791c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1b5      	bne.n	8007844 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fce3 	bl	80082a8 <SPI_EndRxTxTransaction>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	77fb      	strb	r3, [r7, #31]
 8007918:	e000      	b.n	800791c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800791a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800792c:	7ffb      	ldrb	r3, [r7, #31]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3720      	adds	r7, #32
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b088      	sub	sp, #32
 800793a:	af02      	add	r7, sp, #8
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007952:	d112      	bne.n	800797a <HAL_SPI_Receive+0x44>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2204      	movs	r2, #4
 8007960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	4613      	mov	r3, r2
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 f910 	bl	8007b96 <HAL_SPI_TransmitReceive>
 8007976:	4603      	mov	r3, r0
 8007978:	e109      	b.n	8007b8e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_SPI_Receive+0x52>
 8007984:	2302      	movs	r3, #2
 8007986:	e102      	b.n	8007b8e <HAL_SPI_Receive+0x258>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007990:	f7fb fbce 	bl	8003130 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d002      	beq.n	80079a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
 80079a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079a6:	e0e9      	b.n	8007b7c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_SPI_Receive+0x7e>
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079b8:	e0e0      	b.n	8007b7c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2204      	movs	r2, #4
 80079be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	88fa      	ldrh	r2, [r7, #6]
 80079da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a04:	d908      	bls.n	8007a18 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	e007      	b.n	8007a28 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a26:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a30:	d10f      	bne.n	8007a52 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d007      	beq.n	8007a70 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a78:	d867      	bhi.n	8007b4a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a7a:	e030      	b.n	8007ade <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d117      	bne.n	8007aba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f103 020c 	add.w	r2, r3, #12
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007ab8:	e011      	b.n	8007ade <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aba:	f7fb fb39 	bl	8003130 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d803      	bhi.n	8007ad2 <HAL_SPI_Receive+0x19c>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d102      	bne.n	8007ad8 <HAL_SPI_Receive+0x1a2>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007adc:	e04e      	b.n	8007b7c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1c8      	bne.n	8007a7c <HAL_SPI_Receive+0x146>
 8007aea:	e034      	b.n	8007b56 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d115      	bne.n	8007b26 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	b292      	uxth	r2, r2
 8007b06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	1c9a      	adds	r2, r3, #2
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b24:	e011      	b.n	8007b4a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b26:	f7fb fb03 	bl	8003130 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d803      	bhi.n	8007b3e <HAL_SPI_Receive+0x208>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d102      	bne.n	8007b44 <HAL_SPI_Receive+0x20e>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b48:	e018      	b.n	8007b7c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1ca      	bne.n	8007aec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 fb4c 	bl	80081f8 <SPI_EndRxTransaction>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
 8007b78:	e000      	b.n	8007b7c <HAL_SPI_Receive+0x246>
  }

error :
 8007b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b08a      	sub	sp, #40	; 0x28
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_SPI_TransmitReceive+0x26>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e1fb      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x41e>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bc4:	f7fb fab4 	bl	8003130 <HAL_GetTick>
 8007bc8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bd0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007bd8:	887b      	ldrh	r3, [r7, #2]
 8007bda:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007bdc:	887b      	ldrh	r3, [r7, #2]
 8007bde:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007be0:	7efb      	ldrb	r3, [r7, #27]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d00e      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x6e>
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bec:	d106      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d102      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x66>
 8007bf6:	7efb      	ldrb	r3, [r7, #27]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d003      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c02:	e1cd      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x80>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x80>
 8007c10:	887b      	ldrh	r3, [r7, #2]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d103      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c1c:	e1c0      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d003      	beq.n	8007c32 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	887a      	ldrh	r2, [r7, #2]
 8007c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	887a      	ldrh	r2, [r7, #2]
 8007c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	887a      	ldrh	r2, [r7, #2]
 8007c5e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c74:	d802      	bhi.n	8007c7c <HAL_SPI_TransmitReceive+0xe6>
 8007c76:	8a3b      	ldrh	r3, [r7, #16]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d908      	bls.n	8007c8e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c8a:	605a      	str	r2, [r3, #4]
 8007c8c:	e007      	b.n	8007c9e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b40      	cmp	r3, #64	; 0x40
 8007caa:	d007      	beq.n	8007cbc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cc4:	d97c      	bls.n	8007dc0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_SPI_TransmitReceive+0x13e>
 8007cce:	8a7b      	ldrh	r3, [r7, #18]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d169      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	881a      	ldrh	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	1c9a      	adds	r2, r3, #2
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf8:	e056      	b.n	8007da8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d11b      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x1aa>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d016      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x1aa>
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d113      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	1c9a      	adds	r2, r3, #2
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d11c      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x1f2>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d016      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	b292      	uxth	r2, r2
 8007d66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	1c9a      	adds	r2, r3, #2
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d84:	2301      	movs	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d88:	f7fb f9d2 	bl	8003130 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d807      	bhi.n	8007da8 <HAL_SPI_TransmitReceive+0x212>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d003      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007da6:	e0fb      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1a3      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x164>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d19d      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x164>
 8007dbe:	e0df      	b.n	8007f80 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x23a>
 8007dc8:	8a7b      	ldrh	r3, [r7, #18]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	f040 80cb 	bne.w	8007f66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d912      	bls.n	8007e00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	1c9a      	adds	r2, r3, #2
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b02      	subs	r3, #2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dfe:	e0b2      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e26:	e09e      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d134      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x30a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02f      	beq.n	8007ea0 <HAL_SPI_TransmitReceive+0x30a>
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d12c      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d912      	bls.n	8007e76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	881a      	ldrh	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	1c9a      	adds	r2, r3, #2
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b02      	subs	r3, #2
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e74:	e012      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d148      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x3aa>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d042      	beq.n	8007f40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d923      	bls.n	8007f0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	1c9a      	adds	r2, r3, #2
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b02      	subs	r3, #2
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d81f      	bhi.n	8007f3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f0a:	605a      	str	r2, [r3, #4]
 8007f0c:	e016      	b.n	8007f3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f103 020c 	add.w	r2, r3, #12
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	7812      	ldrb	r2, [r2, #0]
 8007f1c:	b2d2      	uxtb	r2, r2
 8007f1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f40:	f7fb f8f6 	bl	8003130 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d803      	bhi.n	8007f58 <HAL_SPI_TransmitReceive+0x3c2>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d102      	bne.n	8007f5e <HAL_SPI_TransmitReceive+0x3c8>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f64:	e01c      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f47f af5b 	bne.w	8007e28 <HAL_SPI_TransmitReceive+0x292>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f47f af54 	bne.w	8007e28 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f98f 	bl	80082a8 <SPI_EndRxTxTransaction>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d006      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	661a      	str	r2, [r3, #96]	; 0x60
 8007f9c:	e000      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3728      	adds	r7, #40	; 0x28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fcc:	f7fb f8b0 	bl	8003130 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4413      	add	r3, r2
 8007fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fdc:	f7fb f8a8 	bl	8003130 <HAL_GetTick>
 8007fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fe2:	4b39      	ldr	r3, [pc, #228]	; (80080c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	015b      	lsls	r3, r3, #5
 8007fe8:	0d1b      	lsrs	r3, r3, #20
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	fb02 f303 	mul.w	r3, r2, r3
 8007ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ff2:	e054      	b.n	800809e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d050      	beq.n	800809e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ffc:	f7fb f898 	bl	8003130 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	429a      	cmp	r2, r3
 800800a:	d902      	bls.n	8008012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d13d      	bne.n	800808e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800802a:	d111      	bne.n	8008050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008034:	d004      	beq.n	8008040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d107      	bne.n	8008050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008058:	d10f      	bne.n	800807a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e017      	b.n	80080be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	3b01      	subs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4013      	ands	r3, r2
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	bf0c      	ite	eq
 80080ae:	2301      	moveq	r3, #1
 80080b0:	2300      	movne	r3, #0
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	79fb      	ldrb	r3, [r7, #7]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d19b      	bne.n	8007ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3720      	adds	r7, #32
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000008 	.word	0x20000008

080080cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	; 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080de:	f7fb f827 	bl	8003130 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	4413      	add	r3, r2
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80080ee:	f7fb f81f 	bl	8003130 <HAL_GetTick>
 80080f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80080fc:	4b3d      	ldr	r3, [pc, #244]	; (80081f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	00da      	lsls	r2, r3, #3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	0d1b      	lsrs	r3, r3, #20
 800810c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810e:	fb02 f303 	mul.w	r3, r2, r3
 8008112:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008114:	e060      	b.n	80081d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800811c:	d107      	bne.n	800812e <SPI_WaitFifoStateUntilTimeout+0x62>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800812c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d050      	beq.n	80081d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008136:	f7fa fffb 	bl	8003130 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008142:	429a      	cmp	r2, r3
 8008144:	d902      	bls.n	800814c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d13d      	bne.n	80081c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800815a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008164:	d111      	bne.n	800818a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816e:	d004      	beq.n	800817a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d107      	bne.n	800818a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008192:	d10f      	bne.n	80081b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e010      	b.n	80081ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689a      	ldr	r2, [r3, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4013      	ands	r3, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d196      	bne.n	8008116 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3728      	adds	r7, #40	; 0x28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000008 	.word	0x20000008

080081f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800820c:	d111      	bne.n	8008232 <SPI_EndRxTransaction+0x3a>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008216:	d004      	beq.n	8008222 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008220:	d107      	bne.n	8008232 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008230:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	2180      	movs	r1, #128	; 0x80
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff febd 	bl	8007fbc <SPI_WaitFlagStateUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	f043 0220 	orr.w	r2, r3, #32
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e023      	b.n	80082a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008260:	d11d      	bne.n	800829e <SPI_EndRxTransaction+0xa6>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826a:	d004      	beq.n	8008276 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008274:	d113      	bne.n	800829e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff ff22 	bl	80080cc <SPI_WaitFifoStateUntilTimeout>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e000      	b.n	80082a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7ff ff03 	bl	80080cc <SPI_WaitFifoStateUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d0:	f043 0220 	orr.w	r2, r3, #32
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e027      	b.n	800832c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	2180      	movs	r1, #128	; 0x80
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fe68 	bl	8007fbc <SPI_WaitFlagStateUntilTimeout>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e014      	b.n	800832c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff fedc 	bl	80080cc <SPI_WaitFifoStateUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e000      	b.n	800832c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e049      	b.n	80083da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fa fc8e 	bl	8002c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f000 fa14 	bl	80087a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6a1a      	ldr	r2, [r3, #32]
 80083f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80083f4:	4013      	ands	r3, r2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10f      	bne.n	800841a <HAL_TIM_Base_Stop+0x38>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6a1a      	ldr	r2, [r3, #32]
 8008400:	f240 4344 	movw	r3, #1092	; 0x444
 8008404:	4013      	ands	r3, r2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d107      	bne.n	800841a <HAL_TIM_Base_Stop+0x38>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d001      	beq.n	8008448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e04f      	b.n	80084e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a23      	ldr	r2, [pc, #140]	; (80084f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d01d      	beq.n	80084a6 <HAL_TIM_Base_Start_IT+0x76>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008472:	d018      	beq.n	80084a6 <HAL_TIM_Base_Start_IT+0x76>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1f      	ldr	r2, [pc, #124]	; (80084f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d013      	beq.n	80084a6 <HAL_TIM_Base_Start_IT+0x76>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a1e      	ldr	r2, [pc, #120]	; (80084fc <HAL_TIM_Base_Start_IT+0xcc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00e      	beq.n	80084a6 <HAL_TIM_Base_Start_IT+0x76>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1c      	ldr	r2, [pc, #112]	; (8008500 <HAL_TIM_Base_Start_IT+0xd0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d009      	beq.n	80084a6 <HAL_TIM_Base_Start_IT+0x76>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1b      	ldr	r2, [pc, #108]	; (8008504 <HAL_TIM_Base_Start_IT+0xd4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <HAL_TIM_Base_Start_IT+0x76>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a19      	ldr	r2, [pc, #100]	; (8008508 <HAL_TIM_Base_Start_IT+0xd8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d115      	bne.n	80084d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	4b17      	ldr	r3, [pc, #92]	; (800850c <HAL_TIM_Base_Start_IT+0xdc>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b06      	cmp	r3, #6
 80084b6:	d015      	beq.n	80084e4 <HAL_TIM_Base_Start_IT+0xb4>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084be:	d011      	beq.n	80084e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0201 	orr.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d0:	e008      	b.n	80084e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0201 	orr.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e000      	b.n	80084e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	40012c00 	.word	0x40012c00
 80084f8:	40000400 	.word	0x40000400
 80084fc:	40000800 	.word	0x40000800
 8008500:	40000c00 	.word	0x40000c00
 8008504:	40013400 	.word	0x40013400
 8008508:	40014000 	.word	0x40014000
 800850c:	00010007 	.word	0x00010007

08008510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b02      	cmp	r3, #2
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b02      	cmp	r3, #2
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0202 	mvn.w	r2, #2
 800853c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f905 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8f7 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f908 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b04      	cmp	r3, #4
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b04      	cmp	r3, #4
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0204 	mvn.w	r2, #4
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8db 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8cd 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f8de 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b08      	cmp	r3, #8
 80085cc:	d122      	bne.n	8008614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d11b      	bne.n	8008614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0208 	mvn.w	r2, #8
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2204      	movs	r2, #4
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8b1 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f8a3 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8b4 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	2b10      	cmp	r3, #16
 8008620:	d122      	bne.n	8008668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0310 	and.w	r3, r3, #16
 800862c:	2b10      	cmp	r3, #16
 800862e:	d11b      	bne.n	8008668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0210 	mvn.w	r2, #16
 8008638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2208      	movs	r2, #8
 800863e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f887 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008654:	e005      	b.n	8008662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f879 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f88a 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b01      	cmp	r3, #1
 8008674:	d10e      	bne.n	8008694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b01      	cmp	r3, #1
 8008682:	d107      	bne.n	8008694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0201 	mvn.w	r2, #1
 800868c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7f9 fe00 	bl	8002294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b80      	cmp	r3, #128	; 0x80
 80086a0:	d10e      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d107      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f914 	bl	80088e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ce:	d10e      	bne.n	80086ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d107      	bne.n	80086ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f907 	bl	80088fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d10e      	bne.n	800871a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d107      	bne.n	800871a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f838 	bl	800878a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b20      	cmp	r3, #32
 8008726:	d10e      	bne.n	8008746 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b20      	cmp	r3, #32
 8008734:	d107      	bne.n	8008746 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f06f 0220 	mvn.w	r2, #32
 800873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8c7 	bl	80088d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a40      	ldr	r2, [pc, #256]	; (80088b4 <TIM_Base_SetConfig+0x114>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087be:	d00f      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a3d      	ldr	r2, [pc, #244]	; (80088b8 <TIM_Base_SetConfig+0x118>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00b      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3c      	ldr	r2, [pc, #240]	; (80088bc <TIM_Base_SetConfig+0x11c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a3b      	ldr	r2, [pc, #236]	; (80088c0 <TIM_Base_SetConfig+0x120>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a3a      	ldr	r2, [pc, #232]	; (80088c4 <TIM_Base_SetConfig+0x124>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d108      	bne.n	80087f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2f      	ldr	r2, [pc, #188]	; (80088b4 <TIM_Base_SetConfig+0x114>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d01f      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008800:	d01b      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2c      	ldr	r2, [pc, #176]	; (80088b8 <TIM_Base_SetConfig+0x118>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d017      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2b      	ldr	r2, [pc, #172]	; (80088bc <TIM_Base_SetConfig+0x11c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d013      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <TIM_Base_SetConfig+0x120>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00f      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a29      	ldr	r2, [pc, #164]	; (80088c4 <TIM_Base_SetConfig+0x124>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00b      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a28      	ldr	r2, [pc, #160]	; (80088c8 <TIM_Base_SetConfig+0x128>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d007      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a27      	ldr	r2, [pc, #156]	; (80088cc <TIM_Base_SetConfig+0x12c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d003      	beq.n	800883a <TIM_Base_SetConfig+0x9a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a26      	ldr	r2, [pc, #152]	; (80088d0 <TIM_Base_SetConfig+0x130>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d108      	bne.n	800884c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <TIM_Base_SetConfig+0x114>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00f      	beq.n	8008898 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <TIM_Base_SetConfig+0x124>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00b      	beq.n	8008898 <TIM_Base_SetConfig+0xf8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a11      	ldr	r2, [pc, #68]	; (80088c8 <TIM_Base_SetConfig+0x128>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d007      	beq.n	8008898 <TIM_Base_SetConfig+0xf8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a10      	ldr	r2, [pc, #64]	; (80088cc <TIM_Base_SetConfig+0x12c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d003      	beq.n	8008898 <TIM_Base_SetConfig+0xf8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <TIM_Base_SetConfig+0x130>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d103      	bne.n	80088a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	615a      	str	r2, [r3, #20]
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00
 80088c4:	40013400 	.word	0x40013400
 80088c8:	40014000 	.word	0x40014000
 80088cc:	40014400 	.word	0x40014400
 80088d0:	40014800 	.word	0x40014800

080088d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e040      	b.n	80089a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fa f9c8 	bl	8002cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2224      	movs	r2, #36	; 0x24
 800893c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0201 	bic.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f82c 	bl	80089ac <UART_SetConfig>
 8008954:	4603      	mov	r3, r0
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e022      	b.n	80089a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fad8 	bl	8008f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800897a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800898a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fb5f 	bl	8009060 <UART_CheckIdleState>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089b0:	b08a      	sub	sp, #40	; 0x28
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	431a      	orrs	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4ba4      	ldr	r3, [pc, #656]	; (8008c6c <UART_SetConfig+0x2c0>)
 80089dc:	4013      	ands	r3, r2
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a99      	ldr	r2, [pc, #612]	; (8008c70 <UART_SetConfig+0x2c4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a14:	4313      	orrs	r3, r2
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a90      	ldr	r2, [pc, #576]	; (8008c74 <UART_SetConfig+0x2c8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d126      	bne.n	8008a84 <UART_SetConfig+0xd8>
 8008a36:	4b90      	ldr	r3, [pc, #576]	; (8008c78 <UART_SetConfig+0x2cc>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d81b      	bhi.n	8008a7c <UART_SetConfig+0xd0>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0xa0>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a6d 	.word	0x08008a6d
 8008a54:	08008a65 	.word	0x08008a65
 8008a58:	08008a75 	.word	0x08008a75
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a62:	e116      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008a64:	2302      	movs	r3, #2
 8008a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a6a:	e112      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a72:	e10e      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008a74:	2308      	movs	r3, #8
 8008a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a7a:	e10a      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a82:	e106      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a7c      	ldr	r2, [pc, #496]	; (8008c7c <UART_SetConfig+0x2d0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d138      	bne.n	8008b00 <UART_SetConfig+0x154>
 8008a8e:	4b7a      	ldr	r3, [pc, #488]	; (8008c78 <UART_SetConfig+0x2cc>)
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a94:	f003 030c 	and.w	r3, r3, #12
 8008a98:	2b0c      	cmp	r3, #12
 8008a9a:	d82d      	bhi.n	8008af8 <UART_SetConfig+0x14c>
 8008a9c:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <UART_SetConfig+0xf8>)
 8008a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa2:	bf00      	nop
 8008aa4:	08008ad9 	.word	0x08008ad9
 8008aa8:	08008af9 	.word	0x08008af9
 8008aac:	08008af9 	.word	0x08008af9
 8008ab0:	08008af9 	.word	0x08008af9
 8008ab4:	08008ae9 	.word	0x08008ae9
 8008ab8:	08008af9 	.word	0x08008af9
 8008abc:	08008af9 	.word	0x08008af9
 8008ac0:	08008af9 	.word	0x08008af9
 8008ac4:	08008ae1 	.word	0x08008ae1
 8008ac8:	08008af9 	.word	0x08008af9
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008af1 	.word	0x08008af1
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ade:	e0d8      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ae6:	e0d4      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008ae8:	2304      	movs	r3, #4
 8008aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008aee:	e0d0      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008af0:	2308      	movs	r3, #8
 8008af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008af6:	e0cc      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008af8:	2310      	movs	r3, #16
 8008afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008afe:	e0c8      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a5e      	ldr	r2, [pc, #376]	; (8008c80 <UART_SetConfig+0x2d4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d125      	bne.n	8008b56 <UART_SetConfig+0x1aa>
 8008b0a:	4b5b      	ldr	r3, [pc, #364]	; (8008c78 <UART_SetConfig+0x2cc>)
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b14:	2b30      	cmp	r3, #48	; 0x30
 8008b16:	d016      	beq.n	8008b46 <UART_SetConfig+0x19a>
 8008b18:	2b30      	cmp	r3, #48	; 0x30
 8008b1a:	d818      	bhi.n	8008b4e <UART_SetConfig+0x1a2>
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d00a      	beq.n	8008b36 <UART_SetConfig+0x18a>
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d814      	bhi.n	8008b4e <UART_SetConfig+0x1a2>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <UART_SetConfig+0x182>
 8008b28:	2b10      	cmp	r3, #16
 8008b2a:	d008      	beq.n	8008b3e <UART_SetConfig+0x192>
 8008b2c:	e00f      	b.n	8008b4e <UART_SetConfig+0x1a2>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b34:	e0ad      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b36:	2302      	movs	r3, #2
 8008b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b3c:	e0a9      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b3e:	2304      	movs	r3, #4
 8008b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b44:	e0a5      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b46:	2308      	movs	r3, #8
 8008b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b4c:	e0a1      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b4e:	2310      	movs	r3, #16
 8008b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b54:	e09d      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a4a      	ldr	r2, [pc, #296]	; (8008c84 <UART_SetConfig+0x2d8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d125      	bne.n	8008bac <UART_SetConfig+0x200>
 8008b60:	4b45      	ldr	r3, [pc, #276]	; (8008c78 <UART_SetConfig+0x2cc>)
 8008b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b6c:	d016      	beq.n	8008b9c <UART_SetConfig+0x1f0>
 8008b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b70:	d818      	bhi.n	8008ba4 <UART_SetConfig+0x1f8>
 8008b72:	2b80      	cmp	r3, #128	; 0x80
 8008b74:	d00a      	beq.n	8008b8c <UART_SetConfig+0x1e0>
 8008b76:	2b80      	cmp	r3, #128	; 0x80
 8008b78:	d814      	bhi.n	8008ba4 <UART_SetConfig+0x1f8>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <UART_SetConfig+0x1d8>
 8008b7e:	2b40      	cmp	r3, #64	; 0x40
 8008b80:	d008      	beq.n	8008b94 <UART_SetConfig+0x1e8>
 8008b82:	e00f      	b.n	8008ba4 <UART_SetConfig+0x1f8>
 8008b84:	2300      	movs	r3, #0
 8008b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b8a:	e082      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b92:	e07e      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b94:	2304      	movs	r3, #4
 8008b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b9a:	e07a      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ba2:	e076      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008baa:	e072      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a35      	ldr	r2, [pc, #212]	; (8008c88 <UART_SetConfig+0x2dc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d12a      	bne.n	8008c0c <UART_SetConfig+0x260>
 8008bb6:	4b30      	ldr	r3, [pc, #192]	; (8008c78 <UART_SetConfig+0x2cc>)
 8008bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bc4:	d01a      	beq.n	8008bfc <UART_SetConfig+0x250>
 8008bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bca:	d81b      	bhi.n	8008c04 <UART_SetConfig+0x258>
 8008bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd0:	d00c      	beq.n	8008bec <UART_SetConfig+0x240>
 8008bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd6:	d815      	bhi.n	8008c04 <UART_SetConfig+0x258>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <UART_SetConfig+0x238>
 8008bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be0:	d008      	beq.n	8008bf4 <UART_SetConfig+0x248>
 8008be2:	e00f      	b.n	8008c04 <UART_SetConfig+0x258>
 8008be4:	2300      	movs	r3, #0
 8008be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bea:	e052      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008bec:	2302      	movs	r3, #2
 8008bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf2:	e04e      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bfa:	e04a      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c02:	e046      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c0a:	e042      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a17      	ldr	r2, [pc, #92]	; (8008c70 <UART_SetConfig+0x2c4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d13a      	bne.n	8008c8c <UART_SetConfig+0x2e0>
 8008c16:	4b18      	ldr	r3, [pc, #96]	; (8008c78 <UART_SetConfig+0x2cc>)
 8008c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c24:	d01a      	beq.n	8008c5c <UART_SetConfig+0x2b0>
 8008c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c2a:	d81b      	bhi.n	8008c64 <UART_SetConfig+0x2b8>
 8008c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c30:	d00c      	beq.n	8008c4c <UART_SetConfig+0x2a0>
 8008c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c36:	d815      	bhi.n	8008c64 <UART_SetConfig+0x2b8>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <UART_SetConfig+0x298>
 8008c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c40:	d008      	beq.n	8008c54 <UART_SetConfig+0x2a8>
 8008c42:	e00f      	b.n	8008c64 <UART_SetConfig+0x2b8>
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c4a:	e022      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c52:	e01e      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c54:	2304      	movs	r3, #4
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5a:	e01a      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c62:	e016      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c64:	2310      	movs	r3, #16
 8008c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6a:	e012      	b.n	8008c92 <UART_SetConfig+0x2e6>
 8008c6c:	efff69f3 	.word	0xefff69f3
 8008c70:	40008000 	.word	0x40008000
 8008c74:	40013800 	.word	0x40013800
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	40004400 	.word	0x40004400
 8008c80:	40004800 	.word	0x40004800
 8008c84:	40004c00 	.word	0x40004c00
 8008c88:	40005000 	.word	0x40005000
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a9f      	ldr	r2, [pc, #636]	; (8008f14 <UART_SetConfig+0x568>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d17a      	bne.n	8008d92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d824      	bhi.n	8008cee <UART_SetConfig+0x342>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <UART_SetConfig+0x300>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cef 	.word	0x08008cef
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008cef 	.word	0x08008cef
 8008cbc:	08008cdf 	.word	0x08008cdf
 8008cc0:	08008cef 	.word	0x08008cef
 8008cc4:	08008cef 	.word	0x08008cef
 8008cc8:	08008cef 	.word	0x08008cef
 8008ccc:	08008ce7 	.word	0x08008ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd0:	f7fc f862 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8008cd4:	61f8      	str	r0, [r7, #28]
        break;
 8008cd6:	e010      	b.n	8008cfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cd8:	4b8f      	ldr	r3, [pc, #572]	; (8008f18 <UART_SetConfig+0x56c>)
 8008cda:	61fb      	str	r3, [r7, #28]
        break;
 8008cdc:	e00d      	b.n	8008cfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cde:	f7fb ffc3 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8008ce2:	61f8      	str	r0, [r7, #28]
        break;
 8008ce4:	e009      	b.n	8008cfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cea:	61fb      	str	r3, [r7, #28]
        break;
 8008cec:	e005      	b.n	8008cfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80fb 	beq.w	8008ef8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4413      	add	r3, r2
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d305      	bcc.n	8008d1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d903      	bls.n	8008d26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d24:	e0e8      	b.n	8008ef8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	461c      	mov	r4, r3
 8008d2c:	4615      	mov	r5, r2
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	022b      	lsls	r3, r5, #8
 8008d38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008d3c:	0222      	lsls	r2, r4, #8
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	6849      	ldr	r1, [r1, #4]
 8008d42:	0849      	lsrs	r1, r1, #1
 8008d44:	2000      	movs	r0, #0
 8008d46:	4688      	mov	r8, r1
 8008d48:	4681      	mov	r9, r0
 8008d4a:	eb12 0a08 	adds.w	sl, r2, r8
 8008d4e:	eb43 0b09 	adc.w	fp, r3, r9
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d60:	4650      	mov	r0, sl
 8008d62:	4659      	mov	r1, fp
 8008d64:	f7f7 ff20 	bl	8000ba8 <__aeabi_uldivmod>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d76:	d308      	bcc.n	8008d8a <UART_SetConfig+0x3de>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d7e:	d204      	bcs.n	8008d8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	60da      	str	r2, [r3, #12]
 8008d88:	e0b6      	b.n	8008ef8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d90:	e0b2      	b.n	8008ef8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9a:	d15e      	bne.n	8008e5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d828      	bhi.n	8008df6 <UART_SetConfig+0x44a>
 8008da4:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <UART_SetConfig+0x400>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008dd9 	.word	0x08008dd9
 8008db4:	08008de1 	.word	0x08008de1
 8008db8:	08008df7 	.word	0x08008df7
 8008dbc:	08008de7 	.word	0x08008de7
 8008dc0:	08008df7 	.word	0x08008df7
 8008dc4:	08008df7 	.word	0x08008df7
 8008dc8:	08008df7 	.word	0x08008df7
 8008dcc:	08008def 	.word	0x08008def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd0:	f7fb ffe2 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8008dd4:	61f8      	str	r0, [r7, #28]
        break;
 8008dd6:	e014      	b.n	8008e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dd8:	f7fb fff4 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8008ddc:	61f8      	str	r0, [r7, #28]
        break;
 8008dde:	e010      	b.n	8008e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008de0:	4b4d      	ldr	r3, [pc, #308]	; (8008f18 <UART_SetConfig+0x56c>)
 8008de2:	61fb      	str	r3, [r7, #28]
        break;
 8008de4:	e00d      	b.n	8008e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008de6:	f7fb ff3f 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8008dea:	61f8      	str	r0, [r7, #28]
        break;
 8008dec:	e009      	b.n	8008e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df2:	61fb      	str	r3, [r7, #28]
        break;
 8008df4:	e005      	b.n	8008e02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d077      	beq.n	8008ef8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	005a      	lsls	r2, r3, #1
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	085b      	lsrs	r3, r3, #1
 8008e12:	441a      	add	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b0f      	cmp	r3, #15
 8008e22:	d916      	bls.n	8008e52 <UART_SetConfig+0x4a6>
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e2a:	d212      	bcs.n	8008e52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f023 030f 	bic.w	r3, r3, #15
 8008e34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	085b      	lsrs	r3, r3, #1
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	8afb      	ldrh	r3, [r7, #22]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	8afa      	ldrh	r2, [r7, #22]
 8008e4e:	60da      	str	r2, [r3, #12]
 8008e50:	e052      	b.n	8008ef8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e58:	e04e      	b.n	8008ef8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e5e:	2b08      	cmp	r3, #8
 8008e60:	d827      	bhi.n	8008eb2 <UART_SetConfig+0x506>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <UART_SetConfig+0x4bc>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e95 	.word	0x08008e95
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	08008eb3 	.word	0x08008eb3
 8008e78:	08008ea3 	.word	0x08008ea3
 8008e7c:	08008eb3 	.word	0x08008eb3
 8008e80:	08008eb3 	.word	0x08008eb3
 8008e84:	08008eb3 	.word	0x08008eb3
 8008e88:	08008eab 	.word	0x08008eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e8c:	f7fb ff84 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8008e90:	61f8      	str	r0, [r7, #28]
        break;
 8008e92:	e014      	b.n	8008ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e94:	f7fb ff96 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8008e98:	61f8      	str	r0, [r7, #28]
        break;
 8008e9a:	e010      	b.n	8008ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <UART_SetConfig+0x56c>)
 8008e9e:	61fb      	str	r3, [r7, #28]
        break;
 8008ea0:	e00d      	b.n	8008ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ea2:	f7fb fee1 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8008ea6:	61f8      	str	r0, [r7, #28]
        break;
 8008ea8:	e009      	b.n	8008ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eae:	61fb      	str	r3, [r7, #28]
        break;
 8008eb0:	e005      	b.n	8008ebe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ebc:	bf00      	nop
    }

    if (pclk != 0U)
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d019      	beq.n	8008ef8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	085a      	lsrs	r2, r3, #1
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	441a      	add	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	d909      	bls.n	8008ef2 <UART_SetConfig+0x546>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee4:	d205      	bcs.n	8008ef2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60da      	str	r2, [r3, #12]
 8008ef0:	e002      	b.n	8008ef8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008f04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3728      	adds	r7, #40	; 0x28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f12:	bf00      	nop
 8008f14:	40008000 	.word	0x40008000
 8008f18:	00f42400 	.word	0x00f42400

08008f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01a      	beq.n	8009032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800901a:	d10a      	bne.n	8009032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	605a      	str	r2, [r3, #4]
  }
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af02      	add	r7, sp, #8
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009070:	f7fa f85e 	bl	8003130 <HAL_GetTick>
 8009074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b08      	cmp	r3, #8
 8009082:	d10e      	bne.n	80090a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f82d 	bl	80090f2 <UART_WaitOnFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e023      	b.n	80090ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d10e      	bne.n	80090ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f817 	bl	80090f2 <UART_WaitOnFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e00d      	b.n	80090ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2220      	movs	r2, #32
 80090d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b09c      	sub	sp, #112	; 0x70
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009102:	e0a5      	b.n	8009250 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	f000 80a1 	beq.w	8009250 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910e:	f7fa f80f 	bl	8003130 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800911a:	429a      	cmp	r2, r3
 800911c:	d302      	bcc.n	8009124 <UART_WaitOnFlagUntilTimeout+0x32>
 800911e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009120:	2b00      	cmp	r3, #0
 8009122:	d13e      	bne.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009138:	667b      	str	r3, [r7, #100]	; 0x64
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009144:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009148:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e6      	bne.n	8009124 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	663b      	str	r3, [r7, #96]	; 0x60
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009176:	64ba      	str	r2, [r7, #72]	; 0x48
 8009178:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800917c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e5      	bne.n	8009156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e067      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d04f      	beq.n	8009250 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091be:	d147      	bne.n	8009250 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e6      	bne.n	80091ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	613b      	str	r3, [r7, #16]
   return(result);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	66bb      	str	r3, [r7, #104]	; 0x68
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800921c:	623a      	str	r2, [r7, #32]
 800921e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	69f9      	ldr	r1, [r7, #28]
 8009222:	6a3a      	ldr	r2, [r7, #32]
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	61bb      	str	r3, [r7, #24]
   return(result);
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2220      	movs	r2, #32
 8009234:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e010      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69da      	ldr	r2, [r3, #28]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4013      	ands	r3, r2
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	429a      	cmp	r2, r3
 800925e:	bf0c      	ite	eq
 8009260:	2301      	moveq	r3, #1
 8009262:	2300      	movne	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	429a      	cmp	r2, r3
 800926c:	f43f af4a 	beq.w	8009104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3770      	adds	r7, #112	; 0x70
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800927a:	b084      	sub	sp, #16
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	f107 001c 	add.w	r0, r7, #28
 8009288:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009298:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800929c:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80092a0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80092a4:	431a      	orrs	r2, r3
             Init.ClockDiv
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80092a8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80092b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	b004      	add	sp, #16
 80092d2:	4770      	bx	lr

080092d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2203      	movs	r2, #3
 800931c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800931e:	2002      	movs	r0, #2
 8009320:	f7f9 ff12 	bl	8003148 <HAL_Delay>

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0303 	and.w	r3, r3, #3
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009368:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800936e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009374:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009384:	f023 030f 	bic.w	r3, r3, #15
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	b2db      	uxtb	r3, r3
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3314      	adds	r3, #20
 80093c6:	461a      	mov	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	4413      	add	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009404:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800940a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009410:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4313      	orrs	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009428:	2300      	movs	r3, #0

}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b088      	sub	sp, #32
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009444:	2310      	movs	r3, #16
 8009446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009448:	2340      	movs	r3, #64	; 0x40
 800944a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800944c:	2300      	movs	r3, #0
 800944e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff74 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009462:	f241 3288 	movw	r2, #5000	; 0x1388
 8009466:	2110      	movs	r1, #16
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f9d7 	bl	800981c <SDMMC_GetCmdResp1>
 800946e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009470:	69fb      	ldr	r3, [r7, #28]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b088      	sub	sp, #32
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009488:	2311      	movs	r3, #17
 800948a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800948c:	2340      	movs	r3, #64	; 0x40
 800948e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ff52 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80094a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094aa:	2111      	movs	r1, #17
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f9b5 	bl	800981c <SDMMC_GetCmdResp1>
 80094b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b4:	69fb      	ldr	r3, [r7, #28]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b088      	sub	sp, #32
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80094cc:	2312      	movs	r3, #18
 80094ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094d4:	2300      	movs	r3, #0
 80094d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094de:	f107 0308 	add.w	r3, r7, #8
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff30 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80094ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ee:	2112      	movs	r1, #18
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f993 	bl	800981c <SDMMC_GetCmdResp1>
 80094f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f8:	69fb      	ldr	r3, [r7, #28]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b088      	sub	sp, #32
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009510:	2318      	movs	r3, #24
 8009512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009514:	2340      	movs	r3, #64	; 0x40
 8009516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009518:	2300      	movs	r3, #0
 800951a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800951c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009522:	f107 0308 	add.w	r3, r7, #8
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff ff0e 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800952e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009532:	2118      	movs	r1, #24
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f971 	bl	800981c <SDMMC_GetCmdResp1>
 800953a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800953c:	69fb      	ldr	r3, [r7, #28]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b088      	sub	sp, #32
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009554:	2319      	movs	r3, #25
 8009556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009566:	f107 0308 	add.w	r3, r7, #8
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff feec 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009572:	f241 3288 	movw	r2, #5000	; 0x1388
 8009576:	2119      	movs	r1, #25
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f94f 	bl	800981c <SDMMC_GetCmdResp1>
 800957e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009580:	69fb      	ldr	r3, [r7, #28]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3720      	adds	r7, #32
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009598:	230c      	movs	r3, #12
 800959a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800959c:	2340      	movs	r3, #64	; 0x40
 800959e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a8:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095aa:	f107 0308 	add.w	r3, r7, #8
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff feca 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80095b6:	4a05      	ldr	r2, [pc, #20]	; (80095cc <SDMMC_CmdStopTransfer+0x40>)
 80095b8:	210c      	movs	r1, #12
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f92e 	bl	800981c <SDMMC_GetCmdResp1>
 80095c0:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80095c2:	69fb      	ldr	r3, [r7, #28]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3720      	adds	r7, #32
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	05f5e100 	.word	0x05f5e100

080095d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80095e0:	2307      	movs	r3, #7
 80095e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095e4:	2340      	movs	r3, #64	; 0x40
 80095e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095e8:	2300      	movs	r3, #0
 80095ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095f2:	f107 0310 	add.w	r3, r7, #16
 80095f6:	4619      	mov	r1, r3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fea6 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80095fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009602:	2107      	movs	r1, #7
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 f909 	bl	800981c <SDMMC_GetCmdResp1>
 800960a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800960e:	4618      	mov	r0, r3
 8009610:	3728      	adds	r7, #40	; 0x28
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b088      	sub	sp, #32
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800962e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009634:	f107 0308 	add.w	r3, r7, #8
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff fe85 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fb23 	bl	8009c8c <SDMMC_GetCmdError>
 8009646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009648:	69fb      	ldr	r3, [r7, #28]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b088      	sub	sp, #32
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800965a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800965e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009660:	2308      	movs	r3, #8
 8009662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009664:	2340      	movs	r3, #64	; 0x40
 8009666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009668:	2300      	movs	r3, #0
 800966a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800966c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009670:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009672:	f107 0308 	add.w	r3, r7, #8
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff fe66 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fab6 	bl	8009bf0 <SDMMC_GetCmdResp7>
 8009684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009686:	69fb      	ldr	r3, [r7, #28]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800969e:	2337      	movs	r3, #55	; 0x37
 80096a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096a2:	2340      	movs	r3, #64	; 0x40
 80096a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a6:	2300      	movs	r3, #0
 80096a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff fe47 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80096bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c0:	2137      	movs	r1, #55	; 0x37
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f8aa 	bl	800981c <SDMMC_GetCmdResp1>
 80096c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ca:	69fb      	ldr	r3, [r7, #28]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096e8:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80096ea:	2329      	movs	r3, #41	; 0x29
 80096ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096ee:	2340      	movs	r3, #64	; 0x40
 80096f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096fc:	f107 0308 	add.w	r3, r7, #8
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fe21 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f9bd 	bl	8009a88 <SDMMC_GetCmdResp3>
 800970e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009710:	69fb      	ldr	r3, [r7, #28]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b088      	sub	sp, #32
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009726:	2302      	movs	r3, #2
 8009728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800972a:	23c0      	movs	r3, #192	; 0xc0
 800972c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009738:	f107 0308 	add.w	r3, r7, #8
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fe03 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f957 	bl	80099f8 <SDMMC_GetCmdResp2>
 800974a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800974c:	69fb      	ldr	r3, [r7, #28]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3720      	adds	r7, #32
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b088      	sub	sp, #32
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009764:	2309      	movs	r3, #9
 8009766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009768:	23c0      	movs	r3, #192	; 0xc0
 800976a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009776:	f107 0308 	add.w	r3, r7, #8
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff fde4 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f938 	bl	80099f8 <SDMMC_GetCmdResp2>
 8009788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800978a:	69fb      	ldr	r3, [r7, #28]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80097a2:	2303      	movs	r3, #3
 80097a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097a6:	2340      	movs	r3, #64	; 0x40
 80097a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097aa:	2300      	movs	r3, #0
 80097ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff fdc5 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	2103      	movs	r1, #3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f99d 	bl	8009b04 <SDMMC_GetCmdResp6>
 80097ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097cc:	69fb      	ldr	r3, [r7, #28]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3720      	adds	r7, #32
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b088      	sub	sp, #32
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80097e4:	230d      	movs	r3, #13
 80097e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097f6:	f107 0308 	add.w	r3, r7, #8
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff fda4 	bl	800934a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009802:	f241 3288 	movw	r2, #5000	; 0x1388
 8009806:	210d      	movs	r1, #13
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f807 	bl	800981c <SDMMC_GetCmdResp1>
 800980e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009810:	69fb      	ldr	r3, [r7, #28]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	460b      	mov	r3, r1
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800982a:	4b70      	ldr	r3, [pc, #448]	; (80099ec <SDMMC_GetCmdResp1+0x1d0>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a70      	ldr	r2, [pc, #448]	; (80099f0 <SDMMC_GetCmdResp1+0x1d4>)
 8009830:	fba2 2303 	umull	r2, r3, r2, r3
 8009834:	0a5a      	lsrs	r2, r3, #9
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	fb02 f303 	mul.w	r3, r2, r3
 800983c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	1e5a      	subs	r2, r3, #1
 8009842:	61fa      	str	r2, [r7, #28]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800984c:	e0c9      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009852:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0ef      	beq.n	800983e <SDMMC_GetCmdResp1+0x22>
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1ea      	bne.n	800983e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d004      	beq.n	800987e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2204      	movs	r2, #4
 8009878:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800987a:	2304      	movs	r3, #4
 800987c:	e0b1      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009890:	2301      	movs	r3, #1
 8009892:	e0a6      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	22c5      	movs	r2, #197	; 0xc5
 8009898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff fd7f 	bl	800939e <SDMMC_GetCommandResponse>
 80098a0:	4603      	mov	r3, r0
 80098a2:	461a      	mov	r2, r3
 80098a4:	7afb      	ldrb	r3, [r7, #11]
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d001      	beq.n	80098ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e099      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098ae:	2100      	movs	r1, #0
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fd81 	bl	80093b8 <SDMMC_GetResponse>
 80098b6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	4b4e      	ldr	r3, [pc, #312]	; (80099f4 <SDMMC_GetCmdResp1+0x1d8>)
 80098bc:	4013      	ands	r3, r2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e08d      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da02      	bge.n	80098d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80098cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098d0:	e087      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	e080      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80098ea:	2380      	movs	r3, #128	; 0x80
 80098ec:	e079      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80098f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098fc:	e071      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800990c:	e069      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991c:	e061      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800992c:	e059      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800993c:	e051      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800994c:	e049      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800995c:	e041      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996c:	e039      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800997c:	e031      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800998c:	e029      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009998:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800999c:	e021      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099ac:	e019      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099bc:	e011      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80099c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099cc:	e009      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80099d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80099dc:	e001      	b.n	80099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80099de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20000008 	.word	0x20000008
 80099f0:	10624dd3 	.word	0x10624dd3
 80099f4:	fdffe008 	.word	0xfdffe008

080099f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a00:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <SDMMC_GetCmdResp2+0x88>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a1f      	ldr	r2, [pc, #124]	; (8009a84 <SDMMC_GetCmdResp2+0x8c>)
 8009a06:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0a:	0a5b      	lsrs	r3, r3, #9
 8009a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a10:	fb02 f303 	mul.w	r3, r2, r3
 8009a14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	1e5a      	subs	r2, r3, #1
 8009a1a:	60fa      	str	r2, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d102      	bne.n	8009a26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a24:	e026      	b.n	8009a74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0ef      	beq.n	8009a16 <SDMMC_GetCmdResp2+0x1e>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1ea      	bne.n	8009a16 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2204      	movs	r2, #4
 8009a50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a52:	2304      	movs	r3, #4
 8009a54:	e00e      	b.n	8009a74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e003      	b.n	8009a74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	22c5      	movs	r2, #197	; 0xc5
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	20000008 	.word	0x20000008
 8009a84:	10624dd3 	.word	0x10624dd3

08009a88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a90:	4b1a      	ldr	r3, [pc, #104]	; (8009afc <SDMMC_GetCmdResp3+0x74>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1a      	ldr	r2, [pc, #104]	; (8009b00 <SDMMC_GetCmdResp3+0x78>)
 8009a96:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9a:	0a5b      	lsrs	r3, r3, #9
 8009a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
 8009aa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	1e5a      	subs	r2, r3, #1
 8009aaa:	60fa      	str	r2, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ab4:	e01b      	b.n	8009aee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0ef      	beq.n	8009aa6 <SDMMC_GetCmdResp3+0x1e>
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1ea      	bne.n	8009aa6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2204      	movs	r2, #4
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	e003      	b.n	8009aee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	22c5      	movs	r2, #197	; 0xc5
 8009aea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	20000008 	.word	0x20000008
 8009b00:	10624dd3 	.word	0x10624dd3

08009b04 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b088      	sub	sp, #32
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b12:	4b35      	ldr	r3, [pc, #212]	; (8009be8 <SDMMC_GetCmdResp6+0xe4>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a35      	ldr	r2, [pc, #212]	; (8009bec <SDMMC_GetCmdResp6+0xe8>)
 8009b18:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1c:	0a5b      	lsrs	r3, r3, #9
 8009b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b22:	fb02 f303 	mul.w	r3, r2, r3
 8009b26:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	1e5a      	subs	r2, r3, #1
 8009b2c:	61fa      	str	r2, [r7, #28]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d102      	bne.n	8009b38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b36:	e052      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0ef      	beq.n	8009b28 <SDMMC_GetCmdResp6+0x24>
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1ea      	bne.n	8009b28 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2204      	movs	r2, #4
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b64:	2304      	movs	r3, #4
 8009b66:	e03a      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d004      	beq.n	8009b7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2201      	movs	r2, #1
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e02f      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fc0d 	bl	800939e <SDMMC_GetCommandResponse>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d001      	beq.n	8009b92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e025      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	22c5      	movs	r2, #197	; 0xc5
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b98:	2100      	movs	r1, #0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fc0c 	bl	80093b8 <SDMMC_GetResponse>
 8009ba0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	0c1b      	lsrs	r3, r3, #16
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e011      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bc8:	e009      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bd8:	e001      	b.n	8009bde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3720      	adds	r7, #32
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20000008 	.word	0x20000008
 8009bec:	10624dd3 	.word	0x10624dd3

08009bf0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009bf8:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <SDMMC_GetCmdResp7+0x94>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a22      	ldr	r2, [pc, #136]	; (8009c88 <SDMMC_GetCmdResp7+0x98>)
 8009bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009c02:	0a5b      	lsrs	r3, r3, #9
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	fb02 f303 	mul.w	r3, r2, r3
 8009c0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	1e5a      	subs	r2, r3, #1
 8009c12:	60fa      	str	r2, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d102      	bne.n	8009c1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c1c:	e02c      	b.n	8009c78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0ef      	beq.n	8009c0e <SDMMC_GetCmdResp7+0x1e>
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1ea      	bne.n	8009c0e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2204      	movs	r2, #4
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	e014      	b.n	8009c78 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e009      	b.n	8009c78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2240      	movs	r2, #64	; 0x40
 8009c74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c76:	2300      	movs	r3, #0

}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	20000008 	.word	0x20000008
 8009c88:	10624dd3 	.word	0x10624dd3

08009c8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c94:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <SDMMC_GetCmdError+0x50>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a11      	ldr	r2, [pc, #68]	; (8009ce0 <SDMMC_GetCmdError+0x54>)
 8009c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9e:	0a5b      	lsrs	r3, r3, #9
 8009ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca4:	fb02 f303 	mul.w	r3, r2, r3
 8009ca8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	1e5a      	subs	r2, r3, #1
 8009cae:	60fa      	str	r2, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cb8:	e009      	b.n	8009cce <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f1      	beq.n	8009caa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	22c5      	movs	r2, #197	; 0xc5
 8009cca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000008 	.word	0x20000008
 8009ce0:	10624dd3 	.word	0x10624dd3

08009ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	f107 001c 	add.w	r0, r7, #28
 8009cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f8ea 	bl	8009edc <USB_CoreReset>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8009d1e:	e005      	b.n	8009d2c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d38:	b004      	add	sp, #16
 8009d3a:	4770      	bx	lr

08009d3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f023 0201 	bic.w	r2, r3, #1
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d115      	bne.n	8009dac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	f7f9 f9db 	bl	8003148 <HAL_Delay>
      ms++;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f891 	bl	8009ec0 <USB_GetMode>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d01e      	beq.n	8009de2 <USB_SetCurrentMode+0x84>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b31      	cmp	r3, #49	; 0x31
 8009da8:	d9f0      	bls.n	8009d8c <USB_SetCurrentMode+0x2e>
 8009daa:	e01a      	b.n	8009de2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d115      	bne.n	8009dde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f7f9 f9c2 	bl	8003148 <HAL_Delay>
      ms++;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f878 	bl	8009ec0 <USB_GetMode>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <USB_SetCurrentMode+0x84>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b31      	cmp	r3, #49	; 0x31
 8009dda:	d9f0      	bls.n	8009dbe <USB_SetCurrentMode+0x60>
 8009ddc:	e001      	b.n	8009de2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e005      	b.n	8009dee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b32      	cmp	r3, #50	; 0x32
 8009de6:	d101      	bne.n	8009dec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e000      	b.n	8009dee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4a13      	ldr	r2, [pc, #76]	; (8009e5c <USB_FlushTxFifo+0x64>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d901      	bls.n	8009e18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e01b      	b.n	8009e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	daf2      	bge.n	8009e06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	019b      	lsls	r3, r3, #6
 8009e28:	f043 0220 	orr.w	r2, r3, #32
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3301      	adds	r3, #1
 8009e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4a08      	ldr	r2, [pc, #32]	; (8009e5c <USB_FlushTxFifo+0x64>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d901      	bls.n	8009e42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e006      	b.n	8009e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	d0f0      	beq.n	8009e30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	00030d40 	.word	0x00030d40

08009e60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <USB_FlushRxFifo+0x5c>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d901      	bls.n	8009e7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e018      	b.n	8009eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	daf2      	bge.n	8009e6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2210      	movs	r2, #16
 8009e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	4a08      	ldr	r2, [pc, #32]	; (8009ebc <USB_FlushRxFifo+0x5c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d901      	bls.n	8009ea2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e006      	b.n	8009eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0310 	and.w	r3, r3, #16
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d0f0      	beq.n	8009e90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	00030d40 	.word	0x00030d40

08009ec0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	f003 0301 	and.w	r3, r3, #1
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <USB_CoreReset+0x64>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d901      	bls.n	8009efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e01b      	b.n	8009f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	daf2      	bge.n	8009ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f043 0201 	orr.w	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <USB_CoreReset+0x64>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d901      	bls.n	8009f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e006      	b.n	8009f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d0f0      	beq.n	8009f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	00030d40 	.word	0x00030d40

08009f44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f44:	b084      	sub	sp, #16
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b086      	sub	sp, #24
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f64:	461a      	mov	r2, r3
 8009f66:	2300      	movs	r3, #0
 8009f68:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f90:	f023 0304 	bic.w	r3, r3, #4
 8009f94:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f96:	2110      	movs	r1, #16
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ff2d 	bl	8009df8 <USB_FlushTxFifo>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff ff59 	bl	8009e60 <USB_FlushRxFifo>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	e015      	b.n	8009fea <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fde:	461a      	mov	r2, r3
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d3e5      	bcc.n	8009fbe <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffe:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2280      	movs	r2, #128	; 0x80
 800a004:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a0c      	ldr	r2, [pc, #48]	; (800a03c <USB_HostInit+0xf8>)
 800a00a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a0c      	ldr	r2, [pc, #48]	; (800a040 <USB_HostInit+0xfc>)
 800a010:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	f043 0210 	orr.w	r2, r3, #16
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699a      	ldr	r2, [r3, #24]
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <USB_HostInit+0x100>)
 800a026:	4313      	orrs	r3, r2
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a038:	b004      	add	sp, #16
 800a03a:	4770      	bx	lr
 800a03c:	00600080 	.word	0x00600080
 800a040:	004000e0 	.word	0x004000e0
 800a044:	a3200008 	.word	0xa3200008

0800a048 <MX_FATFS_Init>:
FIL SDFile2;
FIL SDFile3;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a04c:	4904      	ldr	r1, [pc, #16]	; (800a060 <MX_FATFS_Init+0x18>)
 800a04e:	4805      	ldr	r0, [pc, #20]	; (800a064 <MX_FATFS_Init+0x1c>)
 800a050:	f002 ffa6 	bl	800cfa0 <FATFS_LinkDriver>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	4b03      	ldr	r3, [pc, #12]	; (800a068 <MX_FATFS_Init+0x20>)
 800a05a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a05c:	bf00      	nop
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20001744 	.word	0x20001744
 800a064:	0800e804 	.word	0x0800e804
 800a068:	20001740 	.word	0x20001740

0800a06c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a070:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a072:	4618      	mov	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a086:	f000 f86b 	bl	800a160 <BSP_SD_IsDetected>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d001      	beq.n	800a094 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a090:	2302      	movs	r3, #2
 800a092:	e005      	b.n	800a0a0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a094:	4804      	ldr	r0, [pc, #16]	; (800a0a8 <BSP_SD_Init+0x2c>)
 800a096:	f7fc fa8f 	bl	80065b8 <HAL_SD_Init>
 800a09a:	4603      	mov	r3, r0
 800a09c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a09e:	79fb      	ldrb	r3, [r7, #7]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	2000015c 	.word	0x2000015c

0800a0ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <BSP_SD_ReadBlocks+0x38>)
 800a0ca:	f7fc fb4b 	bl	8006764 <HAL_SD_ReadBlocks>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	2000015c 	.word	0x2000015c

0800a0e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	4806      	ldr	r0, [pc, #24]	; (800a120 <BSP_SD_WriteBlocks+0x38>)
 800a106:	f7fc fd0b 	bl	8006b20 <HAL_SD_WriteBlocks>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	2000015c 	.word	0x2000015c

0800a124 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a128:	4805      	ldr	r0, [pc, #20]	; (800a140 <BSP_SD_GetCardState+0x1c>)
 800a12a:	f7fd f84f 	bl	80071cc <HAL_SD_GetCardState>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b04      	cmp	r3, #4
 800a132:	bf14      	ite	ne
 800a134:	2301      	movne	r3, #1
 800a136:	2300      	moveq	r3, #0
 800a138:	b2db      	uxtb	r3, r3
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000015c 	.word	0x2000015c

0800a144 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	4803      	ldr	r0, [pc, #12]	; (800a15c <BSP_SD_GetCardInfo+0x18>)
 800a150:	f7fd f810 	bl	8007174 <HAL_SD_GetCardInfo>
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	2000015c 	.word	0x2000015c

0800a160 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a166:	2301      	movs	r3, #1
 800a168:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a16a:	f000 f80b 	bl	800a184 <BSP_PlatformIsDetected>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a174:	2300      	movs	r3, #0
 800a176:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	b2db      	uxtb	r3, r3
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a18a:	2301      	movs	r3, #1
 800a18c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a18e:	2180      	movs	r1, #128	; 0x80
 800a190:	4806      	ldr	r0, [pc, #24]	; (800a1ac <BSP_PlatformIsDetected+0x28>)
 800a192:	f7f9 fdf1 	bl	8003d78 <HAL_GPIO_ReadPin>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a19c:	2300      	movs	r3, #0
 800a19e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	48000800 	.word	0x48000800

0800a1b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a1ba:	4b0b      	ldr	r3, [pc, #44]	; (800a1e8 <SD_CheckStatus+0x38>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a1c0:	f7ff ffb0 	bl	800a124 <BSP_SD_GetCardState>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d107      	bne.n	800a1da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <SD_CheckStatus+0x38>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	f023 0301 	bic.w	r3, r3, #1
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <SD_CheckStatus+0x38>)
 800a1d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a1da:	4b03      	ldr	r3, [pc, #12]	; (800a1e8 <SD_CheckStatus+0x38>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b2db      	uxtb	r3, r3
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	20000011 	.word	0x20000011

0800a1ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <SD_initialize+0x38>)
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a1fc:	f7ff ff3e 	bl	800a07c <BSP_SD_Init>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d107      	bne.n	800a216 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a206:	79fb      	ldrb	r3, [r7, #7]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff ffd1 	bl	800a1b0 <SD_CheckStatus>
 800a20e:	4603      	mov	r3, r0
 800a210:	461a      	mov	r2, r3
 800a212:	4b04      	ldr	r3, [pc, #16]	; (800a224 <SD_initialize+0x38>)
 800a214:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a216:	4b03      	ldr	r3, [pc, #12]	; (800a224 <SD_initialize+0x38>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b2db      	uxtb	r3, r3
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000011 	.word	0x20000011

0800a228 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a232:	79fb      	ldrb	r3, [r7, #7]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff ffbb 	bl	800a1b0 <SD_CheckStatus>
 800a23a:	4603      	mov	r3, r0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	603b      	str	r3, [r7, #0]
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a258:	f04f 33ff 	mov.w	r3, #4294967295
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	68b8      	ldr	r0, [r7, #8]
 800a262:	f7ff ff23 	bl	800a0ac <BSP_SD_ReadBlocks>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d107      	bne.n	800a27c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a26c:	bf00      	nop
 800a26e:	f7ff ff59 	bl	800a124 <BSP_SD_GetCardState>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1fa      	bne.n	800a26e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b086      	sub	sp, #24
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a29a:	f04f 33ff 	mov.w	r3, #4294967295
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	68b8      	ldr	r0, [r7, #8]
 800a2a4:	f7ff ff20 	bl	800a0e8 <BSP_SD_WriteBlocks>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d107      	bne.n	800a2be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a2ae:	bf00      	nop
 800a2b0:	f7ff ff38 	bl	800a124 <BSP_SD_GetCardState>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1fa      	bne.n	800a2b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08c      	sub	sp, #48	; 0x30
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	603a      	str	r2, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a2de:	4b25      	ldr	r3, [pc, #148]	; (800a374 <SD_ioctl+0xac>)
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <SD_ioctl+0x28>
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e03c      	b.n	800a36a <SD_ioctl+0xa2>

  switch (cmd)
 800a2f0:	79bb      	ldrb	r3, [r7, #6]
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d834      	bhi.n	800a360 <SD_ioctl+0x98>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <SD_ioctl+0x34>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a315 	.word	0x0800a315
 800a304:	0800a32d 	.word	0x0800a32d
 800a308:	0800a347 	.word	0x0800a347
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a312:	e028      	b.n	800a366 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a314:	f107 030c 	add.w	r3, r7, #12
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff ff13 	bl	800a144 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a32a:	e01c      	b.n	800a366 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a32c:	f107 030c 	add.w	r3, r7, #12
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff ff07 	bl	800a144 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a338:	b29a      	uxth	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a344:	e00f      	b.n	800a366 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a346:	f107 030c 	add.w	r3, r7, #12
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fefa 	bl	800a144 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	0a5a      	lsrs	r2, r3, #9
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a35e:	e002      	b.n	800a366 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a360:	2304      	movs	r3, #4
 800a362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3730      	adds	r7, #48	; 0x30
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000011 	.word	0x20000011

0800a378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	4a08      	ldr	r2, [pc, #32]	; (800a3a8 <disk_status+0x30>)
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	79fa      	ldrb	r2, [r7, #7]
 800a390:	4905      	ldr	r1, [pc, #20]	; (800a3a8 <disk_status+0x30>)
 800a392:	440a      	add	r2, r1
 800a394:	7a12      	ldrb	r2, [r2, #8]
 800a396:	4610      	mov	r0, r2
 800a398:	4798      	blx	r3
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	200037d4 	.word	0x200037d4

0800a3ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	4a0d      	ldr	r2, [pc, #52]	; (800a3f4 <disk_initialize+0x48>)
 800a3be:	5cd3      	ldrb	r3, [r2, r3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d111      	bne.n	800a3e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	4a0b      	ldr	r2, [pc, #44]	; (800a3f4 <disk_initialize+0x48>)
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <disk_initialize+0x48>)
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	79fa      	ldrb	r2, [r7, #7]
 800a3da:	4906      	ldr	r1, [pc, #24]	; (800a3f4 <disk_initialize+0x48>)
 800a3dc:	440a      	add	r2, r1
 800a3de:	7a12      	ldrb	r2, [r2, #8]
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4798      	blx	r3
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	200037d4 	.word	0x200037d4

0800a3f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a3f8:	b590      	push	{r4, r7, lr}
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	607a      	str	r2, [r7, #4]
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	4a0a      	ldr	r2, [pc, #40]	; (800a434 <disk_read+0x3c>)
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	689c      	ldr	r4, [r3, #8]
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	4a07      	ldr	r2, [pc, #28]	; (800a434 <disk_read+0x3c>)
 800a418:	4413      	add	r3, r2
 800a41a:	7a18      	ldrb	r0, [r3, #8]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	47a0      	blx	r4
 800a424:	4603      	mov	r3, r0
 800a426:	75fb      	strb	r3, [r7, #23]
  return res;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd90      	pop	{r4, r7, pc}
 800a432:	bf00      	nop
 800a434:	200037d4 	.word	0x200037d4

0800a438 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a438:	b590      	push	{r4, r7, lr}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	607a      	str	r2, [r7, #4]
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	4a0a      	ldr	r2, [pc, #40]	; (800a474 <disk_write+0x3c>)
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	68dc      	ldr	r4, [r3, #12]
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	4a07      	ldr	r2, [pc, #28]	; (800a474 <disk_write+0x3c>)
 800a458:	4413      	add	r3, r2
 800a45a:	7a18      	ldrb	r0, [r3, #8]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	47a0      	blx	r4
 800a464:	4603      	mov	r3, r0
 800a466:	75fb      	strb	r3, [r7, #23]
  return res;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd90      	pop	{r4, r7, pc}
 800a472:	bf00      	nop
 800a474:	200037d4 	.word	0x200037d4

0800a478 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	603a      	str	r2, [r7, #0]
 800a482:	71fb      	strb	r3, [r7, #7]
 800a484:	460b      	mov	r3, r1
 800a486:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	4a09      	ldr	r2, [pc, #36]	; (800a4b0 <disk_ioctl+0x38>)
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	4906      	ldr	r1, [pc, #24]	; (800a4b0 <disk_ioctl+0x38>)
 800a498:	440a      	add	r2, r1
 800a49a:	7a10      	ldrb	r0, [r2, #8]
 800a49c:	79b9      	ldrb	r1, [r7, #6]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4798      	blx	r3
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200037d4 	.word	0x200037d4

0800a4b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a4c4:	89fb      	ldrh	r3, [r7, #14]
 800a4c6:	021b      	lsls	r3, r3, #8
 800a4c8:	b21a      	sxth	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	b21b      	sxth	r3, r3
 800a4d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a4d6:	89fb      	ldrh	r3, [r7, #14]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3303      	adds	r3, #3
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	021b      	lsls	r3, r3, #8
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	3202      	adds	r2, #2
 800a4fc:	7812      	ldrb	r2, [r2, #0]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	3201      	adds	r2, #1
 800a50a:	7812      	ldrb	r2, [r2, #0]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a51c:	68fb      	ldr	r3, [r7, #12]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	460b      	mov	r3, r1
 800a534:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	887a      	ldrh	r2, [r7, #2]
 800a53e:	b2d2      	uxtb	r2, r2
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	887b      	ldrh	r3, [r7, #2]
 800a544:	0a1b      	lsrs	r3, r3, #8
 800a546:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	607a      	str	r2, [r7, #4]
 800a54e:	887a      	ldrh	r2, [r7, #2]
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	701a      	strb	r2, [r3, #0]
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	607a      	str	r2, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	0a1b      	lsrs	r3, r3, #8
 800a59e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00d      	beq.n	800a5ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	1c53      	adds	r3, r2, #1
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	6179      	str	r1, [r7, #20]
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	607b      	str	r3, [r7, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f1      	bne.n	800a5d2 <mem_cpy+0x1a>
	}
}
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a5fa:	b480      	push	{r7}
 800a5fc:	b087      	sub	sp, #28
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	617a      	str	r2, [r7, #20]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3b01      	subs	r3, #1
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f3      	bne.n	800a60a <mem_set+0x10>
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a630:	b480      	push	{r7}
 800a632:	b089      	sub	sp, #36	; 0x24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	61fa      	str	r2, [r7, #28]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4619      	mov	r1, r3
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	61ba      	str	r2, [r7, #24]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	1acb      	subs	r3, r1, r3
 800a65c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3b01      	subs	r3, #1
 800a662:	607b      	str	r3, [r7, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <mem_cmp+0x40>
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0eb      	beq.n	800a648 <mem_cmp+0x18>

	return r;
 800a670:	697b      	ldr	r3, [r7, #20]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3724      	adds	r7, #36	; 0x24
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a688:	e002      	b.n	800a690 <chk_chr+0x12>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3301      	adds	r3, #1
 800a68e:	607b      	str	r3, [r7, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <chk_chr+0x26>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	461a      	mov	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d1f2      	bne.n	800a68a <chk_chr+0xc>
	return *str;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	e029      	b.n	800a71c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a6c8:	4a27      	ldr	r2, [pc, #156]	; (800a768 <chk_lock+0xb4>)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	011b      	lsls	r3, r3, #4
 800a6ce:	4413      	add	r3, r2
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01d      	beq.n	800a712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a6d6:	4a24      	ldr	r2, [pc, #144]	; (800a768 <chk_lock+0xb4>)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	011b      	lsls	r3, r3, #4
 800a6dc:	4413      	add	r3, r2
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d116      	bne.n	800a716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a6e8:	4a1f      	ldr	r2, [pc, #124]	; (800a768 <chk_lock+0xb4>)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	011b      	lsls	r3, r3, #4
 800a6ee:	4413      	add	r3, r2
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d10c      	bne.n	800a716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a6fc:	4a1a      	ldr	r2, [pc, #104]	; (800a768 <chk_lock+0xb4>)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	4413      	add	r3, r2
 800a704:	3308      	adds	r3, #8
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d102      	bne.n	800a716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a710:	e007      	b.n	800a722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a712:	2301      	movs	r3, #1
 800a714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d9d2      	bls.n	800a6c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d109      	bne.n	800a73c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <chk_lock+0x80>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d101      	bne.n	800a738 <chk_lock+0x84>
 800a734:	2300      	movs	r3, #0
 800a736:	e010      	b.n	800a75a <chk_lock+0xa6>
 800a738:	2312      	movs	r3, #18
 800a73a:	e00e      	b.n	800a75a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d108      	bne.n	800a754 <chk_lock+0xa0>
 800a742:	4a09      	ldr	r2, [pc, #36]	; (800a768 <chk_lock+0xb4>)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	011b      	lsls	r3, r3, #4
 800a748:	4413      	add	r3, r2
 800a74a:	330c      	adds	r3, #12
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a752:	d101      	bne.n	800a758 <chk_lock+0xa4>
 800a754:	2310      	movs	r3, #16
 800a756:	e000      	b.n	800a75a <chk_lock+0xa6>
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	200037b4 	.word	0x200037b4

0800a76c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a772:	2300      	movs	r3, #0
 800a774:	607b      	str	r3, [r7, #4]
 800a776:	e002      	b.n	800a77e <enq_lock+0x12>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3301      	adds	r3, #1
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d806      	bhi.n	800a792 <enq_lock+0x26>
 800a784:	4a09      	ldr	r2, [pc, #36]	; (800a7ac <enq_lock+0x40>)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	4413      	add	r3, r2
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f2      	bne.n	800a778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b02      	cmp	r3, #2
 800a796:	bf14      	ite	ne
 800a798:	2301      	movne	r3, #1
 800a79a:	2300      	moveq	r3, #0
 800a79c:	b2db      	uxtb	r3, r3
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	200037b4 	.word	0x200037b4

0800a7b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	e01f      	b.n	800a800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a7c0:	4a41      	ldr	r2, [pc, #260]	; (800a8c8 <inc_lock+0x118>)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	011b      	lsls	r3, r3, #4
 800a7c6:	4413      	add	r3, r2
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d113      	bne.n	800a7fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a7d2:	4a3d      	ldr	r2, [pc, #244]	; (800a8c8 <inc_lock+0x118>)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	011b      	lsls	r3, r3, #4
 800a7d8:	4413      	add	r3, r2
 800a7da:	3304      	adds	r3, #4
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d109      	bne.n	800a7fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a7e6:	4a38      	ldr	r2, [pc, #224]	; (800a8c8 <inc_lock+0x118>)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	011b      	lsls	r3, r3, #4
 800a7ec:	4413      	add	r3, r2
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d006      	beq.n	800a808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	60fb      	str	r3, [r7, #12]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d9dc      	bls.n	800a7c0 <inc_lock+0x10>
 800a806:	e000      	b.n	800a80a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d132      	bne.n	800a876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	e002      	b.n	800a81c <inc_lock+0x6c>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d806      	bhi.n	800a830 <inc_lock+0x80>
 800a822:	4a29      	ldr	r2, [pc, #164]	; (800a8c8 <inc_lock+0x118>)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	4413      	add	r3, r2
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1f2      	bne.n	800a816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d101      	bne.n	800a83a <inc_lock+0x8a>
 800a836:	2300      	movs	r3, #0
 800a838:	e040      	b.n	800a8bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	4922      	ldr	r1, [pc, #136]	; (800a8c8 <inc_lock+0x118>)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	440b      	add	r3, r1
 800a846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	491e      	ldr	r1, [pc, #120]	; (800a8c8 <inc_lock+0x118>)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	440b      	add	r3, r1
 800a854:	3304      	adds	r3, #4
 800a856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	695a      	ldr	r2, [r3, #20]
 800a85c:	491a      	ldr	r1, [pc, #104]	; (800a8c8 <inc_lock+0x118>)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	440b      	add	r3, r1
 800a864:	3308      	adds	r3, #8
 800a866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a868:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <inc_lock+0x118>)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	4413      	add	r3, r2
 800a870:	330c      	adds	r3, #12
 800a872:	2200      	movs	r2, #0
 800a874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d009      	beq.n	800a890 <inc_lock+0xe0>
 800a87c:	4a12      	ldr	r2, [pc, #72]	; (800a8c8 <inc_lock+0x118>)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	011b      	lsls	r3, r3, #4
 800a882:	4413      	add	r3, r2
 800a884:	330c      	adds	r3, #12
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <inc_lock+0xe0>
 800a88c:	2300      	movs	r3, #0
 800a88e:	e015      	b.n	800a8bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d108      	bne.n	800a8a8 <inc_lock+0xf8>
 800a896:	4a0c      	ldr	r2, [pc, #48]	; (800a8c8 <inc_lock+0x118>)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	4413      	add	r3, r2
 800a89e:	330c      	adds	r3, #12
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	e001      	b.n	800a8ac <inc_lock+0xfc>
 800a8a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8ac:	4906      	ldr	r1, [pc, #24]	; (800a8c8 <inc_lock+0x118>)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	440b      	add	r3, r1
 800a8b4:	330c      	adds	r3, #12
 800a8b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3301      	adds	r3, #1
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	200037b4 	.word	0x200037b4

0800a8cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	607b      	str	r3, [r7, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d825      	bhi.n	800a92c <dec_lock+0x60>
		n = Files[i].ctr;
 800a8e0:	4a17      	ldr	r2, [pc, #92]	; (800a940 <dec_lock+0x74>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	4413      	add	r3, r2
 800a8e8:	330c      	adds	r3, #12
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a8ee:	89fb      	ldrh	r3, [r7, #14]
 800a8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f4:	d101      	bne.n	800a8fa <dec_lock+0x2e>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a8fa:	89fb      	ldrh	r3, [r7, #14]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <dec_lock+0x3a>
 800a900:	89fb      	ldrh	r3, [r7, #14]
 800a902:	3b01      	subs	r3, #1
 800a904:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a906:	4a0e      	ldr	r2, [pc, #56]	; (800a940 <dec_lock+0x74>)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	4413      	add	r3, r2
 800a90e:	330c      	adds	r3, #12
 800a910:	89fa      	ldrh	r2, [r7, #14]
 800a912:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a914:	89fb      	ldrh	r3, [r7, #14]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d105      	bne.n	800a926 <dec_lock+0x5a>
 800a91a:	4a09      	ldr	r2, [pc, #36]	; (800a940 <dec_lock+0x74>)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	4413      	add	r3, r2
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	737b      	strb	r3, [r7, #13]
 800a92a:	e001      	b.n	800a930 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a92c:	2302      	movs	r3, #2
 800a92e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a930:	7b7b      	ldrb	r3, [r7, #13]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200037b4 	.word	0x200037b4

0800a944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	e010      	b.n	800a974 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a952:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <clear_lock+0x44>)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	011b      	lsls	r3, r3, #4
 800a958:	4413      	add	r3, r2
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d105      	bne.n	800a96e <clear_lock+0x2a>
 800a962:	4a09      	ldr	r2, [pc, #36]	; (800a988 <clear_lock+0x44>)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	4413      	add	r3, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d9eb      	bls.n	800a952 <clear_lock+0xe>
	}
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	200037b4 	.word	0x200037b4

0800a98c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	78db      	ldrb	r3, [r3, #3]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d034      	beq.n	800aa0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7858      	ldrb	r0, [r3, #1]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	f7ff fd40 	bl	800a438 <disk_write>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	73fb      	strb	r3, [r7, #15]
 800a9c2:	e022      	b.n	800aa0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	1ad2      	subs	r2, r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d217      	bcs.n	800aa0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	789b      	ldrb	r3, [r3, #2]
 800a9de:	613b      	str	r3, [r7, #16]
 800a9e0:	e010      	b.n	800aa04 <sync_window+0x78>
					wsect += fs->fsize;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	7858      	ldrb	r0, [r3, #1]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	f7ff fd1d 	bl	800a438 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	613b      	str	r3, [r7, #16]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d8eb      	bhi.n	800a9e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d01b      	beq.n	800aa64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff ffad 	bl	800a98c <sync_window>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d113      	bne.n	800aa64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	7858      	ldrb	r0, [r3, #1]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aa46:	2301      	movs	r3, #1
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	f7ff fcd5 	bl	800a3f8 <disk_read>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d004      	beq.n	800aa5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff ff87 	bl	800a98c <sync_window>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d159      	bne.n	800ab3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d149      	bne.n	800ab24 <sync_fs+0xb4>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	791b      	ldrb	r3, [r3, #4]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d145      	bne.n	800ab24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	899b      	ldrh	r3, [r3, #12]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	f7ff fda8 	bl	800a5fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3334      	adds	r3, #52	; 0x34
 800aaae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aab2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff fd37 	bl	800a52a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3334      	adds	r3, #52	; 0x34
 800aac0:	4921      	ldr	r1, [pc, #132]	; (800ab48 <sync_fs+0xd8>)
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fd4c 	bl	800a560 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	3334      	adds	r3, #52	; 0x34
 800aacc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aad0:	491e      	ldr	r1, [pc, #120]	; (800ab4c <sync_fs+0xdc>)
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fd44 	bl	800a560 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3334      	adds	r3, #52	; 0x34
 800aadc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f7ff fd3a 	bl	800a560 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3334      	adds	r3, #52	; 0x34
 800aaf0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7ff fd30 	bl	800a560 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7858      	ldrb	r0, [r3, #1]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f7ff fc8d 	bl	800a438 <disk_write>
			fs->fsi_flag = 0;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff fca3 	bl	800a478 <disk_ioctl>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <sync_fs+0xcc>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	41615252 	.word	0x41615252
 800ab4c:	61417272 	.word	0x61417272

0800ab50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	3b02      	subs	r3, #2
 800ab5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	3b02      	subs	r3, #2
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d301      	bcc.n	800ab70 <clust2sect+0x20>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	e008      	b.n	800ab82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	895b      	ldrh	r3, [r3, #10]
 800ab74:	461a      	mov	r2, r3
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	fb03 f202 	mul.w	r2, r3, r2
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	4413      	add	r3, r2
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b086      	sub	sp, #24
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d904      	bls.n	800abae <get_fat+0x20>
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d302      	bcc.n	800abb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800abae:	2301      	movs	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	e0bb      	b.n	800ad2c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295
 800abb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	f000 8083 	beq.w	800acca <get_fat+0x13c>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	f300 80a7 	bgt.w	800ad18 <get_fat+0x18a>
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d002      	beq.n	800abd4 <get_fat+0x46>
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d056      	beq.n	800ac80 <get_fat+0xf2>
 800abd2:	e0a1      	b.n	800ad18 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	899b      	ldrh	r3, [r3, #12]
 800abea:	4619      	mov	r1, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	fbb3 f3f1 	udiv	r3, r3, r1
 800abf2:	4413      	add	r3, r2
 800abf4:	4619      	mov	r1, r3
 800abf6:	6938      	ldr	r0, [r7, #16]
 800abf8:	f7ff ff0c 	bl	800aa14 <move_window>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f040 808d 	bne.w	800ad1e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	60fa      	str	r2, [r7, #12]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	8992      	ldrh	r2, [r2, #12]
 800ac0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac12:	fb01 f202 	mul.w	r2, r1, r2
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	899b      	ldrh	r3, [r3, #12]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac32:	4413      	add	r3, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	6938      	ldr	r0, [r7, #16]
 800ac38:	f7ff feec 	bl	800aa14 <move_window>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d16f      	bne.n	800ad22 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	899b      	ldrh	r3, [r3, #12]
 800ac46:	461a      	mov	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac4e:	fb01 f202 	mul.w	r2, r1, r2
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4413      	add	r3, r2
 800ac58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	461a      	mov	r2, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <get_fat+0xe8>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	091b      	lsrs	r3, r3, #4
 800ac74:	e002      	b.n	800ac7c <get_fat+0xee>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac7c:	617b      	str	r3, [r7, #20]
			break;
 800ac7e:	e055      	b.n	800ad2c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	899b      	ldrh	r3, [r3, #12]
 800ac88:	085b      	lsrs	r3, r3, #1
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac94:	4413      	add	r3, r2
 800ac96:	4619      	mov	r1, r3
 800ac98:	6938      	ldr	r0, [r7, #16]
 800ac9a:	f7ff febb 	bl	800aa14 <move_window>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d140      	bne.n	800ad26 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	005b      	lsls	r3, r3, #1
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	8992      	ldrh	r2, [r2, #12]
 800acb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800acb6:	fb00 f202 	mul.w	r2, r0, r2
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	440b      	add	r3, r1
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fbf8 	bl	800a4b4 <ld_word>
 800acc4:	4603      	mov	r3, r0
 800acc6:	617b      	str	r3, [r7, #20]
			break;
 800acc8:	e030      	b.n	800ad2c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	899b      	ldrh	r3, [r3, #12]
 800acd2:	089b      	lsrs	r3, r3, #2
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	4619      	mov	r1, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	fbb3 f3f1 	udiv	r3, r3, r1
 800acde:	4413      	add	r3, r2
 800ace0:	4619      	mov	r1, r3
 800ace2:	6938      	ldr	r0, [r7, #16]
 800ace4:	f7ff fe96 	bl	800aa14 <move_window>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d11d      	bne.n	800ad2a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	8992      	ldrh	r2, [r2, #12]
 800acfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad00:	fb00 f202 	mul.w	r2, r0, r2
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	440b      	add	r3, r1
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7ff fbeb 	bl	800a4e4 <ld_dword>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad14:	617b      	str	r3, [r7, #20]
			break;
 800ad16:	e009      	b.n	800ad2c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad18:	2301      	movs	r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	e006      	b.n	800ad2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad1e:	bf00      	nop
 800ad20:	e004      	b.n	800ad2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad22:	bf00      	nop
 800ad24:	e002      	b.n	800ad2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad26:	bf00      	nop
 800ad28:	e000      	b.n	800ad2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad2a:	bf00      	nop
		}
	}

	return val;
 800ad2c:	697b      	ldr	r3, [r7, #20]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad36:	b590      	push	{r4, r7, lr}
 800ad38:	b089      	sub	sp, #36	; 0x24
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad42:	2302      	movs	r3, #2
 800ad44:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	f240 8102 	bls.w	800af52 <put_fat+0x21c>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	f080 80fc 	bcs.w	800af52 <put_fat+0x21c>
		switch (fs->fs_type) {
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	f000 80b6 	beq.w	800aed0 <put_fat+0x19a>
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	f300 80fd 	bgt.w	800af64 <put_fat+0x22e>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d003      	beq.n	800ad76 <put_fat+0x40>
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	f000 8083 	beq.w	800ae7a <put_fat+0x144>
 800ad74:	e0f6      	b.n	800af64 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	085b      	lsrs	r3, r3, #1
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	4413      	add	r3, r2
 800ad82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	899b      	ldrh	r3, [r3, #12]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad94:	4413      	add	r3, r2
 800ad96:	4619      	mov	r1, r3
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7ff fe3b 	bl	800aa14 <move_window>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ada2:	7ffb      	ldrb	r3, [r7, #31]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 80d6 	bne.w	800af56 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	61ba      	str	r2, [r7, #24]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	8992      	ldrh	r2, [r2, #12]
 800adba:	fbb3 f0f2 	udiv	r0, r3, r2
 800adbe:	fb00 f202 	mul.w	r2, r0, r2
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	440b      	add	r3, r1
 800adc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00d      	beq.n	800adee <put_fat+0xb8>
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	b25b      	sxtb	r3, r3
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	b25a      	sxtb	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	011b      	lsls	r3, r3, #4
 800ade4:	b25b      	sxtb	r3, r3
 800ade6:	4313      	orrs	r3, r2
 800ade8:	b25b      	sxtb	r3, r3
 800adea:	b2db      	uxtb	r3, r3
 800adec:	e001      	b.n	800adf2 <put_fat+0xbc>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	899b      	ldrh	r3, [r3, #12]
 800ae04:	4619      	mov	r1, r3
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4619      	mov	r1, r3
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff fdff 	bl	800aa14 <move_window>
 800ae16:	4603      	mov	r3, r0
 800ae18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae1a:	7ffb      	ldrb	r3, [r7, #31]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 809c 	bne.w	800af5a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	899b      	ldrh	r3, [r3, #12]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae34:	fb00 f202 	mul.w	r2, r0, r2
 800ae38:	1a9b      	subs	r3, r3, r2
 800ae3a:	440b      	add	r3, r1
 800ae3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <put_fat+0x11a>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	091b      	lsrs	r3, r3, #4
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	e00e      	b.n	800ae6e <put_fat+0x138>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	b25b      	sxtb	r3, r3
 800ae56:	f023 030f 	bic.w	r3, r3, #15
 800ae5a:	b25a      	sxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	0a1b      	lsrs	r3, r3, #8
 800ae60:	b25b      	sxtb	r3, r3
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	b25b      	sxtb	r3, r3
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	70da      	strb	r2, [r3, #3]
			break;
 800ae78:	e074      	b.n	800af64 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	899b      	ldrh	r3, [r3, #12]
 800ae82:	085b      	lsrs	r3, r3, #1
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	4619      	mov	r1, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae8e:	4413      	add	r3, r2
 800ae90:	4619      	mov	r1, r3
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7ff fdbe 	bl	800aa14 <move_window>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae9c:	7ffb      	ldrb	r3, [r7, #31]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d15d      	bne.n	800af5e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	8992      	ldrh	r2, [r2, #12]
 800aeb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeb4:	fb00 f202 	mul.w	r2, r0, r2
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	440b      	add	r3, r1
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	b292      	uxth	r2, r2
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff fb31 	bl	800a52a <st_word>
			fs->wflag = 1;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2201      	movs	r2, #1
 800aecc:	70da      	strb	r2, [r3, #3]
			break;
 800aece:	e049      	b.n	800af64 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	899b      	ldrh	r3, [r3, #12]
 800aed8:	089b      	lsrs	r3, r3, #2
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	4619      	mov	r1, r3
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aee4:	4413      	add	r3, r2
 800aee6:	4619      	mov	r1, r3
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7ff fd93 	bl	800aa14 <move_window>
 800aeee:	4603      	mov	r3, r0
 800aef0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aef2:	7ffb      	ldrb	r3, [r7, #31]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d134      	bne.n	800af62 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	8992      	ldrh	r2, [r2, #12]
 800af0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800af10:	fb00 f202 	mul.w	r2, r0, r2
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	440b      	add	r3, r1
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fae3 	bl	800a4e4 <ld_dword>
 800af1e:	4603      	mov	r3, r0
 800af20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af24:	4323      	orrs	r3, r4
 800af26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	8992      	ldrh	r2, [r2, #12]
 800af36:	fbb3 f0f2 	udiv	r0, r3, r2
 800af3a:	fb00 f202 	mul.w	r2, r0, r2
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	440b      	add	r3, r1
 800af42:	6879      	ldr	r1, [r7, #4]
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff fb0b 	bl	800a560 <st_dword>
			fs->wflag = 1;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	70da      	strb	r2, [r3, #3]
			break;
 800af50:	e008      	b.n	800af64 <put_fat+0x22e>
		}
	}
 800af52:	bf00      	nop
 800af54:	e006      	b.n	800af64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800af56:	bf00      	nop
 800af58:	e004      	b.n	800af64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800af5a:	bf00      	nop
 800af5c:	e002      	b.n	800af64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800af5e:	bf00      	nop
 800af60:	e000      	b.n	800af64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800af62:	bf00      	nop
	return res;
 800af64:	7ffb      	ldrb	r3, [r7, #31]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3724      	adds	r7, #36	; 0x24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd90      	pop	{r4, r7, pc}

0800af6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b088      	sub	sp, #32
 800af72:	af00      	add	r7, sp, #0
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d904      	bls.n	800af94 <remove_chain+0x26>
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	429a      	cmp	r2, r3
 800af92:	d301      	bcc.n	800af98 <remove_chain+0x2a>
 800af94:	2302      	movs	r3, #2
 800af96:	e04b      	b.n	800b030 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00c      	beq.n	800afb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	6879      	ldr	r1, [r7, #4]
 800afa4:	69b8      	ldr	r0, [r7, #24]
 800afa6:	f7ff fec6 	bl	800ad36 <put_fat>
 800afaa:	4603      	mov	r3, r0
 800afac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800afae:	7ffb      	ldrb	r3, [r7, #31]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <remove_chain+0x4a>
 800afb4:	7ffb      	ldrb	r3, [r7, #31]
 800afb6:	e03b      	b.n	800b030 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f7ff fde7 	bl	800ab8e <get_fat>
 800afc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d031      	beq.n	800b02c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <remove_chain+0x64>
 800afce:	2302      	movs	r3, #2
 800afd0:	e02e      	b.n	800b030 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd8:	d101      	bne.n	800afde <remove_chain+0x70>
 800afda:	2301      	movs	r3, #1
 800afdc:	e028      	b.n	800b030 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800afde:	2200      	movs	r2, #0
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	69b8      	ldr	r0, [r7, #24]
 800afe4:	f7ff fea7 	bl	800ad36 <put_fat>
 800afe8:	4603      	mov	r3, r0
 800afea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800afec:	7ffb      	ldrb	r3, [r7, #31]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <remove_chain+0x88>
 800aff2:	7ffb      	ldrb	r3, [r7, #31]
 800aff4:	e01c      	b.n	800b030 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	695a      	ldr	r2, [r3, #20]
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	3b02      	subs	r3, #2
 800b000:	429a      	cmp	r2, r3
 800b002:	d20b      	bcs.n	800b01c <remove_chain+0xae>
			fs->free_clst++;
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	791b      	ldrb	r3, [r3, #4]
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	b2da      	uxtb	r2, r3
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	429a      	cmp	r2, r3
 800b028:	d3c6      	bcc.n	800afb8 <remove_chain+0x4a>
 800b02a:	e000      	b.n	800b02e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b02c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10d      	bne.n	800b06a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <create_chain+0x2c>
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	429a      	cmp	r2, r3
 800b062:	d31b      	bcc.n	800b09c <create_chain+0x64>
 800b064:	2301      	movs	r3, #1
 800b066:	61bb      	str	r3, [r7, #24]
 800b068:	e018      	b.n	800b09c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff fd8e 	bl	800ab8e <get_fat>
 800b072:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d801      	bhi.n	800b07e <create_chain+0x46>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e070      	b.n	800b160 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d101      	bne.n	800b08a <create_chain+0x52>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	e06a      	b.n	800b160 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	429a      	cmp	r2, r3
 800b092:	d201      	bcs.n	800b098 <create_chain+0x60>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	e063      	b.n	800b160 <create_chain+0x128>
		scl = clst;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	69fa      	ldr	r2, [r7, #28]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d307      	bcc.n	800b0c0 <create_chain+0x88>
				ncl = 2;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d901      	bls.n	800b0c0 <create_chain+0x88>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e04f      	b.n	800b160 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b0c0:	69f9      	ldr	r1, [r7, #28]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff fd63 	bl	800ab8e <get_fat>
 800b0c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00e      	beq.n	800b0ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d003      	beq.n	800b0de <create_chain+0xa6>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d101      	bne.n	800b0e2 <create_chain+0xaa>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	e03e      	b.n	800b160 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0e2:	69fa      	ldr	r2, [r7, #28]
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d1da      	bne.n	800b0a0 <create_chain+0x68>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e038      	b.n	800b160 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b0ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f4:	69f9      	ldr	r1, [r7, #28]
 800b0f6:	6938      	ldr	r0, [r7, #16]
 800b0f8:	f7ff fe1d 	bl	800ad36 <put_fat>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d109      	bne.n	800b11a <create_chain+0xe2>
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d006      	beq.n	800b11a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b10c:	69fa      	ldr	r2, [r7, #28]
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6938      	ldr	r0, [r7, #16]
 800b112:	f7ff fe10 	bl	800ad36 <put_fat>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d116      	bne.n	800b14e <create_chain+0x116>
		fs->last_clst = ncl;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	695a      	ldr	r2, [r3, #20]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	3b02      	subs	r3, #2
 800b130:	429a      	cmp	r2, r3
 800b132:	d804      	bhi.n	800b13e <create_chain+0x106>
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	1e5a      	subs	r2, r3, #1
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	791b      	ldrb	r3, [r3, #4]
 800b142:	f043 0301 	orr.w	r3, r3, #1
 800b146:	b2da      	uxtb	r2, r3
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	711a      	strb	r2, [r3, #4]
 800b14c:	e007      	b.n	800b15e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d102      	bne.n	800b15a <create_chain+0x122>
 800b154:	f04f 33ff 	mov.w	r3, #4294967295
 800b158:	e000      	b.n	800b15c <create_chain+0x124>
 800b15a:	2301      	movs	r3, #1
 800b15c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b15e:	69fb      	ldr	r3, [r7, #28]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3720      	adds	r7, #32
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	3304      	adds	r3, #4
 800b17e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	899b      	ldrh	r3, [r3, #12]
 800b184:	461a      	mov	r2, r3
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	8952      	ldrh	r2, [r2, #10]
 800b190:	fbb3 f3f2 	udiv	r3, r3, r2
 800b194:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	1d1a      	adds	r2, r3, #4
 800b19a:	613a      	str	r2, [r7, #16]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <clmt_clust+0x42>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e010      	b.n	800b1cc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d307      	bcc.n	800b1c2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	3304      	adds	r3, #4
 800b1be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1c0:	e7e9      	b.n	800b196 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b1c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	4413      	add	r3, r2
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	371c      	adds	r7, #28
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ee:	d204      	bcs.n	800b1fa <dir_sdi+0x22>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	f003 031f 	and.w	r3, r3, #31
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	e071      	b.n	800b2e2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <dir_sdi+0x46>
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d902      	bls.n	800b21e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10c      	bne.n	800b23e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	095b      	lsrs	r3, r3, #5
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	8912      	ldrh	r2, [r2, #8]
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d301      	bcc.n	800b234 <dir_sdi+0x5c>
 800b230:	2302      	movs	r3, #2
 800b232:	e056      	b.n	800b2e2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	61da      	str	r2, [r3, #28]
 800b23c:	e02d      	b.n	800b29a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	895b      	ldrh	r3, [r3, #10]
 800b242:	461a      	mov	r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	899b      	ldrh	r3, [r3, #12]
 800b248:	fb02 f303 	mul.w	r3, r2, r3
 800b24c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b24e:	e019      	b.n	800b284 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6979      	ldr	r1, [r7, #20]
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff fc9a 	bl	800ab8e <get_fat>
 800b25a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b262:	d101      	bne.n	800b268 <dir_sdi+0x90>
 800b264:	2301      	movs	r3, #1
 800b266:	e03c      	b.n	800b2e2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d904      	bls.n	800b278 <dir_sdi+0xa0>
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	429a      	cmp	r2, r3
 800b276:	d301      	bcc.n	800b27c <dir_sdi+0xa4>
 800b278:	2302      	movs	r3, #2
 800b27a:	e032      	b.n	800b2e2 <dir_sdi+0x10a>
			ofs -= csz;
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d2e1      	bcs.n	800b250 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b28c:	6979      	ldr	r1, [r7, #20]
 800b28e:	6938      	ldr	r0, [r7, #16]
 800b290:	f7ff fc5e 	bl	800ab50 <clust2sect>
 800b294:	4602      	mov	r2, r0
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <dir_sdi+0xd4>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	e01a      	b.n	800b2e2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	69da      	ldr	r2, [r3, #28]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	899b      	ldrh	r3, [r3, #12]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2bc:	441a      	add	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	899b      	ldrh	r3, [r3, #12]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2d4:	fb00 f202 	mul.w	r2, r0, r2
 800b2d8:	1a9b      	subs	r3, r3, r2
 800b2da:	18ca      	adds	r2, r1, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b086      	sub	sp, #24
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	3320      	adds	r3, #32
 800b300:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <dir_next+0x28>
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b310:	d301      	bcc.n	800b316 <dir_next+0x2c>
 800b312:	2304      	movs	r3, #4
 800b314:	e0bb      	b.n	800b48e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	899b      	ldrh	r3, [r3, #12]
 800b31a:	461a      	mov	r2, r3
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b322:	fb01 f202 	mul.w	r2, r1, r2
 800b326:	1a9b      	subs	r3, r3, r2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f040 809d 	bne.w	800b468 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10b      	bne.n	800b358 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	095b      	lsrs	r3, r3, #5
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	8912      	ldrh	r2, [r2, #8]
 800b348:	4293      	cmp	r3, r2
 800b34a:	f0c0 808d 	bcc.w	800b468 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	61da      	str	r2, [r3, #28]
 800b354:	2304      	movs	r3, #4
 800b356:	e09a      	b.n	800b48e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	899b      	ldrh	r3, [r3, #12]
 800b35c:	461a      	mov	r2, r3
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	fbb3 f3f2 	udiv	r3, r3, r2
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	8952      	ldrh	r2, [r2, #10]
 800b368:	3a01      	subs	r2, #1
 800b36a:	4013      	ands	r3, r2
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d17b      	bne.n	800b468 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	4619      	mov	r1, r3
 800b378:	4610      	mov	r0, r2
 800b37a:	f7ff fc08 	bl	800ab8e <get_fat>
 800b37e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d801      	bhi.n	800b38a <dir_next+0xa0>
 800b386:	2302      	movs	r3, #2
 800b388:	e081      	b.n	800b48e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b390:	d101      	bne.n	800b396 <dir_next+0xac>
 800b392:	2301      	movs	r3, #1
 800b394:	e07b      	b.n	800b48e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d359      	bcc.n	800b454 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	61da      	str	r2, [r3, #28]
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	e06e      	b.n	800b48e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f7ff fe3d 	bl	800b038 <create_chain>
 800b3be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <dir_next+0xe0>
 800b3c6:	2307      	movs	r3, #7
 800b3c8:	e061      	b.n	800b48e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d101      	bne.n	800b3d4 <dir_next+0xea>
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	e05c      	b.n	800b48e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3da:	d101      	bne.n	800b3e0 <dir_next+0xf6>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e056      	b.n	800b48e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fad3 	bl	800a98c <sync_window>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <dir_next+0x106>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e04e      	b.n	800b48e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	899b      	ldrh	r3, [r3, #12]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	f7ff f8fc 	bl	800a5fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b402:	2300      	movs	r3, #0
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	6979      	ldr	r1, [r7, #20]
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fba1 	bl	800ab50 <clust2sect>
 800b40e:	4602      	mov	r2, r0
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	631a      	str	r2, [r3, #48]	; 0x30
 800b414:	e012      	b.n	800b43c <dir_next+0x152>
						fs->wflag = 1;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff fab5 	bl	800a98c <sync_window>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <dir_next+0x142>
 800b428:	2301      	movs	r3, #1
 800b42a:	e030      	b.n	800b48e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	3301      	adds	r3, #1
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	631a      	str	r2, [r3, #48]	; 0x30
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	895b      	ldrh	r3, [r3, #10]
 800b440:	461a      	mov	r2, r3
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	4293      	cmp	r3, r2
 800b446:	d3e6      	bcc.n	800b416 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	1ad2      	subs	r2, r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b45a:	6979      	ldr	r1, [r7, #20]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7ff fb77 	bl	800ab50 <clust2sect>
 800b462:	4602      	mov	r2, r0
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	899b      	ldrh	r3, [r3, #12]
 800b478:	461a      	mov	r2, r3
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b480:	fb00 f202 	mul.w	r2, r0, r2
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	18ca      	adds	r2, r1, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff fe95 	bl	800b1d8 <dir_sdi>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d12b      	bne.n	800b510 <dir_alloc+0x7a>
		n = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	69db      	ldr	r3, [r3, #28]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7ff faa6 	bl	800aa14 <move_window>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11d      	bne.n	800b50e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2be5      	cmp	r3, #229	; 0xe5
 800b4da:	d004      	beq.n	800b4e6 <dir_alloc+0x50>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d107      	bne.n	800b4f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d102      	bne.n	800b4fa <dir_alloc+0x64>
 800b4f4:	e00c      	b.n	800b510 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff fef4 	bl	800b2ea <dir_next>
 800b502:	4603      	mov	r3, r0
 800b504:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0d7      	beq.n	800b4bc <dir_alloc+0x26>
 800b50c:	e000      	b.n	800b510 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b50e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	2b04      	cmp	r3, #4
 800b514:	d101      	bne.n	800b51a <dir_alloc+0x84>
 800b516:	2307      	movs	r3, #7
 800b518:	75fb      	strb	r3, [r7, #23]
	return res;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	331a      	adds	r3, #26
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe ffbe 	bl	800a4b4 <ld_word>
 800b538:	4603      	mov	r3, r0
 800b53a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b03      	cmp	r3, #3
 800b542:	d109      	bne.n	800b558 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	3314      	adds	r3, #20
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe ffb3 	bl	800a4b4 <ld_word>
 800b54e:	4603      	mov	r3, r0
 800b550:	041b      	lsls	r3, r3, #16
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b558:	68fb      	ldr	r3, [r7, #12]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	331a      	adds	r3, #26
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	b292      	uxth	r2, r2
 800b576:	4611      	mov	r1, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe ffd6 	bl	800a52a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b03      	cmp	r3, #3
 800b584:	d109      	bne.n	800b59a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f103 0214 	add.w	r2, r3, #20
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	0c1b      	lsrs	r3, r3, #16
 800b590:	b29b      	uxth	r3, r3
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f7fe ffc8 	bl	800a52a <st_word>
	}
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b086      	sub	sp, #24
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff fe10 	bl	800b1d8 <dir_sdi>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <dir_find+0x24>
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	e03e      	b.n	800b644 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6938      	ldr	r0, [r7, #16]
 800b5ce:	f7ff fa21 	bl	800aa14 <move_window>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5d6:	7dfb      	ldrb	r3, [r7, #23]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d12f      	bne.n	800b63c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <dir_find+0x4e>
 800b5ea:	2304      	movs	r3, #4
 800b5ec:	75fb      	strb	r3, [r7, #23]
 800b5ee:	e028      	b.n	800b642 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	330b      	adds	r3, #11
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	330b      	adds	r3, #11
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	f003 0308 	and.w	r3, r3, #8
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10a      	bne.n	800b628 <dir_find+0x86>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a18      	ldr	r0, [r3, #32]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3324      	adds	r3, #36	; 0x24
 800b61a:	220b      	movs	r2, #11
 800b61c:	4619      	mov	r1, r3
 800b61e:	f7ff f807 	bl	800a630 <mem_cmp>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b628:	2100      	movs	r1, #0
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fe5d 	bl	800b2ea <dir_next>
 800b630:	4603      	mov	r3, r0
 800b632:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0c5      	beq.n	800b5c6 <dir_find+0x24>
 800b63a:	e002      	b.n	800b642 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b63c:	bf00      	nop
 800b63e:	e000      	b.n	800b642 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b640:	bf00      	nop

	return res;
 800b642:	7dfb      	ldrb	r3, [r7, #23]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b65a:	2101      	movs	r1, #1
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff ff1a 	bl	800b496 <dir_alloc>
 800b662:	4603      	mov	r3, r0
 800b664:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11c      	bne.n	800b6a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	4619      	mov	r1, r3
 800b672:	68b8      	ldr	r0, [r7, #8]
 800b674:	f7ff f9ce 	bl	800aa14 <move_window>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d111      	bne.n	800b6a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	2220      	movs	r2, #32
 800b688:	2100      	movs	r1, #0
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe ffb5 	bl	800a5fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a18      	ldr	r0, [r3, #32]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3324      	adds	r3, #36	; 0x24
 800b698:	220b      	movs	r2, #11
 800b69a:	4619      	mov	r1, r3
 800b69c:	f7fe ff8c 	bl	800a5b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3324      	adds	r3, #36	; 0x24
 800b6c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b6c6:	220b      	movs	r2, #11
 800b6c8:	2120      	movs	r1, #32
 800b6ca:	68b8      	ldr	r0, [r7, #8]
 800b6cc:	f7fe ff95 	bl	800a5fa <mem_set>
	si = i = 0; ni = 8;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	61fb      	str	r3, [r7, #28]
 800b6d8:	2308      	movs	r3, #8
 800b6da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	61fa      	str	r2, [r7, #28]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b6ea:	7efb      	ldrb	r3, [r7, #27]
 800b6ec:	2b20      	cmp	r3, #32
 800b6ee:	d94e      	bls.n	800b78e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b6f0:	7efb      	ldrb	r3, [r7, #27]
 800b6f2:	2b2f      	cmp	r3, #47	; 0x2f
 800b6f4:	d006      	beq.n	800b704 <create_name+0x54>
 800b6f6:	7efb      	ldrb	r3, [r7, #27]
 800b6f8:	2b5c      	cmp	r3, #92	; 0x5c
 800b6fa:	d110      	bne.n	800b71e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b6fc:	e002      	b.n	800b704 <create_name+0x54>
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	3301      	adds	r3, #1
 800b702:	61fb      	str	r3, [r7, #28]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b2f      	cmp	r3, #47	; 0x2f
 800b70e:	d0f6      	beq.n	800b6fe <create_name+0x4e>
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	4413      	add	r3, r2
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b5c      	cmp	r3, #92	; 0x5c
 800b71a:	d0f0      	beq.n	800b6fe <create_name+0x4e>
			break;
 800b71c:	e038      	b.n	800b790 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b71e:	7efb      	ldrb	r3, [r7, #27]
 800b720:	2b2e      	cmp	r3, #46	; 0x2e
 800b722:	d003      	beq.n	800b72c <create_name+0x7c>
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d30c      	bcc.n	800b746 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b0b      	cmp	r3, #11
 800b730:	d002      	beq.n	800b738 <create_name+0x88>
 800b732:	7efb      	ldrb	r3, [r7, #27]
 800b734:	2b2e      	cmp	r3, #46	; 0x2e
 800b736:	d001      	beq.n	800b73c <create_name+0x8c>
 800b738:	2306      	movs	r3, #6
 800b73a:	e044      	b.n	800b7c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b73c:	2308      	movs	r3, #8
 800b73e:	613b      	str	r3, [r7, #16]
 800b740:	230b      	movs	r3, #11
 800b742:	617b      	str	r3, [r7, #20]
			continue;
 800b744:	e022      	b.n	800b78c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b746:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	da04      	bge.n	800b758 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b74e:	7efb      	ldrb	r3, [r7, #27]
 800b750:	3b80      	subs	r3, #128	; 0x80
 800b752:	4a1f      	ldr	r2, [pc, #124]	; (800b7d0 <create_name+0x120>)
 800b754:	5cd3      	ldrb	r3, [r2, r3]
 800b756:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b758:	7efb      	ldrb	r3, [r7, #27]
 800b75a:	4619      	mov	r1, r3
 800b75c:	481d      	ldr	r0, [pc, #116]	; (800b7d4 <create_name+0x124>)
 800b75e:	f7fe ff8e 	bl	800a67e <chk_chr>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <create_name+0xbc>
 800b768:	2306      	movs	r3, #6
 800b76a:	e02c      	b.n	800b7c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b76c:	7efb      	ldrb	r3, [r7, #27]
 800b76e:	2b60      	cmp	r3, #96	; 0x60
 800b770:	d905      	bls.n	800b77e <create_name+0xce>
 800b772:	7efb      	ldrb	r3, [r7, #27]
 800b774:	2b7a      	cmp	r3, #122	; 0x7a
 800b776:	d802      	bhi.n	800b77e <create_name+0xce>
 800b778:	7efb      	ldrb	r3, [r7, #27]
 800b77a:	3b20      	subs	r3, #32
 800b77c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	613a      	str	r2, [r7, #16]
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	4413      	add	r3, r2
 800b788:	7efa      	ldrb	r2, [r7, #27]
 800b78a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b78c:	e7a6      	b.n	800b6dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b78e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	441a      	add	r2, r3
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <create_name+0xf4>
 800b7a0:	2306      	movs	r3, #6
 800b7a2:	e010      	b.n	800b7c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2be5      	cmp	r3, #229	; 0xe5
 800b7aa:	d102      	bne.n	800b7b2 <create_name+0x102>
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2205      	movs	r2, #5
 800b7b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b7b2:	7efb      	ldrb	r3, [r7, #27]
 800b7b4:	2b20      	cmp	r3, #32
 800b7b6:	d801      	bhi.n	800b7bc <create_name+0x10c>
 800b7b8:	2204      	movs	r2, #4
 800b7ba:	e000      	b.n	800b7be <create_name+0x10e>
 800b7bc:	2200      	movs	r2, #0
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	330b      	adds	r3, #11
 800b7c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b7c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3720      	adds	r7, #32
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	0800e818 	.word	0x0800e818
 800b7d4:	0800e7a8 	.word	0x0800e7a8

0800b7d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b7ec:	e002      	b.n	800b7f4 <follow_path+0x1c>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b2f      	cmp	r3, #47	; 0x2f
 800b7fa:	d0f8      	beq.n	800b7ee <follow_path+0x16>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b5c      	cmp	r3, #92	; 0x5c
 800b802:	d0f4      	beq.n	800b7ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2200      	movs	r2, #0
 800b808:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b1f      	cmp	r3, #31
 800b810:	d80a      	bhi.n	800b828 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2280      	movs	r2, #128	; 0x80
 800b816:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b81a:	2100      	movs	r1, #0
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fcdb 	bl	800b1d8 <dir_sdi>
 800b822:	4603      	mov	r3, r0
 800b824:	75fb      	strb	r3, [r7, #23]
 800b826:	e048      	b.n	800b8ba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b828:	463b      	mov	r3, r7
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff ff3f 	bl	800b6b0 <create_name>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d139      	bne.n	800b8b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff feb0 	bl	800b5a2 <dir_find>
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b84c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00a      	beq.n	800b86a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	2b04      	cmp	r3, #4
 800b858:	d12c      	bne.n	800b8b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d127      	bne.n	800b8b4 <follow_path+0xdc>
 800b864:	2305      	movs	r3, #5
 800b866:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b868:	e024      	b.n	800b8b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	2b00      	cmp	r3, #0
 800b872:	d121      	bne.n	800b8b8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	799b      	ldrb	r3, [r3, #6]
 800b878:	f003 0310 	and.w	r3, r3, #16
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d102      	bne.n	800b886 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b880:	2305      	movs	r3, #5
 800b882:	75fb      	strb	r3, [r7, #23]
 800b884:	e019      	b.n	800b8ba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	8992      	ldrh	r2, [r2, #12]
 800b894:	fbb3 f0f2 	udiv	r0, r3, r2
 800b898:	fb00 f202 	mul.w	r2, r0, r2
 800b89c:	1a9b      	subs	r3, r3, r2
 800b89e:	440b      	add	r3, r1
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff fe3e 	bl	800b524 <ld_clust>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b8ae:	e7bb      	b.n	800b828 <follow_path+0x50>
			if (res != FR_OK) break;
 800b8b0:	bf00      	nop
 800b8b2:	e002      	b.n	800b8ba <follow_path+0xe2>
				break;
 800b8b4:	bf00      	nop
 800b8b6:	e000      	b.n	800b8ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8b8:	bf00      	nop
			}
		}
	}

	return res;
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d031      	beq.n	800b93e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	e002      	b.n	800b8e8 <get_ldnumber+0x24>
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d903      	bls.n	800b8f8 <get_ldnumber+0x34>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b3a      	cmp	r3, #58	; 0x3a
 800b8f6:	d1f4      	bne.n	800b8e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b3a      	cmp	r3, #58	; 0x3a
 800b8fe:	d11c      	bne.n	800b93a <get_ldnumber+0x76>
			tp = *path;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	60fa      	str	r2, [r7, #12]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	3b30      	subs	r3, #48	; 0x30
 800b910:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b09      	cmp	r3, #9
 800b916:	d80e      	bhi.n	800b936 <get_ldnumber+0x72>
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d10a      	bne.n	800b936 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d107      	bne.n	800b936 <get_ldnumber+0x72>
					vol = (int)i;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	3301      	adds	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	e002      	b.n	800b940 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b93a:	2300      	movs	r3, #0
 800b93c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b93e:	693b      	ldr	r3, [r7, #16]
}
 800b940:	4618      	mov	r0, r3
 800b942:	371c      	adds	r7, #28
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	70da      	strb	r2, [r3, #3]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295
 800b962:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff f854 	bl	800aa14 <move_window>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <check_fs+0x2a>
 800b972:	2304      	movs	r3, #4
 800b974:	e038      	b.n	800b9e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	3334      	adds	r3, #52	; 0x34
 800b97a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fd98 	bl	800a4b4 <ld_word>
 800b984:	4603      	mov	r3, r0
 800b986:	461a      	mov	r2, r3
 800b988:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d001      	beq.n	800b994 <check_fs+0x48>
 800b990:	2303      	movs	r3, #3
 800b992:	e029      	b.n	800b9e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b99a:	2be9      	cmp	r3, #233	; 0xe9
 800b99c:	d009      	beq.n	800b9b2 <check_fs+0x66>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9a4:	2beb      	cmp	r3, #235	; 0xeb
 800b9a6:	d11e      	bne.n	800b9e6 <check_fs+0x9a>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b9ae:	2b90      	cmp	r3, #144	; 0x90
 800b9b0:	d119      	bne.n	800b9e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3334      	adds	r3, #52	; 0x34
 800b9b6:	3336      	adds	r3, #54	; 0x36
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fe fd93 	bl	800a4e4 <ld_dword>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b9c4:	4a0a      	ldr	r2, [pc, #40]	; (800b9f0 <check_fs+0xa4>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d101      	bne.n	800b9ce <check_fs+0x82>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e00c      	b.n	800b9e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	3334      	adds	r3, #52	; 0x34
 800b9d2:	3352      	adds	r3, #82	; 0x52
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fd85 	bl	800a4e4 <ld_dword>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4a05      	ldr	r2, [pc, #20]	; (800b9f4 <check_fs+0xa8>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d101      	bne.n	800b9e6 <check_fs+0x9a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e000      	b.n	800b9e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b9e6:	2302      	movs	r3, #2
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	00544146 	.word	0x00544146
 800b9f4:	33544146 	.word	0x33544146

0800b9f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b096      	sub	sp, #88	; 0x58
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff ff59 	bl	800b8c4 <get_ldnumber>
 800ba12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da01      	bge.n	800ba1e <find_volume+0x26>
 800ba1a:	230b      	movs	r3, #11
 800ba1c:	e262      	b.n	800bee4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ba1e:	4a9f      	ldr	r2, [pc, #636]	; (800bc9c <find_volume+0x2a4>)
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <find_volume+0x3a>
 800ba2e:	230c      	movs	r3, #12
 800ba30:	e258      	b.n	800bee4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	f023 0301 	bic.w	r3, r3, #1
 800ba3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01a      	beq.n	800ba7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fc93 	bl	800a378 <disk_status>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ba58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10c      	bne.n	800ba7e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <find_volume+0x82>
 800ba6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba6e:	f003 0304 	and.w	r3, r3, #4
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ba76:	230a      	movs	r3, #10
 800ba78:	e234      	b.n	800bee4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e232      	b.n	800bee4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ba84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	785b      	ldrb	r3, [r3, #1]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fe fc8b 	bl	800a3ac <disk_initialize>
 800ba96:	4603      	mov	r3, r0
 800ba98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ba9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800baa8:	2303      	movs	r3, #3
 800baaa:	e21b      	b.n	800bee4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d007      	beq.n	800bac2 <find_volume+0xca>
 800bab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bab6:	f003 0304 	and.w	r3, r3, #4
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800babe:	230a      	movs	r3, #10
 800bac0:	e210      	b.n	800bee4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	7858      	ldrb	r0, [r3, #1]
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	330c      	adds	r3, #12
 800baca:	461a      	mov	r2, r3
 800bacc:	2102      	movs	r1, #2
 800bace:	f7fe fcd3 	bl	800a478 <disk_ioctl>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <find_volume+0xe4>
 800bad8:	2301      	movs	r3, #1
 800bada:	e203      	b.n	800bee4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800badc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bade:	899b      	ldrh	r3, [r3, #12]
 800bae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae4:	d80d      	bhi.n	800bb02 <find_volume+0x10a>
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	899b      	ldrh	r3, [r3, #12]
 800baea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baee:	d308      	bcc.n	800bb02 <find_volume+0x10a>
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	899b      	ldrh	r3, [r3, #12]
 800baf4:	461a      	mov	r2, r3
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	899b      	ldrh	r3, [r3, #12]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	4013      	ands	r3, r2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <find_volume+0x10e>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e1ee      	b.n	800bee4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bb0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb0e:	f7ff ff1d 	bl	800b94c <check_fs>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bb18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d149      	bne.n	800bbb4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb20:	2300      	movs	r3, #0
 800bb22:	643b      	str	r3, [r7, #64]	; 0x40
 800bb24:	e01e      	b.n	800bb64 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bb34:	4413      	add	r3, r2
 800bb36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d006      	beq.n	800bb50 <find_volume+0x158>
 800bb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb44:	3308      	adds	r3, #8
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fccc 	bl	800a4e4 <ld_dword>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	e000      	b.n	800bb52 <find_volume+0x15a>
 800bb50:	2200      	movs	r2, #0
 800bb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	3358      	adds	r3, #88	; 0x58
 800bb58:	443b      	add	r3, r7
 800bb5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb60:	3301      	adds	r3, #1
 800bb62:	643b      	str	r3, [r7, #64]	; 0x40
 800bb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d9dd      	bls.n	800bb26 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <find_volume+0x182>
 800bb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb76:	3b01      	subs	r3, #1
 800bb78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bb7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	3358      	adds	r3, #88	; 0x58
 800bb80:	443b      	add	r3, r7
 800bb82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bb86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <find_volume+0x1a2>
 800bb8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb92:	f7ff fedb 	bl	800b94c <check_fs>
 800bb96:	4603      	mov	r3, r0
 800bb98:	e000      	b.n	800bb9c <find_volume+0x1a4>
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d905      	bls.n	800bbb4 <find_volume+0x1bc>
 800bba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbaa:	3301      	adds	r3, #1
 800bbac:	643b      	str	r3, [r7, #64]	; 0x40
 800bbae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d9e2      	bls.n	800bb7a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bbb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	d101      	bne.n	800bbc0 <find_volume+0x1c8>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e191      	b.n	800bee4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bbc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d901      	bls.n	800bbcc <find_volume+0x1d4>
 800bbc8:	230d      	movs	r3, #13
 800bbca:	e18b      	b.n	800bee4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	3334      	adds	r3, #52	; 0x34
 800bbd0:	330b      	adds	r3, #11
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fc6e 	bl	800a4b4 <ld_word>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	899b      	ldrh	r3, [r3, #12]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d001      	beq.n	800bbe8 <find_volume+0x1f0>
 800bbe4:	230d      	movs	r3, #13
 800bbe6:	e17d      	b.n	800bee4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	3334      	adds	r3, #52	; 0x34
 800bbec:	3316      	adds	r3, #22
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fe fc60 	bl	800a4b4 <ld_word>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bbf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <find_volume+0x214>
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	3334      	adds	r3, #52	; 0x34
 800bc02:	3324      	adds	r3, #36	; 0x24
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe fc6d 	bl	800a4e4 <ld_dword>
 800bc0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc10:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	789b      	ldrb	r3, [r3, #2]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d005      	beq.n	800bc30 <find_volume+0x238>
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	789b      	ldrb	r3, [r3, #2]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d001      	beq.n	800bc30 <find_volume+0x238>
 800bc2c:	230d      	movs	r3, #13
 800bc2e:	e159      	b.n	800bee4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	789b      	ldrb	r3, [r3, #2]
 800bc34:	461a      	mov	r2, r3
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	fb02 f303 	mul.w	r3, r2, r3
 800bc3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	895b      	ldrh	r3, [r3, #10]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d008      	beq.n	800bc64 <find_volume+0x26c>
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	895b      	ldrh	r3, [r3, #10]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	895b      	ldrh	r3, [r3, #10]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	4013      	ands	r3, r2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <find_volume+0x270>
 800bc64:	230d      	movs	r3, #13
 800bc66:	e13d      	b.n	800bee4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	3334      	adds	r3, #52	; 0x34
 800bc6c:	3311      	adds	r3, #17
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fc20 	bl	800a4b4 <ld_word>
 800bc74:	4603      	mov	r3, r0
 800bc76:	461a      	mov	r2, r3
 800bc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	891b      	ldrh	r3, [r3, #8]
 800bc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc82:	8992      	ldrh	r2, [r2, #12]
 800bc84:	0952      	lsrs	r2, r2, #5
 800bc86:	b292      	uxth	r2, r2
 800bc88:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc8c:	fb01 f202 	mul.w	r2, r1, r2
 800bc90:	1a9b      	subs	r3, r3, r2
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <find_volume+0x2a8>
 800bc98:	230d      	movs	r3, #13
 800bc9a:	e123      	b.n	800bee4 <find_volume+0x4ec>
 800bc9c:	200037ac 	.word	0x200037ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca2:	3334      	adds	r3, #52	; 0x34
 800bca4:	3313      	adds	r3, #19
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe fc04 	bl	800a4b4 <ld_word>
 800bcac:	4603      	mov	r3, r0
 800bcae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d106      	bne.n	800bcc4 <find_volume+0x2cc>
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	3334      	adds	r3, #52	; 0x34
 800bcba:	3320      	adds	r3, #32
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fe fc11 	bl	800a4e4 <ld_dword>
 800bcc2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	3334      	adds	r3, #52	; 0x34
 800bcc8:	330e      	adds	r3, #14
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fbf2 	bl	800a4b4 <ld_word>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bcd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <find_volume+0x2e6>
 800bcda:	230d      	movs	r3, #13
 800bcdc:	e102      	b.n	800bee4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bcde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce2:	4413      	add	r3, r2
 800bce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bce6:	8911      	ldrh	r1, [r2, #8]
 800bce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcea:	8992      	ldrh	r2, [r2, #12]
 800bcec:	0952      	lsrs	r2, r2, #5
 800bcee:	b292      	uxth	r2, r2
 800bcf0:	fbb1 f2f2 	udiv	r2, r1, r2
 800bcf4:	b292      	uxth	r2, r2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bcfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d201      	bcs.n	800bd06 <find_volume+0x30e>
 800bd02:	230d      	movs	r3, #13
 800bd04:	e0ee      	b.n	800bee4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bd06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd0e:	8952      	ldrh	r2, [r2, #10]
 800bd10:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <find_volume+0x328>
 800bd1c:	230d      	movs	r3, #13
 800bd1e:	e0e1      	b.n	800bee4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800bd20:	2303      	movs	r3, #3
 800bd22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d802      	bhi.n	800bd36 <find_volume+0x33e>
 800bd30:	2302      	movs	r3, #2
 800bd32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d802      	bhi.n	800bd46 <find_volume+0x34e>
 800bd40:	2301      	movs	r3, #1
 800bd42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	1c9a      	adds	r2, r3, #2
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd52:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bd54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd58:	441a      	add	r2, r3
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bd5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	441a      	add	r2, r3
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bd68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d11e      	bne.n	800bdae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	3334      	adds	r3, #52	; 0x34
 800bd74:	332a      	adds	r3, #42	; 0x2a
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fb9c 	bl	800a4b4 <ld_word>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <find_volume+0x38e>
 800bd82:	230d      	movs	r3, #13
 800bd84:	e0ae      	b.n	800bee4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	891b      	ldrh	r3, [r3, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <find_volume+0x39a>
 800bd8e:	230d      	movs	r3, #13
 800bd90:	e0a8      	b.n	800bee4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	3334      	adds	r3, #52	; 0x34
 800bd96:	332c      	adds	r3, #44	; 0x2c
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe fba3 	bl	800a4e4 <ld_dword>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	647b      	str	r3, [r7, #68]	; 0x44
 800bdac:	e01f      	b.n	800bdee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	891b      	ldrh	r3, [r3, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <find_volume+0x3c2>
 800bdb6:	230d      	movs	r3, #13
 800bdb8:	e094      	b.n	800bee4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc0:	441a      	add	r2, r3
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bdc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d103      	bne.n	800bdd6 <find_volume+0x3de>
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	e00a      	b.n	800bdec <find_volume+0x3f4>
 800bdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd8:	699a      	ldr	r2, [r3, #24]
 800bdda:	4613      	mov	r3, r2
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	4413      	add	r3, r2
 800bde0:	085a      	lsrs	r2, r3, #1
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bdec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	69da      	ldr	r2, [r3, #28]
 800bdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf4:	899b      	ldrh	r3, [r3, #12]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be00:	8989      	ldrh	r1, [r1, #12]
 800be02:	fbb3 f3f1 	udiv	r3, r3, r1
 800be06:	429a      	cmp	r2, r3
 800be08:	d201      	bcs.n	800be0e <find_volume+0x416>
 800be0a:	230d      	movs	r3, #13
 800be0c:	e06a      	b.n	800bee4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	f04f 32ff 	mov.w	r2, #4294967295
 800be14:	615a      	str	r2, [r3, #20]
 800be16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be18:	695a      	ldr	r2, [r3, #20]
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	2280      	movs	r2, #128	; 0x80
 800be22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800be24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d149      	bne.n	800bec0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	3334      	adds	r3, #52	; 0x34
 800be30:	3330      	adds	r3, #48	; 0x30
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fb3e 	bl	800a4b4 <ld_word>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d140      	bne.n	800bec0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800be3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be40:	3301      	adds	r3, #1
 800be42:	4619      	mov	r1, r3
 800be44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be46:	f7fe fde5 	bl	800aa14 <move_window>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d137      	bne.n	800bec0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	2200      	movs	r2, #0
 800be54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	3334      	adds	r3, #52	; 0x34
 800be5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fe fb28 	bl	800a4b4 <ld_word>
 800be64:	4603      	mov	r3, r0
 800be66:	461a      	mov	r2, r3
 800be68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d127      	bne.n	800bec0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800be70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be72:	3334      	adds	r3, #52	; 0x34
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fb35 	bl	800a4e4 <ld_dword>
 800be7a:	4603      	mov	r3, r0
 800be7c:	4a1b      	ldr	r2, [pc, #108]	; (800beec <find_volume+0x4f4>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d11e      	bne.n	800bec0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	3334      	adds	r3, #52	; 0x34
 800be86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe fb2a 	bl	800a4e4 <ld_dword>
 800be90:	4603      	mov	r3, r0
 800be92:	4a17      	ldr	r2, [pc, #92]	; (800bef0 <find_volume+0x4f8>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d113      	bne.n	800bec0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	3334      	adds	r3, #52	; 0x34
 800be9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe fb1f 	bl	800a4e4 <ld_dword>
 800bea6:	4602      	mov	r2, r0
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	3334      	adds	r3, #52	; 0x34
 800beb0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fe fb15 	bl	800a4e4 <ld_dword>
 800beba:	4602      	mov	r2, r0
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bec6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bec8:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <find_volume+0x4fc>)
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	b29a      	uxth	r2, r3
 800bed0:	4b08      	ldr	r3, [pc, #32]	; (800bef4 <find_volume+0x4fc>)
 800bed2:	801a      	strh	r2, [r3, #0]
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <find_volume+0x4fc>)
 800bed6:	881a      	ldrh	r2, [r3, #0]
 800bed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beda:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bedc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bede:	f7fe fd31 	bl	800a944 <clear_lock>
#endif
	return FR_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3758      	adds	r7, #88	; 0x58
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	41615252 	.word	0x41615252
 800bef0:	61417272 	.word	0x61417272
 800bef4:	200037b0 	.word	0x200037b0

0800bef8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bf02:	2309      	movs	r3, #9
 800bf04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01c      	beq.n	800bf46 <validate+0x4e>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d018      	beq.n	800bf46 <validate+0x4e>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d013      	beq.n	800bf46 <validate+0x4e>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	889a      	ldrh	r2, [r3, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	88db      	ldrh	r3, [r3, #6]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d10c      	bne.n	800bf46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	785b      	ldrb	r3, [r3, #1]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fa20 	bl	800a378 <disk_status>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <validate+0x4e>
			res = FR_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d102      	bne.n	800bf52 <validate+0x5a>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	e000      	b.n	800bf54 <validate+0x5c>
 800bf52:	2300      	movs	r3, #0
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	6013      	str	r3, [r2, #0]
	return res;
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bf76:	f107 0310 	add.w	r3, r7, #16
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fca2 	bl	800b8c4 <get_ldnumber>
 800bf80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	da01      	bge.n	800bf8c <f_mount+0x28>
 800bf88:	230b      	movs	r3, #11
 800bf8a:	e02b      	b.n	800bfe4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bf8c:	4a17      	ldr	r2, [pc, #92]	; (800bfec <f_mount+0x88>)
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d005      	beq.n	800bfa8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bf9c:	69b8      	ldr	r0, [r7, #24]
 800bf9e:	f7fe fcd1 	bl	800a944 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	490d      	ldr	r1, [pc, #52]	; (800bfec <f_mount+0x88>)
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <f_mount+0x66>
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d001      	beq.n	800bfce <f_mount+0x6a>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e00a      	b.n	800bfe4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bfce:	f107 010c 	add.w	r1, r7, #12
 800bfd2:	f107 0308 	add.w	r3, r7, #8
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff fd0d 	bl	800b9f8 <find_volume>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3720      	adds	r7, #32
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	200037ac 	.word	0x200037ac

0800bff0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b098      	sub	sp, #96	; 0x60
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	4613      	mov	r3, r2
 800bffc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <f_open+0x18>
 800c004:	2309      	movs	r3, #9
 800c006:	e1bb      	b.n	800c380 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c008:	79fb      	ldrb	r3, [r7, #7]
 800c00a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c00e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c010:	79fa      	ldrb	r2, [r7, #7]
 800c012:	f107 0110 	add.w	r1, r7, #16
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff fcec 	bl	800b9f8 <find_volume>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f040 819f 	bne.w	800c36e <f_open+0x37e>
		dj.obj.fs = fs;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	f107 0314 	add.w	r3, r7, #20
 800c03a:	4611      	mov	r1, r2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fbcb 	bl	800b7d8 <follow_path>
 800c042:	4603      	mov	r3, r0
 800c044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d11a      	bne.n	800c086 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c050:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c054:	b25b      	sxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	da03      	bge.n	800c062 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c05a:	2306      	movs	r3, #6
 800c05c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c060:	e011      	b.n	800c086 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf14      	ite	ne
 800c06c:	2301      	movne	r3, #1
 800c06e:	2300      	moveq	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461a      	mov	r2, r3
 800c074:	f107 0314 	add.w	r3, r7, #20
 800c078:	4611      	mov	r1, r2
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe fb1a 	bl	800a6b4 <chk_lock>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	f003 031c 	and.w	r3, r3, #28
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d07f      	beq.n	800c190 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c094:	2b00      	cmp	r3, #0
 800c096:	d017      	beq.n	800c0c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d10e      	bne.n	800c0be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c0a0:	f7fe fb64 	bl	800a76c <enq_lock>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d006      	beq.n	800c0b8 <f_open+0xc8>
 800c0aa:	f107 0314 	add.w	r3, r7, #20
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff facc 	bl	800b64c <dir_register>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	e000      	b.n	800c0ba <f_open+0xca>
 800c0b8:	2312      	movs	r3, #18
 800c0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	f043 0308 	orr.w	r3, r3, #8
 800c0c4:	71fb      	strb	r3, [r7, #7]
 800c0c6:	e010      	b.n	800c0ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c0c8:	7ebb      	ldrb	r3, [r7, #26]
 800c0ca:	f003 0311 	and.w	r3, r3, #17
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <f_open+0xea>
					res = FR_DENIED;
 800c0d2:	2307      	movs	r3, #7
 800c0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c0d8:	e007      	b.n	800c0ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c0da:	79fb      	ldrb	r3, [r7, #7]
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <f_open+0xfa>
 800c0e4:	2308      	movs	r3, #8
 800c0e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d168      	bne.n	800c1c4 <f_open+0x1d4>
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	f003 0308 	and.w	r3, r3, #8
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d063      	beq.n	800c1c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c0fc:	f7fd ffb6 	bl	800a06c <get_fattime>
 800c100:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c104:	330e      	adds	r3, #14
 800c106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fa29 	bl	800a560 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c110:	3316      	adds	r3, #22
 800c112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe fa23 	bl	800a560 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11c:	330b      	adds	r3, #11
 800c11e:	2220      	movs	r2, #32
 800c120:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff f9fb 	bl	800b524 <ld_clust>
 800c12e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c134:	2200      	movs	r2, #0
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff fa13 	bl	800b562 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13e:	331c      	adds	r3, #28
 800c140:	2100      	movs	r1, #0
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe fa0c 	bl	800a560 <st_dword>
					fs->wflag = 1;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2201      	movs	r2, #1
 800c14c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c150:	2b00      	cmp	r3, #0
 800c152:	d037      	beq.n	800c1c4 <f_open+0x1d4>
						dw = fs->winsect;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c158:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c15a:	f107 0314 	add.w	r3, r7, #20
 800c15e:	2200      	movs	r2, #0
 800c160:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe ff03 	bl	800af6e <remove_chain>
 800c168:	4603      	mov	r3, r0
 800c16a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c16e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c172:	2b00      	cmp	r3, #0
 800c174:	d126      	bne.n	800c1c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fc4a 	bl	800aa14 <move_window>
 800c180:	4603      	mov	r3, r0
 800c182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c18a:	3a01      	subs	r2, #1
 800c18c:	611a      	str	r2, [r3, #16]
 800c18e:	e019      	b.n	800c1c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c194:	2b00      	cmp	r3, #0
 800c196:	d115      	bne.n	800c1c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c198:	7ebb      	ldrb	r3, [r7, #26]
 800c19a:	f003 0310 	and.w	r3, r3, #16
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d003      	beq.n	800c1aa <f_open+0x1ba>
					res = FR_NO_FILE;
 800c1a2:	2304      	movs	r3, #4
 800c1a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c1a8:	e00c      	b.n	800c1c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	f003 0302 	and.w	r3, r3, #2
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d007      	beq.n	800c1c4 <f_open+0x1d4>
 800c1b4:	7ebb      	ldrb	r3, [r7, #26]
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <f_open+0x1d4>
						res = FR_DENIED;
 800c1be:	2307      	movs	r3, #7
 800c1c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c1c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d128      	bne.n	800c21e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c1cc:	79fb      	ldrb	r3, [r7, #7]
 800c1ce:	f003 0308 	and.w	r3, r3, #8
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c1d6:	79fb      	ldrb	r3, [r7, #7]
 800c1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bf14      	ite	ne
 800c1f6:	2301      	movne	r3, #1
 800c1f8:	2300      	moveq	r3, #0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	f107 0314 	add.w	r3, r7, #20
 800c202:	4611      	mov	r1, r2
 800c204:	4618      	mov	r0, r3
 800c206:	f7fe fad3 	bl	800a7b0 <inc_lock>
 800c20a:	4602      	mov	r2, r0
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <f_open+0x22e>
 800c218:	2302      	movs	r3, #2
 800c21a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c21e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c222:	2b00      	cmp	r3, #0
 800c224:	f040 80a3 	bne.w	800c36e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c22c:	4611      	mov	r1, r2
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff f978 	bl	800b524 <ld_clust>
 800c234:	4602      	mov	r2, r0
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	331c      	adds	r3, #28
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fe f950 	bl	800a4e4 <ld_dword>
 800c244:	4602      	mov	r2, r0
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	88da      	ldrh	r2, [r3, #6]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	79fa      	ldrb	r2, [r7, #7]
 800c262:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3330      	adds	r3, #48	; 0x30
 800c27a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c27e:	2100      	movs	r1, #0
 800c280:	4618      	mov	r0, r3
 800c282:	f7fe f9ba 	bl	800a5fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	f003 0320 	and.w	r3, r3, #32
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d06e      	beq.n	800c36e <f_open+0x37e>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d06a      	beq.n	800c36e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	895b      	ldrh	r3, [r3, #10]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	899b      	ldrh	r3, [r3, #12]
 800c2aa:	fb02 f303 	mul.w	r3, r2, r3
 800c2ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	657b      	str	r3, [r7, #84]	; 0x54
 800c2bc:	e016      	b.n	800c2ec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe fc63 	bl	800ab8e <get_fat>
 800c2c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c2ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d802      	bhi.n	800c2d6 <f_open+0x2e6>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c2d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2dc:	d102      	bne.n	800c2e4 <f_open+0x2f4>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	657b      	str	r3, [r7, #84]	; 0x54
 800c2ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d103      	bne.n	800c2fc <f_open+0x30c>
 800c2f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d8e0      	bhi.n	800c2be <f_open+0x2ce>
				}
				fp->clust = clst;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c300:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c306:	2b00      	cmp	r3, #0
 800c308:	d131      	bne.n	800c36e <f_open+0x37e>
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	899b      	ldrh	r3, [r3, #12]
 800c30e:	461a      	mov	r2, r3
 800c310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c312:	fbb3 f1f2 	udiv	r1, r3, r2
 800c316:	fb01 f202 	mul.w	r2, r1, r2
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d026      	beq.n	800c36e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c324:	4618      	mov	r0, r3
 800c326:	f7fe fc13 	bl	800ab50 <clust2sect>
 800c32a:	6478      	str	r0, [r7, #68]	; 0x44
 800c32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d103      	bne.n	800c33a <f_open+0x34a>
						res = FR_INT_ERR;
 800c332:	2302      	movs	r3, #2
 800c334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c338:	e019      	b.n	800c36e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	899b      	ldrh	r3, [r3, #12]
 800c33e:	461a      	mov	r2, r3
 800c340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c342:	fbb3 f2f2 	udiv	r2, r3, r2
 800c346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c348:	441a      	add	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	7858      	ldrb	r0, [r3, #1]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6a1a      	ldr	r2, [r3, #32]
 800c35c:	2301      	movs	r3, #1
 800c35e:	f7fe f84b 	bl	800a3f8 <disk_read>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <f_open+0x37e>
 800c368:	2301      	movs	r3, #1
 800c36a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c36e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <f_open+0x38c>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c37c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c380:	4618      	mov	r0, r3
 800c382:	3760      	adds	r7, #96	; 0x60
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08e      	sub	sp, #56	; 0x38
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f107 0214 	add.w	r2, r7, #20
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7ff fda5 	bl	800bef8 <validate>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c3b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d107      	bne.n	800c3cc <f_read+0x44>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	7d5b      	ldrb	r3, [r3, #21]
 800c3c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c3c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <f_read+0x4a>
 800c3cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3d0:	e135      	b.n	800c63e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	7d1b      	ldrb	r3, [r3, #20]
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <f_read+0x5a>
 800c3de:	2307      	movs	r3, #7
 800c3e0:	e12d      	b.n	800c63e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	68da      	ldr	r2, [r3, #12]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	f240 811e 	bls.w	800c634 <f_read+0x2ac>
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c3fc:	e11a      	b.n	800c634 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	8992      	ldrh	r2, [r2, #12]
 800c406:	fbb3 f1f2 	udiv	r1, r3, r2
 800c40a:	fb01 f202 	mul.w	r2, r1, r2
 800c40e:	1a9b      	subs	r3, r3, r2
 800c410:	2b00      	cmp	r3, #0
 800c412:	f040 80d5 	bne.w	800c5c0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	8992      	ldrh	r2, [r2, #12]
 800c41e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	8952      	ldrh	r2, [r2, #10]
 800c426:	3a01      	subs	r2, #1
 800c428:	4013      	ands	r3, r2
 800c42a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d12f      	bne.n	800c492 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	633b      	str	r3, [r7, #48]	; 0x30
 800c440:	e013      	b.n	800c46a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d007      	beq.n	800c45a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	4619      	mov	r1, r3
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7fe fe89 	bl	800b168 <clmt_clust>
 800c456:	6338      	str	r0, [r7, #48]	; 0x30
 800c458:	e007      	b.n	800c46a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	69db      	ldr	r3, [r3, #28]
 800c460:	4619      	mov	r1, r3
 800c462:	4610      	mov	r0, r2
 800c464:	f7fe fb93 	bl	800ab8e <get_fat>
 800c468:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d804      	bhi.n	800c47a <f_read+0xf2>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2202      	movs	r2, #2
 800c474:	755a      	strb	r2, [r3, #21]
 800c476:	2302      	movs	r3, #2
 800c478:	e0e1      	b.n	800c63e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c480:	d104      	bne.n	800c48c <f_read+0x104>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2201      	movs	r2, #1
 800c486:	755a      	strb	r2, [r3, #21]
 800c488:	2301      	movs	r3, #1
 800c48a:	e0d8      	b.n	800c63e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c490:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	4619      	mov	r1, r3
 800c49a:	4610      	mov	r0, r2
 800c49c:	f7fe fb58 	bl	800ab50 <clust2sect>
 800c4a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <f_read+0x12a>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	755a      	strb	r2, [r3, #21]
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e0c5      	b.n	800c63e <f_read+0x2b6>
			sect += csect;
 800c4b2:	69ba      	ldr	r2, [r7, #24]
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	899b      	ldrh	r3, [r3, #12]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d041      	beq.n	800c552 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4ce:	69fa      	ldr	r2, [r7, #28]
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	4413      	add	r3, r2
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	8952      	ldrh	r2, [r2, #10]
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d905      	bls.n	800c4e8 <f_read+0x160>
					cc = fs->csize - csect;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	895b      	ldrh	r3, [r3, #10]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	7858      	ldrb	r0, [r3, #1]
 800c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4f2:	f7fd ff81 	bl	800a3f8 <disk_read>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d004      	beq.n	800c506 <f_read+0x17e>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2201      	movs	r2, #1
 800c500:	755a      	strb	r2, [r3, #21]
 800c502:	2301      	movs	r3, #1
 800c504:	e09b      	b.n	800c63e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	7d1b      	ldrb	r3, [r3, #20]
 800c50a:	b25b      	sxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	da18      	bge.n	800c542 <f_read+0x1ba>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6a1a      	ldr	r2, [r3, #32]
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d911      	bls.n	800c542 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6a1a      	ldr	r2, [r3, #32]
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	8992      	ldrh	r2, [r2, #12]
 800c52a:	fb02 f303 	mul.w	r3, r2, r3
 800c52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c530:	18d0      	adds	r0, r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	899b      	ldrh	r3, [r3, #12]
 800c53c:	461a      	mov	r2, r3
 800c53e:	f7fe f83b 	bl	800a5b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	899b      	ldrh	r3, [r3, #12]
 800c546:	461a      	mov	r2, r3
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	fb02 f303 	mul.w	r3, r2, r3
 800c54e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c550:	e05c      	b.n	800c60c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	69ba      	ldr	r2, [r7, #24]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d02e      	beq.n	800c5ba <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	7d1b      	ldrb	r3, [r3, #20]
 800c560:	b25b      	sxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	da18      	bge.n	800c598 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	7858      	ldrb	r0, [r3, #1]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6a1a      	ldr	r2, [r3, #32]
 800c574:	2301      	movs	r3, #1
 800c576:	f7fd ff5f 	bl	800a438 <disk_write>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d004      	beq.n	800c58a <f_read+0x202>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2201      	movs	r2, #1
 800c584:	755a      	strb	r2, [r3, #21]
 800c586:	2301      	movs	r3, #1
 800c588:	e059      	b.n	800c63e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	7d1b      	ldrb	r3, [r3, #20]
 800c58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c592:	b2da      	uxtb	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	7858      	ldrb	r0, [r3, #1]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	f7fd ff27 	bl	800a3f8 <disk_read>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d004      	beq.n	800c5ba <f_read+0x232>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	755a      	strb	r2, [r3, #21]
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e041      	b.n	800c63e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	69ba      	ldr	r2, [r7, #24]
 800c5be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	899b      	ldrh	r3, [r3, #12]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	8992      	ldrh	r2, [r2, #12]
 800c5ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5d2:	fb01 f202 	mul.w	r2, r1, r2
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	1ac3      	subs	r3, r0, r3
 800c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d901      	bls.n	800c5e8 <f_read+0x260>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	699b      	ldr	r3, [r3, #24]
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	8992      	ldrh	r2, [r2, #12]
 800c5f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5fa:	fb00 f202 	mul.w	r2, r0, r2
 800c5fe:	1a9b      	subs	r3, r3, r2
 800c600:	440b      	add	r3, r1
 800c602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c604:	4619      	mov	r1, r3
 800c606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c608:	f7fd ffd6 	bl	800a5b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	4413      	add	r3, r2
 800c612:	627b      	str	r3, [r7, #36]	; 0x24
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	699a      	ldr	r2, [r3, #24]
 800c618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61a:	441a      	add	r2, r3
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	619a      	str	r2, [r3, #24]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c626:	441a      	add	r2, r3
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f47f aee1 	bne.w	800c3fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3738      	adds	r7, #56	; 0x38
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b08c      	sub	sp, #48	; 0x30
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f107 0210 	add.w	r2, r7, #16
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fc46 	bl	800bef8 <validate>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c676:	2b00      	cmp	r3, #0
 800c678:	d107      	bne.n	800c68a <f_write+0x44>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	7d5b      	ldrb	r3, [r3, #21]
 800c67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <f_write+0x4a>
 800c68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c68e:	e16a      	b.n	800c966 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	7d1b      	ldrb	r3, [r3, #20]
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <f_write+0x5a>
 800c69c:	2307      	movs	r3, #7
 800c69e:	e162      	b.n	800c966 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	699a      	ldr	r2, [r3, #24]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	441a      	add	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	f080 814c 	bcs.w	800c94a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	43db      	mvns	r3, r3
 800c6b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c6ba:	e146      	b.n	800c94a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	8992      	ldrh	r2, [r2, #12]
 800c6c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6c8:	fb01 f202 	mul.w	r2, r1, r2
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f040 80f1 	bne.w	800c8b6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	8992      	ldrh	r2, [r2, #12]
 800c6dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	8952      	ldrh	r2, [r2, #10]
 800c6e4:	3a01      	subs	r2, #1
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d143      	bne.n	800c778 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10c      	bne.n	800c712 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	2b00      	cmp	r3, #0
 800c702:	d11a      	bne.n	800c73a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2100      	movs	r1, #0
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fc95 	bl	800b038 <create_chain>
 800c70e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c710:	e013      	b.n	800c73a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c716:	2b00      	cmp	r3, #0
 800c718:	d007      	beq.n	800c72a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	4619      	mov	r1, r3
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f7fe fd21 	bl	800b168 <clmt_clust>
 800c726:	62b8      	str	r0, [r7, #40]	; 0x28
 800c728:	e007      	b.n	800c73a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	69db      	ldr	r3, [r3, #28]
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f7fe fc80 	bl	800b038 <create_chain>
 800c738:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8109 	beq.w	800c954 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	2b01      	cmp	r3, #1
 800c746:	d104      	bne.n	800c752 <f_write+0x10c>
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2202      	movs	r2, #2
 800c74c:	755a      	strb	r2, [r3, #21]
 800c74e:	2302      	movs	r3, #2
 800c750:	e109      	b.n	800c966 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c758:	d104      	bne.n	800c764 <f_write+0x11e>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2201      	movs	r2, #1
 800c75e:	755a      	strb	r2, [r3, #21]
 800c760:	2301      	movs	r3, #1
 800c762:	e100      	b.n	800c966 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c768:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d102      	bne.n	800c778 <f_write+0x132>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c776:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	7d1b      	ldrb	r3, [r3, #20]
 800c77c:	b25b      	sxtb	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	da18      	bge.n	800c7b4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	7858      	ldrb	r0, [r3, #1]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a1a      	ldr	r2, [r3, #32]
 800c790:	2301      	movs	r3, #1
 800c792:	f7fd fe51 	bl	800a438 <disk_write>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d004      	beq.n	800c7a6 <f_write+0x160>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	755a      	strb	r2, [r3, #21]
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e0df      	b.n	800c966 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	7d1b      	ldrb	r3, [r3, #20]
 800c7aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f7fe f9c7 	bl	800ab50 <clust2sect>
 800c7c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d104      	bne.n	800c7d4 <f_write+0x18e>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	755a      	strb	r2, [r3, #21]
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	e0c8      	b.n	800c966 <f_write+0x320>
			sect += csect;
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	4413      	add	r3, r2
 800c7da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	899b      	ldrh	r3, [r3, #12]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d043      	beq.n	800c878 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7f0:	69ba      	ldr	r2, [r7, #24]
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	8952      	ldrh	r2, [r2, #10]
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d905      	bls.n	800c80a <f_write+0x1c4>
					cc = fs->csize - csect;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	895b      	ldrh	r3, [r3, #10]
 800c802:	461a      	mov	r2, r3
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	7858      	ldrb	r0, [r3, #1]
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	69f9      	ldr	r1, [r7, #28]
 800c814:	f7fd fe10 	bl	800a438 <disk_write>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d004      	beq.n	800c828 <f_write+0x1e2>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2201      	movs	r2, #1
 800c822:	755a      	strb	r2, [r3, #21]
 800c824:	2301      	movs	r3, #1
 800c826:	e09e      	b.n	800c966 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a1a      	ldr	r2, [r3, #32]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	6a3a      	ldr	r2, [r7, #32]
 800c832:	429a      	cmp	r2, r3
 800c834:	d918      	bls.n	800c868 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6a1a      	ldr	r2, [r3, #32]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	8992      	ldrh	r2, [r2, #12]
 800c848:	fb02 f303 	mul.w	r3, r2, r3
 800c84c:	69fa      	ldr	r2, [r7, #28]
 800c84e:	18d1      	adds	r1, r2, r3
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	899b      	ldrh	r3, [r3, #12]
 800c854:	461a      	mov	r2, r3
 800c856:	f7fd feaf 	bl	800a5b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	7d1b      	ldrb	r3, [r3, #20]
 800c85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c862:	b2da      	uxtb	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	899b      	ldrh	r3, [r3, #12]
 800c86c:	461a      	mov	r2, r3
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	fb02 f303 	mul.w	r3, r2, r3
 800c874:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c876:	e04b      	b.n	800c910 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6a1b      	ldr	r3, [r3, #32]
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d016      	beq.n	800c8b0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	699a      	ldr	r2, [r3, #24]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d210      	bcs.n	800c8b0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	7858      	ldrb	r0, [r3, #1]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c898:	2301      	movs	r3, #1
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	f7fd fdac 	bl	800a3f8 <disk_read>
 800c8a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d004      	beq.n	800c8b0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	755a      	strb	r2, [r3, #21]
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e05a      	b.n	800c966 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	899b      	ldrh	r3, [r3, #12]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	8992      	ldrh	r2, [r2, #12]
 800c8c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8c8:	fb01 f202 	mul.w	r2, r1, r2
 800c8cc:	1a9b      	subs	r3, r3, r2
 800c8ce:	1ac3      	subs	r3, r0, r3
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d901      	bls.n	800c8de <f_write+0x298>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	693a      	ldr	r2, [r7, #16]
 800c8ea:	8992      	ldrh	r2, [r2, #12]
 800c8ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8f0:	fb00 f202 	mul.w	r2, r0, r2
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	440b      	add	r3, r1
 800c8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8fa:	69f9      	ldr	r1, [r7, #28]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd fe5b 	bl	800a5b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	7d1b      	ldrb	r3, [r3, #20]
 800c906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c910:	69fa      	ldr	r2, [r7, #28]
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	4413      	add	r3, r2
 800c916:	61fb      	str	r3, [r7, #28]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	699a      	ldr	r2, [r3, #24]
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	441a      	add	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	619a      	str	r2, [r3, #24]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68da      	ldr	r2, [r3, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	bf38      	it	cc
 800c930:	461a      	movcc	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	60da      	str	r2, [r3, #12]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	441a      	add	r2, r3
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f47f aeb5 	bne.w	800c6bc <f_write+0x76>
 800c952:	e000      	b.n	800c956 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c954:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	7d1b      	ldrb	r3, [r3, #20]
 800c95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3730      	adds	r7, #48	; 0x30
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b086      	sub	sp, #24
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f107 0208 	add.w	r2, r7, #8
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff faba 	bl	800bef8 <validate>
 800c984:	4603      	mov	r3, r0
 800c986:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d168      	bne.n	800ca60 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7d1b      	ldrb	r3, [r3, #20]
 800c992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c996:	2b00      	cmp	r3, #0
 800c998:	d062      	beq.n	800ca60 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	7d1b      	ldrb	r3, [r3, #20]
 800c99e:	b25b      	sxtb	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	da15      	bge.n	800c9d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	7858      	ldrb	r0, [r3, #1]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a1a      	ldr	r2, [r3, #32]
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	f7fd fd40 	bl	800a438 <disk_write>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <f_sync+0x54>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e04f      	b.n	800ca62 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	7d1b      	ldrb	r3, [r3, #20]
 800c9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c9d0:	f7fd fb4c 	bl	800a06c <get_fattime>
 800c9d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4610      	mov	r0, r2
 800c9e0:	f7fe f818 	bl	800aa14 <move_window>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d138      	bne.n	800ca60 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	330b      	adds	r3, #11
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	330b      	adds	r3, #11
 800c9fe:	f042 0220 	orr.w	r2, r2, #32
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6818      	ldr	r0, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	68f9      	ldr	r1, [r7, #12]
 800ca12:	f7fe fda6 	bl	800b562 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f103 021c 	add.w	r2, r3, #28
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	4619      	mov	r1, r3
 800ca22:	4610      	mov	r0, r2
 800ca24:	f7fd fd9c 	bl	800a560 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3316      	adds	r3, #22
 800ca2c:	6939      	ldr	r1, [r7, #16]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fd fd96 	bl	800a560 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3312      	adds	r3, #18
 800ca38:	2100      	movs	r1, #0
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fd fd75 	bl	800a52a <st_word>
					fs->wflag = 1;
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	2201      	movs	r2, #1
 800ca44:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe f811 	bl	800aa70 <sync_fs>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3718      	adds	r7, #24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff ff7b 	bl	800c96e <f_sync>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d118      	bne.n	800cab4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f107 0208 	add.w	r2, r7, #8
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fa34 	bl	800bef8 <validate>
 800ca90:	4603      	mov	r3, r0
 800ca92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10c      	bne.n	800cab4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fd ff14 	bl	800a8cc <dec_lock>
 800caa4:	4603      	mov	r3, r0
 800caa6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d102      	bne.n	800cab4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b090      	sub	sp, #64	; 0x40
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f107 0208 	add.w	r2, r7, #8
 800cace:	4611      	mov	r1, r2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fa11 	bl	800bef8 <validate>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cadc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d103      	bne.n	800caec <f_lseek+0x2e>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	7d5b      	ldrb	r3, [r3, #21]
 800cae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800caec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <f_lseek+0x3c>
 800caf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800caf8:	e201      	b.n	800cefe <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80d9 	beq.w	800ccb6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0a:	d15a      	bne.n	800cbc2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	1d1a      	adds	r2, r3, #4
 800cb16:	627a      	str	r2, [r7, #36]	; 0x24
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d03a      	beq.n	800cba2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	2300      	movs	r3, #0
 800cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	3302      	adds	r3, #2
 800cb38:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	60fb      	str	r3, [r7, #12]
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	3301      	adds	r3, #1
 800cb42:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fe f820 	bl	800ab8e <get_fat>
 800cb4e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d804      	bhi.n	800cb60 <f_lseek+0xa2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	755a      	strb	r2, [r3, #21]
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	e1ce      	b.n	800cefe <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb66:	d104      	bne.n	800cb72 <f_lseek+0xb4>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	755a      	strb	r2, [r3, #21]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e1c5      	b.n	800cefe <f_lseek+0x440>
					} while (cl == pcl + 1);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3301      	adds	r3, #1
 800cb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d0de      	beq.n	800cb3a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cb7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d809      	bhi.n	800cb98 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	1d1a      	adds	r2, r3, #4
 800cb88:	627a      	str	r2, [r7, #36]	; 0x24
 800cb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	1d1a      	adds	r2, r3, #4
 800cb92:	627a      	str	r2, [r7, #36]	; 0x24
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d3c4      	bcc.n	800cb2c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d803      	bhi.n	800cbba <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	e19f      	b.n	800cefa <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cbba:	2311      	movs	r3, #17
 800cbbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cbc0:	e19b      	b.n	800cefa <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d902      	bls.n	800cbd2 <f_lseek+0x114>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 818d 	beq.w	800cefa <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7fe fabe 	bl	800b168 <clmt_clust>
 800cbec:	4602      	mov	r2, r0
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	69db      	ldr	r3, [r3, #28]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	f7fd ffa8 	bl	800ab50 <clust2sect>
 800cc00:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d104      	bne.n	800cc12 <f_lseek+0x154>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	755a      	strb	r2, [r3, #21]
 800cc0e:	2302      	movs	r3, #2
 800cc10:	e175      	b.n	800cefe <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	8992      	ldrh	r2, [r2, #12]
 800cc1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	8952      	ldrh	r2, [r2, #10]
 800cc22:	3a01      	subs	r2, #1
 800cc24:	4013      	ands	r3, r2
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	4413      	add	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	8992      	ldrh	r2, [r2, #12]
 800cc34:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc38:	fb01 f202 	mul.w	r2, r1, r2
 800cc3c:	1a9b      	subs	r3, r3, r2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f000 815b 	beq.w	800cefa <f_lseek+0x43c>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	f000 8155 	beq.w	800cefa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	7d1b      	ldrb	r3, [r3, #20]
 800cc54:	b25b      	sxtb	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da18      	bge.n	800cc8c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	7858      	ldrb	r0, [r3, #1]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a1a      	ldr	r2, [r3, #32]
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f7fd fbe5 	bl	800a438 <disk_write>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <f_lseek+0x1c0>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	755a      	strb	r2, [r3, #21]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e13f      	b.n	800cefe <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7d1b      	ldrb	r3, [r3, #20]
 800cc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	7858      	ldrb	r0, [r3, #1]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc96:	2301      	movs	r3, #1
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	f7fd fbad 	bl	800a3f8 <disk_read>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <f_lseek+0x1f0>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	755a      	strb	r2, [r3, #21]
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e127      	b.n	800cefe <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	621a      	str	r2, [r3, #32]
 800ccb4:	e121      	b.n	800cefa <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d908      	bls.n	800ccd2 <f_lseek+0x214>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7d1b      	ldrb	r3, [r3, #20]
 800ccc4:	f003 0302 	and.w	r3, r3, #2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d102      	bne.n	800ccd2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	637b      	str	r3, [r7, #52]	; 0x34
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cce0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80b5 	beq.w	800ce54 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	895b      	ldrh	r3, [r3, #10]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	899b      	ldrh	r3, [r3, #12]
 800ccf4:	fb02 f303 	mul.w	r3, r2, r3
 800ccf8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d01b      	beq.n	800cd38 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	1e5a      	subs	r2, r3, #1
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	1e59      	subs	r1, r3, #1
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d30f      	bcc.n	800cd38 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cd18:	6a3b      	ldr	r3, [r7, #32]
 800cd1a:	1e5a      	subs	r2, r3, #1
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	425b      	negs	r3, r3
 800cd20:	401a      	ands	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	69db      	ldr	r3, [r3, #28]
 800cd34:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd36:	e022      	b.n	800cd7e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d119      	bne.n	800cd78 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2100      	movs	r1, #0
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7fe f975 	bl	800b038 <create_chain>
 800cd4e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d104      	bne.n	800cd60 <f_lseek+0x2a2>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2202      	movs	r2, #2
 800cd5a:	755a      	strb	r2, [r3, #21]
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e0ce      	b.n	800cefe <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd66:	d104      	bne.n	800cd72 <f_lseek+0x2b4>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	755a      	strb	r2, [r3, #21]
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e0c5      	b.n	800cefe <f_lseek+0x440>
					fp->obj.sclust = clst;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd76:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd7c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d067      	beq.n	800ce54 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800cd84:	e03a      	b.n	800cdfc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	603b      	str	r3, [r7, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	699a      	ldr	r2, [r3, #24]
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	441a      	add	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	7d1b      	ldrb	r3, [r3, #20]
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00b      	beq.n	800cdbe <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fe f944 	bl	800b038 <create_chain>
 800cdb0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d108      	bne.n	800cdca <f_lseek+0x30c>
							ofs = 0; break;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	e022      	b.n	800ce04 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fd fee3 	bl	800ab8e <get_fat>
 800cdc8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd0:	d104      	bne.n	800cddc <f_lseek+0x31e>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	755a      	strb	r2, [r3, #21]
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e090      	b.n	800cefe <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d904      	bls.n	800cdec <f_lseek+0x32e>
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d304      	bcc.n	800cdf6 <f_lseek+0x338>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	755a      	strb	r2, [r3, #21]
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	e083      	b.n	800cefe <f_lseek+0x440>
					fp->clust = clst;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdfa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d8c0      	bhi.n	800cd86 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	699a      	ldr	r2, [r3, #24]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	441a      	add	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	899b      	ldrh	r3, [r3, #12]
 800ce14:	461a      	mov	r2, r3
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce1c:	fb01 f202 	mul.w	r2, r1, r2
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d016      	beq.n	800ce54 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fd fe90 	bl	800ab50 <clust2sect>
 800ce30:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d104      	bne.n	800ce42 <f_lseek+0x384>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	755a      	strb	r2, [r3, #21]
 800ce3e:	2302      	movs	r3, #2
 800ce40:	e05d      	b.n	800cefe <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	899b      	ldrh	r3, [r3, #12]
 800ce46:	461a      	mov	r2, r3
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce50:	4413      	add	r3, r2
 800ce52:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	699a      	ldr	r2, [r3, #24]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d90a      	bls.n	800ce76 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	699a      	ldr	r2, [r3, #24]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	7d1b      	ldrb	r3, [r3, #20]
 800ce6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	8992      	ldrh	r2, [r2, #12]
 800ce7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce82:	fb01 f202 	mul.w	r2, r1, r2
 800ce86:	1a9b      	subs	r3, r3, r2
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d036      	beq.n	800cefa <f_lseek+0x43c>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6a1b      	ldr	r3, [r3, #32]
 800ce90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d031      	beq.n	800cefa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7d1b      	ldrb	r3, [r3, #20]
 800ce9a:	b25b      	sxtb	r3, r3
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	da18      	bge.n	800ced2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	7858      	ldrb	r0, [r3, #1]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1a      	ldr	r2, [r3, #32]
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f7fd fac2 	bl	800a438 <disk_write>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d004      	beq.n	800cec4 <f_lseek+0x406>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	755a      	strb	r2, [r3, #21]
 800cec0:	2301      	movs	r3, #1
 800cec2:	e01c      	b.n	800cefe <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	7d1b      	ldrb	r3, [r3, #20]
 800cec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	7858      	ldrb	r0, [r3, #1]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cedc:	2301      	movs	r3, #1
 800cede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cee0:	f7fd fa8a 	bl	800a3f8 <disk_read>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d004      	beq.n	800cef4 <f_lseek+0x436>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	755a      	strb	r2, [r3, #21]
 800cef0:	2301      	movs	r3, #1
 800cef2:	e004      	b.n	800cefe <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cef8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cefa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3740      	adds	r7, #64	; 0x40
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4613      	mov	r3, r2
 800cf14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf16:	2301      	movs	r3, #1
 800cf18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf1e:	4b1f      	ldr	r3, [pc, #124]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf20:	7a5b      	ldrb	r3, [r3, #9]
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d131      	bne.n	800cf8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf28:	4b1c      	ldr	r3, [pc, #112]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf2a:	7a5b      	ldrb	r3, [r3, #9]
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	461a      	mov	r2, r3
 800cf30:	4b1a      	ldr	r3, [pc, #104]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf32:	2100      	movs	r1, #0
 800cf34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf36:	4b19      	ldr	r3, [pc, #100]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf38:	7a5b      	ldrb	r3, [r3, #9]
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf46:	4b15      	ldr	r3, [pc, #84]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf48:	7a5b      	ldrb	r3, [r3, #9]
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	4b13      	ldr	r3, [pc, #76]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf50:	4413      	add	r3, r2
 800cf52:	79fa      	ldrb	r2, [r7, #7]
 800cf54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf56:	4b11      	ldr	r3, [pc, #68]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf58:	7a5b      	ldrb	r3, [r3, #9]
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	b2d1      	uxtb	r1, r2
 800cf60:	4a0e      	ldr	r2, [pc, #56]	; (800cf9c <FATFS_LinkDriverEx+0x94>)
 800cf62:	7251      	strb	r1, [r2, #9]
 800cf64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf66:	7dbb      	ldrb	r3, [r7, #22]
 800cf68:	3330      	adds	r3, #48	; 0x30
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	3301      	adds	r3, #1
 800cf74:	223a      	movs	r2, #58	; 0x3a
 800cf76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	3302      	adds	r3, #2
 800cf7c:	222f      	movs	r2, #47	; 0x2f
 800cf7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	3303      	adds	r3, #3
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	371c      	adds	r7, #28
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	200037d4 	.word	0x200037d4

0800cfa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cfaa:	2200      	movs	r2, #0
 800cfac:	6839      	ldr	r1, [r7, #0]
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff ffaa 	bl	800cf08 <FATFS_LinkDriverEx>
 800cfb4:	4603      	mov	r3, r0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3708      	adds	r7, #8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
	...

0800cfc0 <__errno>:
 800cfc0:	4b01      	ldr	r3, [pc, #4]	; (800cfc8 <__errno+0x8>)
 800cfc2:	6818      	ldr	r0, [r3, #0]
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	20000014 	.word	0x20000014

0800cfcc <__libc_init_array>:
 800cfcc:	b570      	push	{r4, r5, r6, lr}
 800cfce:	4d0d      	ldr	r5, [pc, #52]	; (800d004 <__libc_init_array+0x38>)
 800cfd0:	4c0d      	ldr	r4, [pc, #52]	; (800d008 <__libc_init_array+0x3c>)
 800cfd2:	1b64      	subs	r4, r4, r5
 800cfd4:	10a4      	asrs	r4, r4, #2
 800cfd6:	2600      	movs	r6, #0
 800cfd8:	42a6      	cmp	r6, r4
 800cfda:	d109      	bne.n	800cff0 <__libc_init_array+0x24>
 800cfdc:	4d0b      	ldr	r5, [pc, #44]	; (800d00c <__libc_init_array+0x40>)
 800cfde:	4c0c      	ldr	r4, [pc, #48]	; (800d010 <__libc_init_array+0x44>)
 800cfe0:	f001 fba8 	bl	800e734 <_init>
 800cfe4:	1b64      	subs	r4, r4, r5
 800cfe6:	10a4      	asrs	r4, r4, #2
 800cfe8:	2600      	movs	r6, #0
 800cfea:	42a6      	cmp	r6, r4
 800cfec:	d105      	bne.n	800cffa <__libc_init_array+0x2e>
 800cfee:	bd70      	pop	{r4, r5, r6, pc}
 800cff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cff4:	4798      	blx	r3
 800cff6:	3601      	adds	r6, #1
 800cff8:	e7ee      	b.n	800cfd8 <__libc_init_array+0xc>
 800cffa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cffe:	4798      	blx	r3
 800d000:	3601      	adds	r6, #1
 800d002:	e7f2      	b.n	800cfea <__libc_init_array+0x1e>
 800d004:	0800e908 	.word	0x0800e908
 800d008:	0800e908 	.word	0x0800e908
 800d00c:	0800e908 	.word	0x0800e908
 800d010:	0800e90c 	.word	0x0800e90c

0800d014 <memcpy>:
 800d014:	440a      	add	r2, r1
 800d016:	4291      	cmp	r1, r2
 800d018:	f100 33ff 	add.w	r3, r0, #4294967295
 800d01c:	d100      	bne.n	800d020 <memcpy+0xc>
 800d01e:	4770      	bx	lr
 800d020:	b510      	push	{r4, lr}
 800d022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d02a:	4291      	cmp	r1, r2
 800d02c:	d1f9      	bne.n	800d022 <memcpy+0xe>
 800d02e:	bd10      	pop	{r4, pc}

0800d030 <memset>:
 800d030:	4402      	add	r2, r0
 800d032:	4603      	mov	r3, r0
 800d034:	4293      	cmp	r3, r2
 800d036:	d100      	bne.n	800d03a <memset+0xa>
 800d038:	4770      	bx	lr
 800d03a:	f803 1b01 	strb.w	r1, [r3], #1
 800d03e:	e7f9      	b.n	800d034 <memset+0x4>

0800d040 <siprintf>:
 800d040:	b40e      	push	{r1, r2, r3}
 800d042:	b500      	push	{lr}
 800d044:	b09c      	sub	sp, #112	; 0x70
 800d046:	ab1d      	add	r3, sp, #116	; 0x74
 800d048:	9002      	str	r0, [sp, #8]
 800d04a:	9006      	str	r0, [sp, #24]
 800d04c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d050:	4809      	ldr	r0, [pc, #36]	; (800d078 <siprintf+0x38>)
 800d052:	9107      	str	r1, [sp, #28]
 800d054:	9104      	str	r1, [sp, #16]
 800d056:	4909      	ldr	r1, [pc, #36]	; (800d07c <siprintf+0x3c>)
 800d058:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05c:	9105      	str	r1, [sp, #20]
 800d05e:	6800      	ldr	r0, [r0, #0]
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	a902      	add	r1, sp, #8
 800d064:	f000 f868 	bl	800d138 <_svfiprintf_r>
 800d068:	9b02      	ldr	r3, [sp, #8]
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
 800d06e:	b01c      	add	sp, #112	; 0x70
 800d070:	f85d eb04 	ldr.w	lr, [sp], #4
 800d074:	b003      	add	sp, #12
 800d076:	4770      	bx	lr
 800d078:	20000014 	.word	0x20000014
 800d07c:	ffff0208 	.word	0xffff0208

0800d080 <__ssputs_r>:
 800d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	688e      	ldr	r6, [r1, #8]
 800d086:	429e      	cmp	r6, r3
 800d088:	4682      	mov	sl, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	4690      	mov	r8, r2
 800d08e:	461f      	mov	r7, r3
 800d090:	d838      	bhi.n	800d104 <__ssputs_r+0x84>
 800d092:	898a      	ldrh	r2, [r1, #12]
 800d094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d098:	d032      	beq.n	800d100 <__ssputs_r+0x80>
 800d09a:	6825      	ldr	r5, [r4, #0]
 800d09c:	6909      	ldr	r1, [r1, #16]
 800d09e:	eba5 0901 	sub.w	r9, r5, r1
 800d0a2:	6965      	ldr	r5, [r4, #20]
 800d0a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	444b      	add	r3, r9
 800d0b0:	106d      	asrs	r5, r5, #1
 800d0b2:	429d      	cmp	r5, r3
 800d0b4:	bf38      	it	cc
 800d0b6:	461d      	movcc	r5, r3
 800d0b8:	0553      	lsls	r3, r2, #21
 800d0ba:	d531      	bpl.n	800d120 <__ssputs_r+0xa0>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	f000 fb55 	bl	800d76c <_malloc_r>
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	b950      	cbnz	r0, 800d0dc <__ssputs_r+0x5c>
 800d0c6:	230c      	movs	r3, #12
 800d0c8:	f8ca 3000 	str.w	r3, [sl]
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0dc:	6921      	ldr	r1, [r4, #16]
 800d0de:	464a      	mov	r2, r9
 800d0e0:	f7ff ff98 	bl	800d014 <memcpy>
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ee:	81a3      	strh	r3, [r4, #12]
 800d0f0:	6126      	str	r6, [r4, #16]
 800d0f2:	6165      	str	r5, [r4, #20]
 800d0f4:	444e      	add	r6, r9
 800d0f6:	eba5 0509 	sub.w	r5, r5, r9
 800d0fa:	6026      	str	r6, [r4, #0]
 800d0fc:	60a5      	str	r5, [r4, #8]
 800d0fe:	463e      	mov	r6, r7
 800d100:	42be      	cmp	r6, r7
 800d102:	d900      	bls.n	800d106 <__ssputs_r+0x86>
 800d104:	463e      	mov	r6, r7
 800d106:	6820      	ldr	r0, [r4, #0]
 800d108:	4632      	mov	r2, r6
 800d10a:	4641      	mov	r1, r8
 800d10c:	f000 faa8 	bl	800d660 <memmove>
 800d110:	68a3      	ldr	r3, [r4, #8]
 800d112:	1b9b      	subs	r3, r3, r6
 800d114:	60a3      	str	r3, [r4, #8]
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	4433      	add	r3, r6
 800d11a:	6023      	str	r3, [r4, #0]
 800d11c:	2000      	movs	r0, #0
 800d11e:	e7db      	b.n	800d0d8 <__ssputs_r+0x58>
 800d120:	462a      	mov	r2, r5
 800d122:	f000 fb97 	bl	800d854 <_realloc_r>
 800d126:	4606      	mov	r6, r0
 800d128:	2800      	cmp	r0, #0
 800d12a:	d1e1      	bne.n	800d0f0 <__ssputs_r+0x70>
 800d12c:	6921      	ldr	r1, [r4, #16]
 800d12e:	4650      	mov	r0, sl
 800d130:	f000 fab0 	bl	800d694 <_free_r>
 800d134:	e7c7      	b.n	800d0c6 <__ssputs_r+0x46>
	...

0800d138 <_svfiprintf_r>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	4698      	mov	r8, r3
 800d13e:	898b      	ldrh	r3, [r1, #12]
 800d140:	061b      	lsls	r3, r3, #24
 800d142:	b09d      	sub	sp, #116	; 0x74
 800d144:	4607      	mov	r7, r0
 800d146:	460d      	mov	r5, r1
 800d148:	4614      	mov	r4, r2
 800d14a:	d50e      	bpl.n	800d16a <_svfiprintf_r+0x32>
 800d14c:	690b      	ldr	r3, [r1, #16]
 800d14e:	b963      	cbnz	r3, 800d16a <_svfiprintf_r+0x32>
 800d150:	2140      	movs	r1, #64	; 0x40
 800d152:	f000 fb0b 	bl	800d76c <_malloc_r>
 800d156:	6028      	str	r0, [r5, #0]
 800d158:	6128      	str	r0, [r5, #16]
 800d15a:	b920      	cbnz	r0, 800d166 <_svfiprintf_r+0x2e>
 800d15c:	230c      	movs	r3, #12
 800d15e:	603b      	str	r3, [r7, #0]
 800d160:	f04f 30ff 	mov.w	r0, #4294967295
 800d164:	e0d1      	b.n	800d30a <_svfiprintf_r+0x1d2>
 800d166:	2340      	movs	r3, #64	; 0x40
 800d168:	616b      	str	r3, [r5, #20]
 800d16a:	2300      	movs	r3, #0
 800d16c:	9309      	str	r3, [sp, #36]	; 0x24
 800d16e:	2320      	movs	r3, #32
 800d170:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d174:	f8cd 800c 	str.w	r8, [sp, #12]
 800d178:	2330      	movs	r3, #48	; 0x30
 800d17a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d324 <_svfiprintf_r+0x1ec>
 800d17e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d182:	f04f 0901 	mov.w	r9, #1
 800d186:	4623      	mov	r3, r4
 800d188:	469a      	mov	sl, r3
 800d18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d18e:	b10a      	cbz	r2, 800d194 <_svfiprintf_r+0x5c>
 800d190:	2a25      	cmp	r2, #37	; 0x25
 800d192:	d1f9      	bne.n	800d188 <_svfiprintf_r+0x50>
 800d194:	ebba 0b04 	subs.w	fp, sl, r4
 800d198:	d00b      	beq.n	800d1b2 <_svfiprintf_r+0x7a>
 800d19a:	465b      	mov	r3, fp
 800d19c:	4622      	mov	r2, r4
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	f7ff ff6d 	bl	800d080 <__ssputs_r>
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	f000 80aa 	beq.w	800d300 <_svfiprintf_r+0x1c8>
 800d1ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1ae:	445a      	add	r2, fp
 800d1b0:	9209      	str	r2, [sp, #36]	; 0x24
 800d1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 80a2 	beq.w	800d300 <_svfiprintf_r+0x1c8>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c6:	f10a 0a01 	add.w	sl, sl, #1
 800d1ca:	9304      	str	r3, [sp, #16]
 800d1cc:	9307      	str	r3, [sp, #28]
 800d1ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1d2:	931a      	str	r3, [sp, #104]	; 0x68
 800d1d4:	4654      	mov	r4, sl
 800d1d6:	2205      	movs	r2, #5
 800d1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1dc:	4851      	ldr	r0, [pc, #324]	; (800d324 <_svfiprintf_r+0x1ec>)
 800d1de:	f7f3 f807 	bl	80001f0 <memchr>
 800d1e2:	9a04      	ldr	r2, [sp, #16]
 800d1e4:	b9d8      	cbnz	r0, 800d21e <_svfiprintf_r+0xe6>
 800d1e6:	06d0      	lsls	r0, r2, #27
 800d1e8:	bf44      	itt	mi
 800d1ea:	2320      	movmi	r3, #32
 800d1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f0:	0711      	lsls	r1, r2, #28
 800d1f2:	bf44      	itt	mi
 800d1f4:	232b      	movmi	r3, #43	; 0x2b
 800d1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d200:	d015      	beq.n	800d22e <_svfiprintf_r+0xf6>
 800d202:	9a07      	ldr	r2, [sp, #28]
 800d204:	4654      	mov	r4, sl
 800d206:	2000      	movs	r0, #0
 800d208:	f04f 0c0a 	mov.w	ip, #10
 800d20c:	4621      	mov	r1, r4
 800d20e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d212:	3b30      	subs	r3, #48	; 0x30
 800d214:	2b09      	cmp	r3, #9
 800d216:	d94e      	bls.n	800d2b6 <_svfiprintf_r+0x17e>
 800d218:	b1b0      	cbz	r0, 800d248 <_svfiprintf_r+0x110>
 800d21a:	9207      	str	r2, [sp, #28]
 800d21c:	e014      	b.n	800d248 <_svfiprintf_r+0x110>
 800d21e:	eba0 0308 	sub.w	r3, r0, r8
 800d222:	fa09 f303 	lsl.w	r3, r9, r3
 800d226:	4313      	orrs	r3, r2
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	46a2      	mov	sl, r4
 800d22c:	e7d2      	b.n	800d1d4 <_svfiprintf_r+0x9c>
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	1d19      	adds	r1, r3, #4
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	9103      	str	r1, [sp, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bfbb      	ittet	lt
 800d23a:	425b      	neglt	r3, r3
 800d23c:	f042 0202 	orrlt.w	r2, r2, #2
 800d240:	9307      	strge	r3, [sp, #28]
 800d242:	9307      	strlt	r3, [sp, #28]
 800d244:	bfb8      	it	lt
 800d246:	9204      	strlt	r2, [sp, #16]
 800d248:	7823      	ldrb	r3, [r4, #0]
 800d24a:	2b2e      	cmp	r3, #46	; 0x2e
 800d24c:	d10c      	bne.n	800d268 <_svfiprintf_r+0x130>
 800d24e:	7863      	ldrb	r3, [r4, #1]
 800d250:	2b2a      	cmp	r3, #42	; 0x2a
 800d252:	d135      	bne.n	800d2c0 <_svfiprintf_r+0x188>
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	1d1a      	adds	r2, r3, #4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	9203      	str	r2, [sp, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	bfb8      	it	lt
 800d260:	f04f 33ff 	movlt.w	r3, #4294967295
 800d264:	3402      	adds	r4, #2
 800d266:	9305      	str	r3, [sp, #20]
 800d268:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d334 <_svfiprintf_r+0x1fc>
 800d26c:	7821      	ldrb	r1, [r4, #0]
 800d26e:	2203      	movs	r2, #3
 800d270:	4650      	mov	r0, sl
 800d272:	f7f2 ffbd 	bl	80001f0 <memchr>
 800d276:	b140      	cbz	r0, 800d28a <_svfiprintf_r+0x152>
 800d278:	2340      	movs	r3, #64	; 0x40
 800d27a:	eba0 000a 	sub.w	r0, r0, sl
 800d27e:	fa03 f000 	lsl.w	r0, r3, r0
 800d282:	9b04      	ldr	r3, [sp, #16]
 800d284:	4303      	orrs	r3, r0
 800d286:	3401      	adds	r4, #1
 800d288:	9304      	str	r3, [sp, #16]
 800d28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28e:	4826      	ldr	r0, [pc, #152]	; (800d328 <_svfiprintf_r+0x1f0>)
 800d290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d294:	2206      	movs	r2, #6
 800d296:	f7f2 ffab 	bl	80001f0 <memchr>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d038      	beq.n	800d310 <_svfiprintf_r+0x1d8>
 800d29e:	4b23      	ldr	r3, [pc, #140]	; (800d32c <_svfiprintf_r+0x1f4>)
 800d2a0:	bb1b      	cbnz	r3, 800d2ea <_svfiprintf_r+0x1b2>
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	3307      	adds	r3, #7
 800d2a6:	f023 0307 	bic.w	r3, r3, #7
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	9303      	str	r3, [sp, #12]
 800d2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b0:	4433      	add	r3, r6
 800d2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b4:	e767      	b.n	800d186 <_svfiprintf_r+0x4e>
 800d2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	2001      	movs	r0, #1
 800d2be:	e7a5      	b.n	800d20c <_svfiprintf_r+0xd4>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	3401      	adds	r4, #1
 800d2c4:	9305      	str	r3, [sp, #20]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	f04f 0c0a 	mov.w	ip, #10
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2d2:	3a30      	subs	r2, #48	; 0x30
 800d2d4:	2a09      	cmp	r2, #9
 800d2d6:	d903      	bls.n	800d2e0 <_svfiprintf_r+0x1a8>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0c5      	beq.n	800d268 <_svfiprintf_r+0x130>
 800d2dc:	9105      	str	r1, [sp, #20]
 800d2de:	e7c3      	b.n	800d268 <_svfiprintf_r+0x130>
 800d2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e7f0      	b.n	800d2cc <_svfiprintf_r+0x194>
 800d2ea:	ab03      	add	r3, sp, #12
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	462a      	mov	r2, r5
 800d2f0:	4b0f      	ldr	r3, [pc, #60]	; (800d330 <_svfiprintf_r+0x1f8>)
 800d2f2:	a904      	add	r1, sp, #16
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f3af 8000 	nop.w
 800d2fa:	1c42      	adds	r2, r0, #1
 800d2fc:	4606      	mov	r6, r0
 800d2fe:	d1d6      	bne.n	800d2ae <_svfiprintf_r+0x176>
 800d300:	89ab      	ldrh	r3, [r5, #12]
 800d302:	065b      	lsls	r3, r3, #25
 800d304:	f53f af2c 	bmi.w	800d160 <_svfiprintf_r+0x28>
 800d308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d30a:	b01d      	add	sp, #116	; 0x74
 800d30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d310:	ab03      	add	r3, sp, #12
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	462a      	mov	r2, r5
 800d316:	4b06      	ldr	r3, [pc, #24]	; (800d330 <_svfiprintf_r+0x1f8>)
 800d318:	a904      	add	r1, sp, #16
 800d31a:	4638      	mov	r0, r7
 800d31c:	f000 f87a 	bl	800d414 <_printf_i>
 800d320:	e7eb      	b.n	800d2fa <_svfiprintf_r+0x1c2>
 800d322:	bf00      	nop
 800d324:	0800e898 	.word	0x0800e898
 800d328:	0800e8a2 	.word	0x0800e8a2
 800d32c:	00000000 	.word	0x00000000
 800d330:	0800d081 	.word	0x0800d081
 800d334:	0800e89e 	.word	0x0800e89e

0800d338 <_printf_common>:
 800d338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d33c:	4616      	mov	r6, r2
 800d33e:	4699      	mov	r9, r3
 800d340:	688a      	ldr	r2, [r1, #8]
 800d342:	690b      	ldr	r3, [r1, #16]
 800d344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d348:	4293      	cmp	r3, r2
 800d34a:	bfb8      	it	lt
 800d34c:	4613      	movlt	r3, r2
 800d34e:	6033      	str	r3, [r6, #0]
 800d350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d354:	4607      	mov	r7, r0
 800d356:	460c      	mov	r4, r1
 800d358:	b10a      	cbz	r2, 800d35e <_printf_common+0x26>
 800d35a:	3301      	adds	r3, #1
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	0699      	lsls	r1, r3, #26
 800d362:	bf42      	ittt	mi
 800d364:	6833      	ldrmi	r3, [r6, #0]
 800d366:	3302      	addmi	r3, #2
 800d368:	6033      	strmi	r3, [r6, #0]
 800d36a:	6825      	ldr	r5, [r4, #0]
 800d36c:	f015 0506 	ands.w	r5, r5, #6
 800d370:	d106      	bne.n	800d380 <_printf_common+0x48>
 800d372:	f104 0a19 	add.w	sl, r4, #25
 800d376:	68e3      	ldr	r3, [r4, #12]
 800d378:	6832      	ldr	r2, [r6, #0]
 800d37a:	1a9b      	subs	r3, r3, r2
 800d37c:	42ab      	cmp	r3, r5
 800d37e:	dc26      	bgt.n	800d3ce <_printf_common+0x96>
 800d380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d384:	1e13      	subs	r3, r2, #0
 800d386:	6822      	ldr	r2, [r4, #0]
 800d388:	bf18      	it	ne
 800d38a:	2301      	movne	r3, #1
 800d38c:	0692      	lsls	r2, r2, #26
 800d38e:	d42b      	bmi.n	800d3e8 <_printf_common+0xb0>
 800d390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d394:	4649      	mov	r1, r9
 800d396:	4638      	mov	r0, r7
 800d398:	47c0      	blx	r8
 800d39a:	3001      	adds	r0, #1
 800d39c:	d01e      	beq.n	800d3dc <_printf_common+0xa4>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	68e5      	ldr	r5, [r4, #12]
 800d3a2:	6832      	ldr	r2, [r6, #0]
 800d3a4:	f003 0306 	and.w	r3, r3, #6
 800d3a8:	2b04      	cmp	r3, #4
 800d3aa:	bf08      	it	eq
 800d3ac:	1aad      	subeq	r5, r5, r2
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	6922      	ldr	r2, [r4, #16]
 800d3b2:	bf0c      	ite	eq
 800d3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3b8:	2500      	movne	r5, #0
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	bfc4      	itt	gt
 800d3be:	1a9b      	subgt	r3, r3, r2
 800d3c0:	18ed      	addgt	r5, r5, r3
 800d3c2:	2600      	movs	r6, #0
 800d3c4:	341a      	adds	r4, #26
 800d3c6:	42b5      	cmp	r5, r6
 800d3c8:	d11a      	bne.n	800d400 <_printf_common+0xc8>
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	e008      	b.n	800d3e0 <_printf_common+0xa8>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4652      	mov	r2, sl
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	47c0      	blx	r8
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d103      	bne.n	800d3e4 <_printf_common+0xac>
 800d3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e4:	3501      	adds	r5, #1
 800d3e6:	e7c6      	b.n	800d376 <_printf_common+0x3e>
 800d3e8:	18e1      	adds	r1, r4, r3
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	2030      	movs	r0, #48	; 0x30
 800d3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3f2:	4422      	add	r2, r4
 800d3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3fc:	3302      	adds	r3, #2
 800d3fe:	e7c7      	b.n	800d390 <_printf_common+0x58>
 800d400:	2301      	movs	r3, #1
 800d402:	4622      	mov	r2, r4
 800d404:	4649      	mov	r1, r9
 800d406:	4638      	mov	r0, r7
 800d408:	47c0      	blx	r8
 800d40a:	3001      	adds	r0, #1
 800d40c:	d0e6      	beq.n	800d3dc <_printf_common+0xa4>
 800d40e:	3601      	adds	r6, #1
 800d410:	e7d9      	b.n	800d3c6 <_printf_common+0x8e>
	...

0800d414 <_printf_i>:
 800d414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d418:	7e0f      	ldrb	r7, [r1, #24]
 800d41a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d41c:	2f78      	cmp	r7, #120	; 0x78
 800d41e:	4691      	mov	r9, r2
 800d420:	4680      	mov	r8, r0
 800d422:	460c      	mov	r4, r1
 800d424:	469a      	mov	sl, r3
 800d426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d42a:	d807      	bhi.n	800d43c <_printf_i+0x28>
 800d42c:	2f62      	cmp	r7, #98	; 0x62
 800d42e:	d80a      	bhi.n	800d446 <_printf_i+0x32>
 800d430:	2f00      	cmp	r7, #0
 800d432:	f000 80d8 	beq.w	800d5e6 <_printf_i+0x1d2>
 800d436:	2f58      	cmp	r7, #88	; 0x58
 800d438:	f000 80a3 	beq.w	800d582 <_printf_i+0x16e>
 800d43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d444:	e03a      	b.n	800d4bc <_printf_i+0xa8>
 800d446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d44a:	2b15      	cmp	r3, #21
 800d44c:	d8f6      	bhi.n	800d43c <_printf_i+0x28>
 800d44e:	a101      	add	r1, pc, #4	; (adr r1, 800d454 <_printf_i+0x40>)
 800d450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d454:	0800d4ad 	.word	0x0800d4ad
 800d458:	0800d4c1 	.word	0x0800d4c1
 800d45c:	0800d43d 	.word	0x0800d43d
 800d460:	0800d43d 	.word	0x0800d43d
 800d464:	0800d43d 	.word	0x0800d43d
 800d468:	0800d43d 	.word	0x0800d43d
 800d46c:	0800d4c1 	.word	0x0800d4c1
 800d470:	0800d43d 	.word	0x0800d43d
 800d474:	0800d43d 	.word	0x0800d43d
 800d478:	0800d43d 	.word	0x0800d43d
 800d47c:	0800d43d 	.word	0x0800d43d
 800d480:	0800d5cd 	.word	0x0800d5cd
 800d484:	0800d4f1 	.word	0x0800d4f1
 800d488:	0800d5af 	.word	0x0800d5af
 800d48c:	0800d43d 	.word	0x0800d43d
 800d490:	0800d43d 	.word	0x0800d43d
 800d494:	0800d5ef 	.word	0x0800d5ef
 800d498:	0800d43d 	.word	0x0800d43d
 800d49c:	0800d4f1 	.word	0x0800d4f1
 800d4a0:	0800d43d 	.word	0x0800d43d
 800d4a4:	0800d43d 	.word	0x0800d43d
 800d4a8:	0800d5b7 	.word	0x0800d5b7
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	1d1a      	adds	r2, r3, #4
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	602a      	str	r2, [r5, #0]
 800d4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e0a3      	b.n	800d608 <_printf_i+0x1f4>
 800d4c0:	6820      	ldr	r0, [r4, #0]
 800d4c2:	6829      	ldr	r1, [r5, #0]
 800d4c4:	0606      	lsls	r6, r0, #24
 800d4c6:	f101 0304 	add.w	r3, r1, #4
 800d4ca:	d50a      	bpl.n	800d4e2 <_printf_i+0xce>
 800d4cc:	680e      	ldr	r6, [r1, #0]
 800d4ce:	602b      	str	r3, [r5, #0]
 800d4d0:	2e00      	cmp	r6, #0
 800d4d2:	da03      	bge.n	800d4dc <_printf_i+0xc8>
 800d4d4:	232d      	movs	r3, #45	; 0x2d
 800d4d6:	4276      	negs	r6, r6
 800d4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4dc:	485e      	ldr	r0, [pc, #376]	; (800d658 <_printf_i+0x244>)
 800d4de:	230a      	movs	r3, #10
 800d4e0:	e019      	b.n	800d516 <_printf_i+0x102>
 800d4e2:	680e      	ldr	r6, [r1, #0]
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4ea:	bf18      	it	ne
 800d4ec:	b236      	sxthne	r6, r6
 800d4ee:	e7ef      	b.n	800d4d0 <_printf_i+0xbc>
 800d4f0:	682b      	ldr	r3, [r5, #0]
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	1d19      	adds	r1, r3, #4
 800d4f6:	6029      	str	r1, [r5, #0]
 800d4f8:	0601      	lsls	r1, r0, #24
 800d4fa:	d501      	bpl.n	800d500 <_printf_i+0xec>
 800d4fc:	681e      	ldr	r6, [r3, #0]
 800d4fe:	e002      	b.n	800d506 <_printf_i+0xf2>
 800d500:	0646      	lsls	r6, r0, #25
 800d502:	d5fb      	bpl.n	800d4fc <_printf_i+0xe8>
 800d504:	881e      	ldrh	r6, [r3, #0]
 800d506:	4854      	ldr	r0, [pc, #336]	; (800d658 <_printf_i+0x244>)
 800d508:	2f6f      	cmp	r7, #111	; 0x6f
 800d50a:	bf0c      	ite	eq
 800d50c:	2308      	moveq	r3, #8
 800d50e:	230a      	movne	r3, #10
 800d510:	2100      	movs	r1, #0
 800d512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d516:	6865      	ldr	r5, [r4, #4]
 800d518:	60a5      	str	r5, [r4, #8]
 800d51a:	2d00      	cmp	r5, #0
 800d51c:	bfa2      	ittt	ge
 800d51e:	6821      	ldrge	r1, [r4, #0]
 800d520:	f021 0104 	bicge.w	r1, r1, #4
 800d524:	6021      	strge	r1, [r4, #0]
 800d526:	b90e      	cbnz	r6, 800d52c <_printf_i+0x118>
 800d528:	2d00      	cmp	r5, #0
 800d52a:	d04d      	beq.n	800d5c8 <_printf_i+0x1b4>
 800d52c:	4615      	mov	r5, r2
 800d52e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d532:	fb03 6711 	mls	r7, r3, r1, r6
 800d536:	5dc7      	ldrb	r7, [r0, r7]
 800d538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d53c:	4637      	mov	r7, r6
 800d53e:	42bb      	cmp	r3, r7
 800d540:	460e      	mov	r6, r1
 800d542:	d9f4      	bls.n	800d52e <_printf_i+0x11a>
 800d544:	2b08      	cmp	r3, #8
 800d546:	d10b      	bne.n	800d560 <_printf_i+0x14c>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	07de      	lsls	r6, r3, #31
 800d54c:	d508      	bpl.n	800d560 <_printf_i+0x14c>
 800d54e:	6923      	ldr	r3, [r4, #16]
 800d550:	6861      	ldr	r1, [r4, #4]
 800d552:	4299      	cmp	r1, r3
 800d554:	bfde      	ittt	le
 800d556:	2330      	movle	r3, #48	; 0x30
 800d558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d560:	1b52      	subs	r2, r2, r5
 800d562:	6122      	str	r2, [r4, #16]
 800d564:	f8cd a000 	str.w	sl, [sp]
 800d568:	464b      	mov	r3, r9
 800d56a:	aa03      	add	r2, sp, #12
 800d56c:	4621      	mov	r1, r4
 800d56e:	4640      	mov	r0, r8
 800d570:	f7ff fee2 	bl	800d338 <_printf_common>
 800d574:	3001      	adds	r0, #1
 800d576:	d14c      	bne.n	800d612 <_printf_i+0x1fe>
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	b004      	add	sp, #16
 800d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d582:	4835      	ldr	r0, [pc, #212]	; (800d658 <_printf_i+0x244>)
 800d584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d588:	6829      	ldr	r1, [r5, #0]
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d590:	6029      	str	r1, [r5, #0]
 800d592:	061d      	lsls	r5, r3, #24
 800d594:	d514      	bpl.n	800d5c0 <_printf_i+0x1ac>
 800d596:	07df      	lsls	r7, r3, #31
 800d598:	bf44      	itt	mi
 800d59a:	f043 0320 	orrmi.w	r3, r3, #32
 800d59e:	6023      	strmi	r3, [r4, #0]
 800d5a0:	b91e      	cbnz	r6, 800d5aa <_printf_i+0x196>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	f023 0320 	bic.w	r3, r3, #32
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	2310      	movs	r3, #16
 800d5ac:	e7b0      	b.n	800d510 <_printf_i+0xfc>
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	f043 0320 	orr.w	r3, r3, #32
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	2378      	movs	r3, #120	; 0x78
 800d5b8:	4828      	ldr	r0, [pc, #160]	; (800d65c <_printf_i+0x248>)
 800d5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5be:	e7e3      	b.n	800d588 <_printf_i+0x174>
 800d5c0:	0659      	lsls	r1, r3, #25
 800d5c2:	bf48      	it	mi
 800d5c4:	b2b6      	uxthmi	r6, r6
 800d5c6:	e7e6      	b.n	800d596 <_printf_i+0x182>
 800d5c8:	4615      	mov	r5, r2
 800d5ca:	e7bb      	b.n	800d544 <_printf_i+0x130>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	6826      	ldr	r6, [r4, #0]
 800d5d0:	6961      	ldr	r1, [r4, #20]
 800d5d2:	1d18      	adds	r0, r3, #4
 800d5d4:	6028      	str	r0, [r5, #0]
 800d5d6:	0635      	lsls	r5, r6, #24
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	d501      	bpl.n	800d5e0 <_printf_i+0x1cc>
 800d5dc:	6019      	str	r1, [r3, #0]
 800d5de:	e002      	b.n	800d5e6 <_printf_i+0x1d2>
 800d5e0:	0670      	lsls	r0, r6, #25
 800d5e2:	d5fb      	bpl.n	800d5dc <_printf_i+0x1c8>
 800d5e4:	8019      	strh	r1, [r3, #0]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	6123      	str	r3, [r4, #16]
 800d5ea:	4615      	mov	r5, r2
 800d5ec:	e7ba      	b.n	800d564 <_printf_i+0x150>
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	1d1a      	adds	r2, r3, #4
 800d5f2:	602a      	str	r2, [r5, #0]
 800d5f4:	681d      	ldr	r5, [r3, #0]
 800d5f6:	6862      	ldr	r2, [r4, #4]
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f7f2 fdf8 	bl	80001f0 <memchr>
 800d600:	b108      	cbz	r0, 800d606 <_printf_i+0x1f2>
 800d602:	1b40      	subs	r0, r0, r5
 800d604:	6060      	str	r0, [r4, #4]
 800d606:	6863      	ldr	r3, [r4, #4]
 800d608:	6123      	str	r3, [r4, #16]
 800d60a:	2300      	movs	r3, #0
 800d60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d610:	e7a8      	b.n	800d564 <_printf_i+0x150>
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	462a      	mov	r2, r5
 800d616:	4649      	mov	r1, r9
 800d618:	4640      	mov	r0, r8
 800d61a:	47d0      	blx	sl
 800d61c:	3001      	adds	r0, #1
 800d61e:	d0ab      	beq.n	800d578 <_printf_i+0x164>
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	079b      	lsls	r3, r3, #30
 800d624:	d413      	bmi.n	800d64e <_printf_i+0x23a>
 800d626:	68e0      	ldr	r0, [r4, #12]
 800d628:	9b03      	ldr	r3, [sp, #12]
 800d62a:	4298      	cmp	r0, r3
 800d62c:	bfb8      	it	lt
 800d62e:	4618      	movlt	r0, r3
 800d630:	e7a4      	b.n	800d57c <_printf_i+0x168>
 800d632:	2301      	movs	r3, #1
 800d634:	4632      	mov	r2, r6
 800d636:	4649      	mov	r1, r9
 800d638:	4640      	mov	r0, r8
 800d63a:	47d0      	blx	sl
 800d63c:	3001      	adds	r0, #1
 800d63e:	d09b      	beq.n	800d578 <_printf_i+0x164>
 800d640:	3501      	adds	r5, #1
 800d642:	68e3      	ldr	r3, [r4, #12]
 800d644:	9903      	ldr	r1, [sp, #12]
 800d646:	1a5b      	subs	r3, r3, r1
 800d648:	42ab      	cmp	r3, r5
 800d64a:	dcf2      	bgt.n	800d632 <_printf_i+0x21e>
 800d64c:	e7eb      	b.n	800d626 <_printf_i+0x212>
 800d64e:	2500      	movs	r5, #0
 800d650:	f104 0619 	add.w	r6, r4, #25
 800d654:	e7f5      	b.n	800d642 <_printf_i+0x22e>
 800d656:	bf00      	nop
 800d658:	0800e8a9 	.word	0x0800e8a9
 800d65c:	0800e8ba 	.word	0x0800e8ba

0800d660 <memmove>:
 800d660:	4288      	cmp	r0, r1
 800d662:	b510      	push	{r4, lr}
 800d664:	eb01 0402 	add.w	r4, r1, r2
 800d668:	d902      	bls.n	800d670 <memmove+0x10>
 800d66a:	4284      	cmp	r4, r0
 800d66c:	4623      	mov	r3, r4
 800d66e:	d807      	bhi.n	800d680 <memmove+0x20>
 800d670:	1e43      	subs	r3, r0, #1
 800d672:	42a1      	cmp	r1, r4
 800d674:	d008      	beq.n	800d688 <memmove+0x28>
 800d676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d67a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d67e:	e7f8      	b.n	800d672 <memmove+0x12>
 800d680:	4402      	add	r2, r0
 800d682:	4601      	mov	r1, r0
 800d684:	428a      	cmp	r2, r1
 800d686:	d100      	bne.n	800d68a <memmove+0x2a>
 800d688:	bd10      	pop	{r4, pc}
 800d68a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d68e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d692:	e7f7      	b.n	800d684 <memmove+0x24>

0800d694 <_free_r>:
 800d694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d696:	2900      	cmp	r1, #0
 800d698:	d044      	beq.n	800d724 <_free_r+0x90>
 800d69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d69e:	9001      	str	r0, [sp, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f1a1 0404 	sub.w	r4, r1, #4
 800d6a6:	bfb8      	it	lt
 800d6a8:	18e4      	addlt	r4, r4, r3
 800d6aa:	f000 f913 	bl	800d8d4 <__malloc_lock>
 800d6ae:	4a1e      	ldr	r2, [pc, #120]	; (800d728 <_free_r+0x94>)
 800d6b0:	9801      	ldr	r0, [sp, #4]
 800d6b2:	6813      	ldr	r3, [r2, #0]
 800d6b4:	b933      	cbnz	r3, 800d6c4 <_free_r+0x30>
 800d6b6:	6063      	str	r3, [r4, #4]
 800d6b8:	6014      	str	r4, [r2, #0]
 800d6ba:	b003      	add	sp, #12
 800d6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6c0:	f000 b90e 	b.w	800d8e0 <__malloc_unlock>
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	d908      	bls.n	800d6da <_free_r+0x46>
 800d6c8:	6825      	ldr	r5, [r4, #0]
 800d6ca:	1961      	adds	r1, r4, r5
 800d6cc:	428b      	cmp	r3, r1
 800d6ce:	bf01      	itttt	eq
 800d6d0:	6819      	ldreq	r1, [r3, #0]
 800d6d2:	685b      	ldreq	r3, [r3, #4]
 800d6d4:	1949      	addeq	r1, r1, r5
 800d6d6:	6021      	streq	r1, [r4, #0]
 800d6d8:	e7ed      	b.n	800d6b6 <_free_r+0x22>
 800d6da:	461a      	mov	r2, r3
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	b10b      	cbz	r3, 800d6e4 <_free_r+0x50>
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	d9fa      	bls.n	800d6da <_free_r+0x46>
 800d6e4:	6811      	ldr	r1, [r2, #0]
 800d6e6:	1855      	adds	r5, r2, r1
 800d6e8:	42a5      	cmp	r5, r4
 800d6ea:	d10b      	bne.n	800d704 <_free_r+0x70>
 800d6ec:	6824      	ldr	r4, [r4, #0]
 800d6ee:	4421      	add	r1, r4
 800d6f0:	1854      	adds	r4, r2, r1
 800d6f2:	42a3      	cmp	r3, r4
 800d6f4:	6011      	str	r1, [r2, #0]
 800d6f6:	d1e0      	bne.n	800d6ba <_free_r+0x26>
 800d6f8:	681c      	ldr	r4, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	6053      	str	r3, [r2, #4]
 800d6fe:	4421      	add	r1, r4
 800d700:	6011      	str	r1, [r2, #0]
 800d702:	e7da      	b.n	800d6ba <_free_r+0x26>
 800d704:	d902      	bls.n	800d70c <_free_r+0x78>
 800d706:	230c      	movs	r3, #12
 800d708:	6003      	str	r3, [r0, #0]
 800d70a:	e7d6      	b.n	800d6ba <_free_r+0x26>
 800d70c:	6825      	ldr	r5, [r4, #0]
 800d70e:	1961      	adds	r1, r4, r5
 800d710:	428b      	cmp	r3, r1
 800d712:	bf04      	itt	eq
 800d714:	6819      	ldreq	r1, [r3, #0]
 800d716:	685b      	ldreq	r3, [r3, #4]
 800d718:	6063      	str	r3, [r4, #4]
 800d71a:	bf04      	itt	eq
 800d71c:	1949      	addeq	r1, r1, r5
 800d71e:	6021      	streq	r1, [r4, #0]
 800d720:	6054      	str	r4, [r2, #4]
 800d722:	e7ca      	b.n	800d6ba <_free_r+0x26>
 800d724:	b003      	add	sp, #12
 800d726:	bd30      	pop	{r4, r5, pc}
 800d728:	200037e0 	.word	0x200037e0

0800d72c <sbrk_aligned>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0e      	ldr	r6, [pc, #56]	; (800d768 <sbrk_aligned+0x3c>)
 800d730:	460c      	mov	r4, r1
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	4605      	mov	r5, r0
 800d736:	b911      	cbnz	r1, 800d73e <sbrk_aligned+0x12>
 800d738:	f000 f8bc 	bl	800d8b4 <_sbrk_r>
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 f8b7 	bl	800d8b4 <_sbrk_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d00a      	beq.n	800d760 <sbrk_aligned+0x34>
 800d74a:	1cc4      	adds	r4, r0, #3
 800d74c:	f024 0403 	bic.w	r4, r4, #3
 800d750:	42a0      	cmp	r0, r4
 800d752:	d007      	beq.n	800d764 <sbrk_aligned+0x38>
 800d754:	1a21      	subs	r1, r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f000 f8ac 	bl	800d8b4 <_sbrk_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	d101      	bne.n	800d764 <sbrk_aligned+0x38>
 800d760:	f04f 34ff 	mov.w	r4, #4294967295
 800d764:	4620      	mov	r0, r4
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	200037e4 	.word	0x200037e4

0800d76c <_malloc_r>:
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	1ccd      	adds	r5, r1, #3
 800d772:	f025 0503 	bic.w	r5, r5, #3
 800d776:	3508      	adds	r5, #8
 800d778:	2d0c      	cmp	r5, #12
 800d77a:	bf38      	it	cc
 800d77c:	250c      	movcc	r5, #12
 800d77e:	2d00      	cmp	r5, #0
 800d780:	4607      	mov	r7, r0
 800d782:	db01      	blt.n	800d788 <_malloc_r+0x1c>
 800d784:	42a9      	cmp	r1, r5
 800d786:	d905      	bls.n	800d794 <_malloc_r+0x28>
 800d788:	230c      	movs	r3, #12
 800d78a:	603b      	str	r3, [r7, #0]
 800d78c:	2600      	movs	r6, #0
 800d78e:	4630      	mov	r0, r6
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	4e2e      	ldr	r6, [pc, #184]	; (800d850 <_malloc_r+0xe4>)
 800d796:	f000 f89d 	bl	800d8d4 <__malloc_lock>
 800d79a:	6833      	ldr	r3, [r6, #0]
 800d79c:	461c      	mov	r4, r3
 800d79e:	bb34      	cbnz	r4, 800d7ee <_malloc_r+0x82>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7ff ffc2 	bl	800d72c <sbrk_aligned>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	d14d      	bne.n	800d84a <_malloc_r+0xde>
 800d7ae:	6834      	ldr	r4, [r6, #0]
 800d7b0:	4626      	mov	r6, r4
 800d7b2:	2e00      	cmp	r6, #0
 800d7b4:	d140      	bne.n	800d838 <_malloc_r+0xcc>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	eb04 0803 	add.w	r8, r4, r3
 800d7c0:	f000 f878 	bl	800d8b4 <_sbrk_r>
 800d7c4:	4580      	cmp	r8, r0
 800d7c6:	d13a      	bne.n	800d83e <_malloc_r+0xd2>
 800d7c8:	6821      	ldr	r1, [r4, #0]
 800d7ca:	3503      	adds	r5, #3
 800d7cc:	1a6d      	subs	r5, r5, r1
 800d7ce:	f025 0503 	bic.w	r5, r5, #3
 800d7d2:	3508      	adds	r5, #8
 800d7d4:	2d0c      	cmp	r5, #12
 800d7d6:	bf38      	it	cc
 800d7d8:	250c      	movcc	r5, #12
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7ff ffa5 	bl	800d72c <sbrk_aligned>
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d02b      	beq.n	800d83e <_malloc_r+0xd2>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	442b      	add	r3, r5
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	e00e      	b.n	800d80c <_malloc_r+0xa0>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	1b52      	subs	r2, r2, r5
 800d7f2:	d41e      	bmi.n	800d832 <_malloc_r+0xc6>
 800d7f4:	2a0b      	cmp	r2, #11
 800d7f6:	d916      	bls.n	800d826 <_malloc_r+0xba>
 800d7f8:	1961      	adds	r1, r4, r5
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	6025      	str	r5, [r4, #0]
 800d7fe:	bf18      	it	ne
 800d800:	6059      	strne	r1, [r3, #4]
 800d802:	6863      	ldr	r3, [r4, #4]
 800d804:	bf08      	it	eq
 800d806:	6031      	streq	r1, [r6, #0]
 800d808:	5162      	str	r2, [r4, r5]
 800d80a:	604b      	str	r3, [r1, #4]
 800d80c:	4638      	mov	r0, r7
 800d80e:	f104 060b 	add.w	r6, r4, #11
 800d812:	f000 f865 	bl	800d8e0 <__malloc_unlock>
 800d816:	f026 0607 	bic.w	r6, r6, #7
 800d81a:	1d23      	adds	r3, r4, #4
 800d81c:	1af2      	subs	r2, r6, r3
 800d81e:	d0b6      	beq.n	800d78e <_malloc_r+0x22>
 800d820:	1b9b      	subs	r3, r3, r6
 800d822:	50a3      	str	r3, [r4, r2]
 800d824:	e7b3      	b.n	800d78e <_malloc_r+0x22>
 800d826:	6862      	ldr	r2, [r4, #4]
 800d828:	42a3      	cmp	r3, r4
 800d82a:	bf0c      	ite	eq
 800d82c:	6032      	streq	r2, [r6, #0]
 800d82e:	605a      	strne	r2, [r3, #4]
 800d830:	e7ec      	b.n	800d80c <_malloc_r+0xa0>
 800d832:	4623      	mov	r3, r4
 800d834:	6864      	ldr	r4, [r4, #4]
 800d836:	e7b2      	b.n	800d79e <_malloc_r+0x32>
 800d838:	4634      	mov	r4, r6
 800d83a:	6876      	ldr	r6, [r6, #4]
 800d83c:	e7b9      	b.n	800d7b2 <_malloc_r+0x46>
 800d83e:	230c      	movs	r3, #12
 800d840:	603b      	str	r3, [r7, #0]
 800d842:	4638      	mov	r0, r7
 800d844:	f000 f84c 	bl	800d8e0 <__malloc_unlock>
 800d848:	e7a1      	b.n	800d78e <_malloc_r+0x22>
 800d84a:	6025      	str	r5, [r4, #0]
 800d84c:	e7de      	b.n	800d80c <_malloc_r+0xa0>
 800d84e:	bf00      	nop
 800d850:	200037e0 	.word	0x200037e0

0800d854 <_realloc_r>:
 800d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d858:	4680      	mov	r8, r0
 800d85a:	4614      	mov	r4, r2
 800d85c:	460e      	mov	r6, r1
 800d85e:	b921      	cbnz	r1, 800d86a <_realloc_r+0x16>
 800d860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d864:	4611      	mov	r1, r2
 800d866:	f7ff bf81 	b.w	800d76c <_malloc_r>
 800d86a:	b92a      	cbnz	r2, 800d878 <_realloc_r+0x24>
 800d86c:	f7ff ff12 	bl	800d694 <_free_r>
 800d870:	4625      	mov	r5, r4
 800d872:	4628      	mov	r0, r5
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	f000 f838 	bl	800d8ec <_malloc_usable_size_r>
 800d87c:	4284      	cmp	r4, r0
 800d87e:	4607      	mov	r7, r0
 800d880:	d802      	bhi.n	800d888 <_realloc_r+0x34>
 800d882:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d886:	d812      	bhi.n	800d8ae <_realloc_r+0x5a>
 800d888:	4621      	mov	r1, r4
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff ff6e 	bl	800d76c <_malloc_r>
 800d890:	4605      	mov	r5, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	d0ed      	beq.n	800d872 <_realloc_r+0x1e>
 800d896:	42bc      	cmp	r4, r7
 800d898:	4622      	mov	r2, r4
 800d89a:	4631      	mov	r1, r6
 800d89c:	bf28      	it	cs
 800d89e:	463a      	movcs	r2, r7
 800d8a0:	f7ff fbb8 	bl	800d014 <memcpy>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	f7ff fef4 	bl	800d694 <_free_r>
 800d8ac:	e7e1      	b.n	800d872 <_realloc_r+0x1e>
 800d8ae:	4635      	mov	r5, r6
 800d8b0:	e7df      	b.n	800d872 <_realloc_r+0x1e>
	...

0800d8b4 <_sbrk_r>:
 800d8b4:	b538      	push	{r3, r4, r5, lr}
 800d8b6:	4d06      	ldr	r5, [pc, #24]	; (800d8d0 <_sbrk_r+0x1c>)
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	4608      	mov	r0, r1
 800d8be:	602b      	str	r3, [r5, #0]
 800d8c0:	f7f5 fb5c 	bl	8002f7c <_sbrk>
 800d8c4:	1c43      	adds	r3, r0, #1
 800d8c6:	d102      	bne.n	800d8ce <_sbrk_r+0x1a>
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	b103      	cbz	r3, 800d8ce <_sbrk_r+0x1a>
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	200037e8 	.word	0x200037e8

0800d8d4 <__malloc_lock>:
 800d8d4:	4801      	ldr	r0, [pc, #4]	; (800d8dc <__malloc_lock+0x8>)
 800d8d6:	f000 b811 	b.w	800d8fc <__retarget_lock_acquire_recursive>
 800d8da:	bf00      	nop
 800d8dc:	200037ec 	.word	0x200037ec

0800d8e0 <__malloc_unlock>:
 800d8e0:	4801      	ldr	r0, [pc, #4]	; (800d8e8 <__malloc_unlock+0x8>)
 800d8e2:	f000 b80c 	b.w	800d8fe <__retarget_lock_release_recursive>
 800d8e6:	bf00      	nop
 800d8e8:	200037ec 	.word	0x200037ec

0800d8ec <_malloc_usable_size_r>:
 800d8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8f0:	1f18      	subs	r0, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	bfbc      	itt	lt
 800d8f6:	580b      	ldrlt	r3, [r1, r0]
 800d8f8:	18c0      	addlt	r0, r0, r3
 800d8fa:	4770      	bx	lr

0800d8fc <__retarget_lock_acquire_recursive>:
 800d8fc:	4770      	bx	lr

0800d8fe <__retarget_lock_release_recursive>:
 800d8fe:	4770      	bx	lr

0800d900 <pow>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	ed2d 8b02 	vpush	{d8}
 800d906:	eeb0 8a40 	vmov.f32	s16, s0
 800d90a:	eef0 8a60 	vmov.f32	s17, s1
 800d90e:	ec55 4b11 	vmov	r4, r5, d1
 800d912:	f000 f865 	bl	800d9e0 <__ieee754_pow>
 800d916:	4622      	mov	r2, r4
 800d918:	462b      	mov	r3, r5
 800d91a:	4620      	mov	r0, r4
 800d91c:	4629      	mov	r1, r5
 800d91e:	ec57 6b10 	vmov	r6, r7, d0
 800d922:	f7f3 f90b 	bl	8000b3c <__aeabi_dcmpun>
 800d926:	2800      	cmp	r0, #0
 800d928:	d13b      	bne.n	800d9a2 <pow+0xa2>
 800d92a:	ec51 0b18 	vmov	r0, r1, d8
 800d92e:	2200      	movs	r2, #0
 800d930:	2300      	movs	r3, #0
 800d932:	f7f3 f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d936:	b1b8      	cbz	r0, 800d968 <pow+0x68>
 800d938:	2200      	movs	r2, #0
 800d93a:	2300      	movs	r3, #0
 800d93c:	4620      	mov	r0, r4
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f3 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 800d944:	2800      	cmp	r0, #0
 800d946:	d146      	bne.n	800d9d6 <pow+0xd6>
 800d948:	ec45 4b10 	vmov	d0, r4, r5
 800d94c:	f000 fe61 	bl	800e612 <finite>
 800d950:	b338      	cbz	r0, 800d9a2 <pow+0xa2>
 800d952:	2200      	movs	r2, #0
 800d954:	2300      	movs	r3, #0
 800d956:	4620      	mov	r0, r4
 800d958:	4629      	mov	r1, r5
 800d95a:	f7f3 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800d95e:	b300      	cbz	r0, 800d9a2 <pow+0xa2>
 800d960:	f7ff fb2e 	bl	800cfc0 <__errno>
 800d964:	2322      	movs	r3, #34	; 0x22
 800d966:	e01b      	b.n	800d9a0 <pow+0xa0>
 800d968:	ec47 6b10 	vmov	d0, r6, r7
 800d96c:	f000 fe51 	bl	800e612 <finite>
 800d970:	b9e0      	cbnz	r0, 800d9ac <pow+0xac>
 800d972:	eeb0 0a48 	vmov.f32	s0, s16
 800d976:	eef0 0a68 	vmov.f32	s1, s17
 800d97a:	f000 fe4a 	bl	800e612 <finite>
 800d97e:	b1a8      	cbz	r0, 800d9ac <pow+0xac>
 800d980:	ec45 4b10 	vmov	d0, r4, r5
 800d984:	f000 fe45 	bl	800e612 <finite>
 800d988:	b180      	cbz	r0, 800d9ac <pow+0xac>
 800d98a:	4632      	mov	r2, r6
 800d98c:	463b      	mov	r3, r7
 800d98e:	4630      	mov	r0, r6
 800d990:	4639      	mov	r1, r7
 800d992:	f7f3 f8d3 	bl	8000b3c <__aeabi_dcmpun>
 800d996:	2800      	cmp	r0, #0
 800d998:	d0e2      	beq.n	800d960 <pow+0x60>
 800d99a:	f7ff fb11 	bl	800cfc0 <__errno>
 800d99e:	2321      	movs	r3, #33	; 0x21
 800d9a0:	6003      	str	r3, [r0, #0]
 800d9a2:	ecbd 8b02 	vpop	{d8}
 800d9a6:	ec47 6b10 	vmov	d0, r6, r7
 800d9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	4639      	mov	r1, r7
 800d9b4:	f7f3 f890 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d0f2      	beq.n	800d9a2 <pow+0xa2>
 800d9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800d9c0:	eef0 0a68 	vmov.f32	s1, s17
 800d9c4:	f000 fe25 	bl	800e612 <finite>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d0ea      	beq.n	800d9a2 <pow+0xa2>
 800d9cc:	ec45 4b10 	vmov	d0, r4, r5
 800d9d0:	f000 fe1f 	bl	800e612 <finite>
 800d9d4:	e7c3      	b.n	800d95e <pow+0x5e>
 800d9d6:	4f01      	ldr	r7, [pc, #4]	; (800d9dc <pow+0xdc>)
 800d9d8:	2600      	movs	r6, #0
 800d9da:	e7e2      	b.n	800d9a2 <pow+0xa2>
 800d9dc:	3ff00000 	.word	0x3ff00000

0800d9e0 <__ieee754_pow>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	ed2d 8b06 	vpush	{d8-d10}
 800d9e8:	b089      	sub	sp, #36	; 0x24
 800d9ea:	ed8d 1b00 	vstr	d1, [sp]
 800d9ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d9f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d9f6:	ea58 0102 	orrs.w	r1, r8, r2
 800d9fa:	ec57 6b10 	vmov	r6, r7, d0
 800d9fe:	d115      	bne.n	800da2c <__ieee754_pow+0x4c>
 800da00:	19b3      	adds	r3, r6, r6
 800da02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800da06:	4152      	adcs	r2, r2
 800da08:	4299      	cmp	r1, r3
 800da0a:	4b89      	ldr	r3, [pc, #548]	; (800dc30 <__ieee754_pow+0x250>)
 800da0c:	4193      	sbcs	r3, r2
 800da0e:	f080 84d2 	bcs.w	800e3b6 <__ieee754_pow+0x9d6>
 800da12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da16:	4630      	mov	r0, r6
 800da18:	4639      	mov	r1, r7
 800da1a:	f7f2 fc3f 	bl	800029c <__adddf3>
 800da1e:	ec41 0b10 	vmov	d0, r0, r1
 800da22:	b009      	add	sp, #36	; 0x24
 800da24:	ecbd 8b06 	vpop	{d8-d10}
 800da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2c:	4b81      	ldr	r3, [pc, #516]	; (800dc34 <__ieee754_pow+0x254>)
 800da2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800da32:	429c      	cmp	r4, r3
 800da34:	ee10 aa10 	vmov	sl, s0
 800da38:	463d      	mov	r5, r7
 800da3a:	dc06      	bgt.n	800da4a <__ieee754_pow+0x6a>
 800da3c:	d101      	bne.n	800da42 <__ieee754_pow+0x62>
 800da3e:	2e00      	cmp	r6, #0
 800da40:	d1e7      	bne.n	800da12 <__ieee754_pow+0x32>
 800da42:	4598      	cmp	r8, r3
 800da44:	dc01      	bgt.n	800da4a <__ieee754_pow+0x6a>
 800da46:	d10f      	bne.n	800da68 <__ieee754_pow+0x88>
 800da48:	b172      	cbz	r2, 800da68 <__ieee754_pow+0x88>
 800da4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800da4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800da52:	ea55 050a 	orrs.w	r5, r5, sl
 800da56:	d1dc      	bne.n	800da12 <__ieee754_pow+0x32>
 800da58:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da5c:	18db      	adds	r3, r3, r3
 800da5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800da62:	4152      	adcs	r2, r2
 800da64:	429d      	cmp	r5, r3
 800da66:	e7d0      	b.n	800da0a <__ieee754_pow+0x2a>
 800da68:	2d00      	cmp	r5, #0
 800da6a:	da3b      	bge.n	800dae4 <__ieee754_pow+0x104>
 800da6c:	4b72      	ldr	r3, [pc, #456]	; (800dc38 <__ieee754_pow+0x258>)
 800da6e:	4598      	cmp	r8, r3
 800da70:	dc51      	bgt.n	800db16 <__ieee754_pow+0x136>
 800da72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800da76:	4598      	cmp	r8, r3
 800da78:	f340 84ac 	ble.w	800e3d4 <__ieee754_pow+0x9f4>
 800da7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da84:	2b14      	cmp	r3, #20
 800da86:	dd0f      	ble.n	800daa8 <__ieee754_pow+0xc8>
 800da88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800da8c:	fa22 f103 	lsr.w	r1, r2, r3
 800da90:	fa01 f303 	lsl.w	r3, r1, r3
 800da94:	4293      	cmp	r3, r2
 800da96:	f040 849d 	bne.w	800e3d4 <__ieee754_pow+0x9f4>
 800da9a:	f001 0101 	and.w	r1, r1, #1
 800da9e:	f1c1 0302 	rsb	r3, r1, #2
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	b182      	cbz	r2, 800dac8 <__ieee754_pow+0xe8>
 800daa6:	e05f      	b.n	800db68 <__ieee754_pow+0x188>
 800daa8:	2a00      	cmp	r2, #0
 800daaa:	d15b      	bne.n	800db64 <__ieee754_pow+0x184>
 800daac:	f1c3 0314 	rsb	r3, r3, #20
 800dab0:	fa48 f103 	asr.w	r1, r8, r3
 800dab4:	fa01 f303 	lsl.w	r3, r1, r3
 800dab8:	4543      	cmp	r3, r8
 800daba:	f040 8488 	bne.w	800e3ce <__ieee754_pow+0x9ee>
 800dabe:	f001 0101 	and.w	r1, r1, #1
 800dac2:	f1c1 0302 	rsb	r3, r1, #2
 800dac6:	9304      	str	r3, [sp, #16]
 800dac8:	4b5c      	ldr	r3, [pc, #368]	; (800dc3c <__ieee754_pow+0x25c>)
 800daca:	4598      	cmp	r8, r3
 800dacc:	d132      	bne.n	800db34 <__ieee754_pow+0x154>
 800dace:	f1b9 0f00 	cmp.w	r9, #0
 800dad2:	f280 8478 	bge.w	800e3c6 <__ieee754_pow+0x9e6>
 800dad6:	4959      	ldr	r1, [pc, #356]	; (800dc3c <__ieee754_pow+0x25c>)
 800dad8:	4632      	mov	r2, r6
 800dada:	463b      	mov	r3, r7
 800dadc:	2000      	movs	r0, #0
 800dade:	f7f2 febd 	bl	800085c <__aeabi_ddiv>
 800dae2:	e79c      	b.n	800da1e <__ieee754_pow+0x3e>
 800dae4:	2300      	movs	r3, #0
 800dae6:	9304      	str	r3, [sp, #16]
 800dae8:	2a00      	cmp	r2, #0
 800daea:	d13d      	bne.n	800db68 <__ieee754_pow+0x188>
 800daec:	4b51      	ldr	r3, [pc, #324]	; (800dc34 <__ieee754_pow+0x254>)
 800daee:	4598      	cmp	r8, r3
 800daf0:	d1ea      	bne.n	800dac8 <__ieee754_pow+0xe8>
 800daf2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800daf6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dafa:	ea53 030a 	orrs.w	r3, r3, sl
 800dafe:	f000 845a 	beq.w	800e3b6 <__ieee754_pow+0x9d6>
 800db02:	4b4f      	ldr	r3, [pc, #316]	; (800dc40 <__ieee754_pow+0x260>)
 800db04:	429c      	cmp	r4, r3
 800db06:	dd08      	ble.n	800db1a <__ieee754_pow+0x13a>
 800db08:	f1b9 0f00 	cmp.w	r9, #0
 800db0c:	f2c0 8457 	blt.w	800e3be <__ieee754_pow+0x9de>
 800db10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db14:	e783      	b.n	800da1e <__ieee754_pow+0x3e>
 800db16:	2302      	movs	r3, #2
 800db18:	e7e5      	b.n	800dae6 <__ieee754_pow+0x106>
 800db1a:	f1b9 0f00 	cmp.w	r9, #0
 800db1e:	f04f 0000 	mov.w	r0, #0
 800db22:	f04f 0100 	mov.w	r1, #0
 800db26:	f6bf af7a 	bge.w	800da1e <__ieee754_pow+0x3e>
 800db2a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800db2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db32:	e774      	b.n	800da1e <__ieee754_pow+0x3e>
 800db34:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800db38:	d106      	bne.n	800db48 <__ieee754_pow+0x168>
 800db3a:	4632      	mov	r2, r6
 800db3c:	463b      	mov	r3, r7
 800db3e:	4630      	mov	r0, r6
 800db40:	4639      	mov	r1, r7
 800db42:	f7f2 fd61 	bl	8000608 <__aeabi_dmul>
 800db46:	e76a      	b.n	800da1e <__ieee754_pow+0x3e>
 800db48:	4b3e      	ldr	r3, [pc, #248]	; (800dc44 <__ieee754_pow+0x264>)
 800db4a:	4599      	cmp	r9, r3
 800db4c:	d10c      	bne.n	800db68 <__ieee754_pow+0x188>
 800db4e:	2d00      	cmp	r5, #0
 800db50:	db0a      	blt.n	800db68 <__ieee754_pow+0x188>
 800db52:	ec47 6b10 	vmov	d0, r6, r7
 800db56:	b009      	add	sp, #36	; 0x24
 800db58:	ecbd 8b06 	vpop	{d8-d10}
 800db5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	f000 bc6c 	b.w	800e43c <__ieee754_sqrt>
 800db64:	2300      	movs	r3, #0
 800db66:	9304      	str	r3, [sp, #16]
 800db68:	ec47 6b10 	vmov	d0, r6, r7
 800db6c:	f000 fd48 	bl	800e600 <fabs>
 800db70:	ec51 0b10 	vmov	r0, r1, d0
 800db74:	f1ba 0f00 	cmp.w	sl, #0
 800db78:	d129      	bne.n	800dbce <__ieee754_pow+0x1ee>
 800db7a:	b124      	cbz	r4, 800db86 <__ieee754_pow+0x1a6>
 800db7c:	4b2f      	ldr	r3, [pc, #188]	; (800dc3c <__ieee754_pow+0x25c>)
 800db7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800db82:	429a      	cmp	r2, r3
 800db84:	d123      	bne.n	800dbce <__ieee754_pow+0x1ee>
 800db86:	f1b9 0f00 	cmp.w	r9, #0
 800db8a:	da05      	bge.n	800db98 <__ieee754_pow+0x1b8>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	2000      	movs	r0, #0
 800db92:	492a      	ldr	r1, [pc, #168]	; (800dc3c <__ieee754_pow+0x25c>)
 800db94:	f7f2 fe62 	bl	800085c <__aeabi_ddiv>
 800db98:	2d00      	cmp	r5, #0
 800db9a:	f6bf af40 	bge.w	800da1e <__ieee754_pow+0x3e>
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dba4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dba8:	4323      	orrs	r3, r4
 800dbaa:	d108      	bne.n	800dbbe <__ieee754_pow+0x1de>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	f7f2 fb70 	bl	8000298 <__aeabi_dsub>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	e78f      	b.n	800dade <__ieee754_pow+0xfe>
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	f47f af2c 	bne.w	800da1e <__ieee754_pow+0x3e>
 800dbc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbca:	4619      	mov	r1, r3
 800dbcc:	e727      	b.n	800da1e <__ieee754_pow+0x3e>
 800dbce:	0feb      	lsrs	r3, r5, #31
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	9306      	str	r3, [sp, #24]
 800dbd4:	9a06      	ldr	r2, [sp, #24]
 800dbd6:	9b04      	ldr	r3, [sp, #16]
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	d102      	bne.n	800dbe2 <__ieee754_pow+0x202>
 800dbdc:	4632      	mov	r2, r6
 800dbde:	463b      	mov	r3, r7
 800dbe0:	e7e6      	b.n	800dbb0 <__ieee754_pow+0x1d0>
 800dbe2:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <__ieee754_pow+0x268>)
 800dbe4:	4598      	cmp	r8, r3
 800dbe6:	f340 80fb 	ble.w	800dde0 <__ieee754_pow+0x400>
 800dbea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dbee:	4598      	cmp	r8, r3
 800dbf0:	4b13      	ldr	r3, [pc, #76]	; (800dc40 <__ieee754_pow+0x260>)
 800dbf2:	dd0c      	ble.n	800dc0e <__ieee754_pow+0x22e>
 800dbf4:	429c      	cmp	r4, r3
 800dbf6:	dc0f      	bgt.n	800dc18 <__ieee754_pow+0x238>
 800dbf8:	f1b9 0f00 	cmp.w	r9, #0
 800dbfc:	da0f      	bge.n	800dc1e <__ieee754_pow+0x23e>
 800dbfe:	2000      	movs	r0, #0
 800dc00:	b009      	add	sp, #36	; 0x24
 800dc02:	ecbd 8b06 	vpop	{d8-d10}
 800dc06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0a:	f000 bcf0 	b.w	800e5ee <__math_oflow>
 800dc0e:	429c      	cmp	r4, r3
 800dc10:	dbf2      	blt.n	800dbf8 <__ieee754_pow+0x218>
 800dc12:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <__ieee754_pow+0x25c>)
 800dc14:	429c      	cmp	r4, r3
 800dc16:	dd19      	ble.n	800dc4c <__ieee754_pow+0x26c>
 800dc18:	f1b9 0f00 	cmp.w	r9, #0
 800dc1c:	dcef      	bgt.n	800dbfe <__ieee754_pow+0x21e>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	b009      	add	sp, #36	; 0x24
 800dc22:	ecbd 8b06 	vpop	{d8-d10}
 800dc26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2a:	f000 bcd7 	b.w	800e5dc <__math_uflow>
 800dc2e:	bf00      	nop
 800dc30:	fff00000 	.word	0xfff00000
 800dc34:	7ff00000 	.word	0x7ff00000
 800dc38:	433fffff 	.word	0x433fffff
 800dc3c:	3ff00000 	.word	0x3ff00000
 800dc40:	3fefffff 	.word	0x3fefffff
 800dc44:	3fe00000 	.word	0x3fe00000
 800dc48:	41e00000 	.word	0x41e00000
 800dc4c:	4b60      	ldr	r3, [pc, #384]	; (800ddd0 <__ieee754_pow+0x3f0>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f7f2 fb22 	bl	8000298 <__aeabi_dsub>
 800dc54:	a354      	add	r3, pc, #336	; (adr r3, 800dda8 <__ieee754_pow+0x3c8>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	460d      	mov	r5, r1
 800dc5e:	f7f2 fcd3 	bl	8000608 <__aeabi_dmul>
 800dc62:	a353      	add	r3, pc, #332	; (adr r3, 800ddb0 <__ieee754_pow+0x3d0>)
 800dc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc68:	4606      	mov	r6, r0
 800dc6a:	460f      	mov	r7, r1
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	4629      	mov	r1, r5
 800dc70:	f7f2 fcca 	bl	8000608 <__aeabi_dmul>
 800dc74:	4b57      	ldr	r3, [pc, #348]	; (800ddd4 <__ieee754_pow+0x3f4>)
 800dc76:	4682      	mov	sl, r0
 800dc78:	468b      	mov	fp, r1
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	4629      	mov	r1, r5
 800dc80:	f7f2 fcc2 	bl	8000608 <__aeabi_dmul>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	a14b      	add	r1, pc, #300	; (adr r1, 800ddb8 <__ieee754_pow+0x3d8>)
 800dc8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc8e:	f7f2 fb03 	bl	8000298 <__aeabi_dsub>
 800dc92:	4622      	mov	r2, r4
 800dc94:	462b      	mov	r3, r5
 800dc96:	f7f2 fcb7 	bl	8000608 <__aeabi_dmul>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	2000      	movs	r0, #0
 800dca0:	494d      	ldr	r1, [pc, #308]	; (800ddd8 <__ieee754_pow+0x3f8>)
 800dca2:	f7f2 faf9 	bl	8000298 <__aeabi_dsub>
 800dca6:	4622      	mov	r2, r4
 800dca8:	4680      	mov	r8, r0
 800dcaa:	4689      	mov	r9, r1
 800dcac:	462b      	mov	r3, r5
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 fca9 	bl	8000608 <__aeabi_dmul>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	f7f2 fca3 	bl	8000608 <__aeabi_dmul>
 800dcc2:	a33f      	add	r3, pc, #252	; (adr r3, 800ddc0 <__ieee754_pow+0x3e0>)
 800dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc8:	f7f2 fc9e 	bl	8000608 <__aeabi_dmul>
 800dccc:	4602      	mov	r2, r0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4650      	mov	r0, sl
 800dcd2:	4659      	mov	r1, fp
 800dcd4:	f7f2 fae0 	bl	8000298 <__aeabi_dsub>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4680      	mov	r8, r0
 800dcde:	4689      	mov	r9, r1
 800dce0:	4630      	mov	r0, r6
 800dce2:	4639      	mov	r1, r7
 800dce4:	f7f2 fada 	bl	800029c <__adddf3>
 800dce8:	2000      	movs	r0, #0
 800dcea:	4632      	mov	r2, r6
 800dcec:	463b      	mov	r3, r7
 800dcee:	4604      	mov	r4, r0
 800dcf0:	460d      	mov	r5, r1
 800dcf2:	f7f2 fad1 	bl	8000298 <__aeabi_dsub>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	4649      	mov	r1, r9
 800dcfe:	f7f2 facb 	bl	8000298 <__aeabi_dsub>
 800dd02:	9b04      	ldr	r3, [sp, #16]
 800dd04:	9a06      	ldr	r2, [sp, #24]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	4682      	mov	sl, r0
 800dd0c:	468b      	mov	fp, r1
 800dd0e:	f040 81e7 	bne.w	800e0e0 <__ieee754_pow+0x700>
 800dd12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ddc8 <__ieee754_pow+0x3e8>
 800dd16:	eeb0 8a47 	vmov.f32	s16, s14
 800dd1a:	eef0 8a67 	vmov.f32	s17, s15
 800dd1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd22:	2600      	movs	r6, #0
 800dd24:	4632      	mov	r2, r6
 800dd26:	463b      	mov	r3, r7
 800dd28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd2c:	f7f2 fab4 	bl	8000298 <__aeabi_dsub>
 800dd30:	4622      	mov	r2, r4
 800dd32:	462b      	mov	r3, r5
 800dd34:	f7f2 fc68 	bl	8000608 <__aeabi_dmul>
 800dd38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd3c:	4680      	mov	r8, r0
 800dd3e:	4689      	mov	r9, r1
 800dd40:	4650      	mov	r0, sl
 800dd42:	4659      	mov	r1, fp
 800dd44:	f7f2 fc60 	bl	8000608 <__aeabi_dmul>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	4649      	mov	r1, r9
 800dd50:	f7f2 faa4 	bl	800029c <__adddf3>
 800dd54:	4632      	mov	r2, r6
 800dd56:	463b      	mov	r3, r7
 800dd58:	4680      	mov	r8, r0
 800dd5a:	4689      	mov	r9, r1
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	4629      	mov	r1, r5
 800dd60:	f7f2 fc52 	bl	8000608 <__aeabi_dmul>
 800dd64:	460b      	mov	r3, r1
 800dd66:	4604      	mov	r4, r0
 800dd68:	460d      	mov	r5, r1
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	4640      	mov	r0, r8
 800dd70:	f7f2 fa94 	bl	800029c <__adddf3>
 800dd74:	4b19      	ldr	r3, [pc, #100]	; (800dddc <__ieee754_pow+0x3fc>)
 800dd76:	4299      	cmp	r1, r3
 800dd78:	ec45 4b19 	vmov	d9, r4, r5
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	460f      	mov	r7, r1
 800dd80:	468b      	mov	fp, r1
 800dd82:	f340 82f1 	ble.w	800e368 <__ieee754_pow+0x988>
 800dd86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dd8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dd8e:	4303      	orrs	r3, r0
 800dd90:	f000 81e4 	beq.w	800e15c <__ieee754_pow+0x77c>
 800dd94:	ec51 0b18 	vmov	r0, r1, d8
 800dd98:	2200      	movs	r2, #0
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f7f2 fea6 	bl	8000aec <__aeabi_dcmplt>
 800dda0:	3800      	subs	r0, #0
 800dda2:	bf18      	it	ne
 800dda4:	2001      	movne	r0, #1
 800dda6:	e72b      	b.n	800dc00 <__ieee754_pow+0x220>
 800dda8:	60000000 	.word	0x60000000
 800ddac:	3ff71547 	.word	0x3ff71547
 800ddb0:	f85ddf44 	.word	0xf85ddf44
 800ddb4:	3e54ae0b 	.word	0x3e54ae0b
 800ddb8:	55555555 	.word	0x55555555
 800ddbc:	3fd55555 	.word	0x3fd55555
 800ddc0:	652b82fe 	.word	0x652b82fe
 800ddc4:	3ff71547 	.word	0x3ff71547
 800ddc8:	00000000 	.word	0x00000000
 800ddcc:	bff00000 	.word	0xbff00000
 800ddd0:	3ff00000 	.word	0x3ff00000
 800ddd4:	3fd00000 	.word	0x3fd00000
 800ddd8:	3fe00000 	.word	0x3fe00000
 800dddc:	408fffff 	.word	0x408fffff
 800dde0:	4bd5      	ldr	r3, [pc, #852]	; (800e138 <__ieee754_pow+0x758>)
 800dde2:	402b      	ands	r3, r5
 800dde4:	2200      	movs	r2, #0
 800dde6:	b92b      	cbnz	r3, 800ddf4 <__ieee754_pow+0x414>
 800dde8:	4bd4      	ldr	r3, [pc, #848]	; (800e13c <__ieee754_pow+0x75c>)
 800ddea:	f7f2 fc0d 	bl	8000608 <__aeabi_dmul>
 800ddee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ddf2:	460c      	mov	r4, r1
 800ddf4:	1523      	asrs	r3, r4, #20
 800ddf6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ddfa:	4413      	add	r3, r2
 800ddfc:	9305      	str	r3, [sp, #20]
 800ddfe:	4bd0      	ldr	r3, [pc, #832]	; (800e140 <__ieee754_pow+0x760>)
 800de00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800de08:	429c      	cmp	r4, r3
 800de0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800de0e:	dd08      	ble.n	800de22 <__ieee754_pow+0x442>
 800de10:	4bcc      	ldr	r3, [pc, #816]	; (800e144 <__ieee754_pow+0x764>)
 800de12:	429c      	cmp	r4, r3
 800de14:	f340 8162 	ble.w	800e0dc <__ieee754_pow+0x6fc>
 800de18:	9b05      	ldr	r3, [sp, #20]
 800de1a:	3301      	adds	r3, #1
 800de1c:	9305      	str	r3, [sp, #20]
 800de1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800de22:	2400      	movs	r4, #0
 800de24:	00e3      	lsls	r3, r4, #3
 800de26:	9307      	str	r3, [sp, #28]
 800de28:	4bc7      	ldr	r3, [pc, #796]	; (800e148 <__ieee754_pow+0x768>)
 800de2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de2e:	ed93 7b00 	vldr	d7, [r3]
 800de32:	4629      	mov	r1, r5
 800de34:	ec53 2b17 	vmov	r2, r3, d7
 800de38:	eeb0 9a47 	vmov.f32	s18, s14
 800de3c:	eef0 9a67 	vmov.f32	s19, s15
 800de40:	4682      	mov	sl, r0
 800de42:	f7f2 fa29 	bl	8000298 <__aeabi_dsub>
 800de46:	4652      	mov	r2, sl
 800de48:	4606      	mov	r6, r0
 800de4a:	460f      	mov	r7, r1
 800de4c:	462b      	mov	r3, r5
 800de4e:	ec51 0b19 	vmov	r0, r1, d9
 800de52:	f7f2 fa23 	bl	800029c <__adddf3>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	2000      	movs	r0, #0
 800de5c:	49bb      	ldr	r1, [pc, #748]	; (800e14c <__ieee754_pow+0x76c>)
 800de5e:	f7f2 fcfd 	bl	800085c <__aeabi_ddiv>
 800de62:	ec41 0b1a 	vmov	d10, r0, r1
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4630      	mov	r0, r6
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 fbcb 	bl	8000608 <__aeabi_dmul>
 800de72:	2300      	movs	r3, #0
 800de74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de78:	9302      	str	r3, [sp, #8]
 800de7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de7e:	46ab      	mov	fp, r5
 800de80:	106d      	asrs	r5, r5, #1
 800de82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800de86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800de8a:	ec41 0b18 	vmov	d8, r0, r1
 800de8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800de92:	2200      	movs	r2, #0
 800de94:	4640      	mov	r0, r8
 800de96:	4649      	mov	r1, r9
 800de98:	4614      	mov	r4, r2
 800de9a:	461d      	mov	r5, r3
 800de9c:	f7f2 fbb4 	bl	8000608 <__aeabi_dmul>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	4630      	mov	r0, r6
 800dea6:	4639      	mov	r1, r7
 800dea8:	f7f2 f9f6 	bl	8000298 <__aeabi_dsub>
 800deac:	ec53 2b19 	vmov	r2, r3, d9
 800deb0:	4606      	mov	r6, r0
 800deb2:	460f      	mov	r7, r1
 800deb4:	4620      	mov	r0, r4
 800deb6:	4629      	mov	r1, r5
 800deb8:	f7f2 f9ee 	bl	8000298 <__aeabi_dsub>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4650      	mov	r0, sl
 800dec2:	4659      	mov	r1, fp
 800dec4:	f7f2 f9e8 	bl	8000298 <__aeabi_dsub>
 800dec8:	4642      	mov	r2, r8
 800deca:	464b      	mov	r3, r9
 800decc:	f7f2 fb9c 	bl	8000608 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4630      	mov	r0, r6
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7f2 f9de 	bl	8000298 <__aeabi_dsub>
 800dedc:	ec53 2b1a 	vmov	r2, r3, d10
 800dee0:	f7f2 fb92 	bl	8000608 <__aeabi_dmul>
 800dee4:	ec53 2b18 	vmov	r2, r3, d8
 800dee8:	ec41 0b19 	vmov	d9, r0, r1
 800deec:	ec51 0b18 	vmov	r0, r1, d8
 800def0:	f7f2 fb8a 	bl	8000608 <__aeabi_dmul>
 800def4:	a37c      	add	r3, pc, #496	; (adr r3, 800e0e8 <__ieee754_pow+0x708>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	4604      	mov	r4, r0
 800defc:	460d      	mov	r5, r1
 800defe:	f7f2 fb83 	bl	8000608 <__aeabi_dmul>
 800df02:	a37b      	add	r3, pc, #492	; (adr r3, 800e0f0 <__ieee754_pow+0x710>)
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	f7f2 f9c8 	bl	800029c <__adddf3>
 800df0c:	4622      	mov	r2, r4
 800df0e:	462b      	mov	r3, r5
 800df10:	f7f2 fb7a 	bl	8000608 <__aeabi_dmul>
 800df14:	a378      	add	r3, pc, #480	; (adr r3, 800e0f8 <__ieee754_pow+0x718>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f7f2 f9bf 	bl	800029c <__adddf3>
 800df1e:	4622      	mov	r2, r4
 800df20:	462b      	mov	r3, r5
 800df22:	f7f2 fb71 	bl	8000608 <__aeabi_dmul>
 800df26:	a376      	add	r3, pc, #472	; (adr r3, 800e100 <__ieee754_pow+0x720>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f9b6 	bl	800029c <__adddf3>
 800df30:	4622      	mov	r2, r4
 800df32:	462b      	mov	r3, r5
 800df34:	f7f2 fb68 	bl	8000608 <__aeabi_dmul>
 800df38:	a373      	add	r3, pc, #460	; (adr r3, 800e108 <__ieee754_pow+0x728>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f7f2 f9ad 	bl	800029c <__adddf3>
 800df42:	4622      	mov	r2, r4
 800df44:	462b      	mov	r3, r5
 800df46:	f7f2 fb5f 	bl	8000608 <__aeabi_dmul>
 800df4a:	a371      	add	r3, pc, #452	; (adr r3, 800e110 <__ieee754_pow+0x730>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 f9a4 	bl	800029c <__adddf3>
 800df54:	4622      	mov	r2, r4
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	462b      	mov	r3, r5
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 fb52 	bl	8000608 <__aeabi_dmul>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	f7f2 fb4c 	bl	8000608 <__aeabi_dmul>
 800df70:	4642      	mov	r2, r8
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	464b      	mov	r3, r9
 800df78:	ec51 0b18 	vmov	r0, r1, d8
 800df7c:	f7f2 f98e 	bl	800029c <__adddf3>
 800df80:	ec53 2b19 	vmov	r2, r3, d9
 800df84:	f7f2 fb40 	bl	8000608 <__aeabi_dmul>
 800df88:	4622      	mov	r2, r4
 800df8a:	462b      	mov	r3, r5
 800df8c:	f7f2 f986 	bl	800029c <__adddf3>
 800df90:	4642      	mov	r2, r8
 800df92:	4682      	mov	sl, r0
 800df94:	468b      	mov	fp, r1
 800df96:	464b      	mov	r3, r9
 800df98:	4640      	mov	r0, r8
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fb34 	bl	8000608 <__aeabi_dmul>
 800dfa0:	4b6b      	ldr	r3, [pc, #428]	; (800e150 <__ieee754_pow+0x770>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	460f      	mov	r7, r1
 800dfa8:	f7f2 f978 	bl	800029c <__adddf3>
 800dfac:	4652      	mov	r2, sl
 800dfae:	465b      	mov	r3, fp
 800dfb0:	f7f2 f974 	bl	800029c <__adddf3>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	4649      	mov	r1, r9
 800dfc2:	f7f2 fb21 	bl	8000608 <__aeabi_dmul>
 800dfc6:	4b62      	ldr	r3, [pc, #392]	; (800e150 <__ieee754_pow+0x770>)
 800dfc8:	4680      	mov	r8, r0
 800dfca:	4689      	mov	r9, r1
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 f961 	bl	8000298 <__aeabi_dsub>
 800dfd6:	4632      	mov	r2, r6
 800dfd8:	463b      	mov	r3, r7
 800dfda:	f7f2 f95d 	bl	8000298 <__aeabi_dsub>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4650      	mov	r0, sl
 800dfe4:	4659      	mov	r1, fp
 800dfe6:	f7f2 f957 	bl	8000298 <__aeabi_dsub>
 800dfea:	ec53 2b18 	vmov	r2, r3, d8
 800dfee:	f7f2 fb0b 	bl	8000608 <__aeabi_dmul>
 800dff2:	4622      	mov	r2, r4
 800dff4:	4606      	mov	r6, r0
 800dff6:	460f      	mov	r7, r1
 800dff8:	462b      	mov	r3, r5
 800dffa:	ec51 0b19 	vmov	r0, r1, d9
 800dffe:	f7f2 fb03 	bl	8000608 <__aeabi_dmul>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	f7f2 f947 	bl	800029c <__adddf3>
 800e00e:	4606      	mov	r6, r0
 800e010:	460f      	mov	r7, r1
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4640      	mov	r0, r8
 800e018:	4649      	mov	r1, r9
 800e01a:	f7f2 f93f 	bl	800029c <__adddf3>
 800e01e:	a33e      	add	r3, pc, #248	; (adr r3, 800e118 <__ieee754_pow+0x738>)
 800e020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e024:	2000      	movs	r0, #0
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	f7f2 faed 	bl	8000608 <__aeabi_dmul>
 800e02e:	4642      	mov	r2, r8
 800e030:	ec41 0b18 	vmov	d8, r0, r1
 800e034:	464b      	mov	r3, r9
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	f7f2 f92d 	bl	8000298 <__aeabi_dsub>
 800e03e:	4602      	mov	r2, r0
 800e040:	460b      	mov	r3, r1
 800e042:	4630      	mov	r0, r6
 800e044:	4639      	mov	r1, r7
 800e046:	f7f2 f927 	bl	8000298 <__aeabi_dsub>
 800e04a:	a335      	add	r3, pc, #212	; (adr r3, 800e120 <__ieee754_pow+0x740>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f2 fada 	bl	8000608 <__aeabi_dmul>
 800e054:	a334      	add	r3, pc, #208	; (adr r3, 800e128 <__ieee754_pow+0x748>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	4606      	mov	r6, r0
 800e05c:	460f      	mov	r7, r1
 800e05e:	4620      	mov	r0, r4
 800e060:	4629      	mov	r1, r5
 800e062:	f7f2 fad1 	bl	8000608 <__aeabi_dmul>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4630      	mov	r0, r6
 800e06c:	4639      	mov	r1, r7
 800e06e:	f7f2 f915 	bl	800029c <__adddf3>
 800e072:	9a07      	ldr	r2, [sp, #28]
 800e074:	4b37      	ldr	r3, [pc, #220]	; (800e154 <__ieee754_pow+0x774>)
 800e076:	4413      	add	r3, r2
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	f7f2 f90e 	bl	800029c <__adddf3>
 800e080:	4682      	mov	sl, r0
 800e082:	9805      	ldr	r0, [sp, #20]
 800e084:	468b      	mov	fp, r1
 800e086:	f7f2 fa55 	bl	8000534 <__aeabi_i2d>
 800e08a:	9a07      	ldr	r2, [sp, #28]
 800e08c:	4b32      	ldr	r3, [pc, #200]	; (800e158 <__ieee754_pow+0x778>)
 800e08e:	4413      	add	r3, r2
 800e090:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e094:	4606      	mov	r6, r0
 800e096:	460f      	mov	r7, r1
 800e098:	4652      	mov	r2, sl
 800e09a:	465b      	mov	r3, fp
 800e09c:	ec51 0b18 	vmov	r0, r1, d8
 800e0a0:	f7f2 f8fc 	bl	800029c <__adddf3>
 800e0a4:	4642      	mov	r2, r8
 800e0a6:	464b      	mov	r3, r9
 800e0a8:	f7f2 f8f8 	bl	800029c <__adddf3>
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	f7f2 f8f4 	bl	800029c <__adddf3>
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	4632      	mov	r2, r6
 800e0b8:	463b      	mov	r3, r7
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	460d      	mov	r5, r1
 800e0be:	f7f2 f8eb 	bl	8000298 <__aeabi_dsub>
 800e0c2:	4642      	mov	r2, r8
 800e0c4:	464b      	mov	r3, r9
 800e0c6:	f7f2 f8e7 	bl	8000298 <__aeabi_dsub>
 800e0ca:	ec53 2b18 	vmov	r2, r3, d8
 800e0ce:	f7f2 f8e3 	bl	8000298 <__aeabi_dsub>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	4659      	mov	r1, fp
 800e0da:	e610      	b.n	800dcfe <__ieee754_pow+0x31e>
 800e0dc:	2401      	movs	r4, #1
 800e0de:	e6a1      	b.n	800de24 <__ieee754_pow+0x444>
 800e0e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e130 <__ieee754_pow+0x750>
 800e0e4:	e617      	b.n	800dd16 <__ieee754_pow+0x336>
 800e0e6:	bf00      	nop
 800e0e8:	4a454eef 	.word	0x4a454eef
 800e0ec:	3fca7e28 	.word	0x3fca7e28
 800e0f0:	93c9db65 	.word	0x93c9db65
 800e0f4:	3fcd864a 	.word	0x3fcd864a
 800e0f8:	a91d4101 	.word	0xa91d4101
 800e0fc:	3fd17460 	.word	0x3fd17460
 800e100:	518f264d 	.word	0x518f264d
 800e104:	3fd55555 	.word	0x3fd55555
 800e108:	db6fabff 	.word	0xdb6fabff
 800e10c:	3fdb6db6 	.word	0x3fdb6db6
 800e110:	33333303 	.word	0x33333303
 800e114:	3fe33333 	.word	0x3fe33333
 800e118:	e0000000 	.word	0xe0000000
 800e11c:	3feec709 	.word	0x3feec709
 800e120:	dc3a03fd 	.word	0xdc3a03fd
 800e124:	3feec709 	.word	0x3feec709
 800e128:	145b01f5 	.word	0x145b01f5
 800e12c:	be3e2fe0 	.word	0xbe3e2fe0
 800e130:	00000000 	.word	0x00000000
 800e134:	3ff00000 	.word	0x3ff00000
 800e138:	7ff00000 	.word	0x7ff00000
 800e13c:	43400000 	.word	0x43400000
 800e140:	0003988e 	.word	0x0003988e
 800e144:	000bb679 	.word	0x000bb679
 800e148:	0800e8d0 	.word	0x0800e8d0
 800e14c:	3ff00000 	.word	0x3ff00000
 800e150:	40080000 	.word	0x40080000
 800e154:	0800e8f0 	.word	0x0800e8f0
 800e158:	0800e8e0 	.word	0x0800e8e0
 800e15c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e434 <__ieee754_pow+0xa54>)
 800e15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e162:	4640      	mov	r0, r8
 800e164:	4649      	mov	r1, r9
 800e166:	f7f2 f899 	bl	800029c <__adddf3>
 800e16a:	4622      	mov	r2, r4
 800e16c:	ec41 0b1a 	vmov	d10, r0, r1
 800e170:	462b      	mov	r3, r5
 800e172:	4630      	mov	r0, r6
 800e174:	4639      	mov	r1, r7
 800e176:	f7f2 f88f 	bl	8000298 <__aeabi_dsub>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	ec51 0b1a 	vmov	r0, r1, d10
 800e182:	f7f2 fcd1 	bl	8000b28 <__aeabi_dcmpgt>
 800e186:	2800      	cmp	r0, #0
 800e188:	f47f ae04 	bne.w	800dd94 <__ieee754_pow+0x3b4>
 800e18c:	4aa4      	ldr	r2, [pc, #656]	; (800e420 <__ieee754_pow+0xa40>)
 800e18e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e192:	4293      	cmp	r3, r2
 800e194:	f340 8108 	ble.w	800e3a8 <__ieee754_pow+0x9c8>
 800e198:	151b      	asrs	r3, r3, #20
 800e19a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e19e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e1a2:	fa4a f303 	asr.w	r3, sl, r3
 800e1a6:	445b      	add	r3, fp
 800e1a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e1ac:	4e9d      	ldr	r6, [pc, #628]	; (800e424 <__ieee754_pow+0xa44>)
 800e1ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e1b2:	4116      	asrs	r6, r2
 800e1b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	ea23 0106 	bic.w	r1, r3, r6
 800e1be:	f1c2 0214 	rsb	r2, r2, #20
 800e1c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e1c6:	fa4a fa02 	asr.w	sl, sl, r2
 800e1ca:	f1bb 0f00 	cmp.w	fp, #0
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	bfb8      	it	lt
 800e1d8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1dc:	f7f2 f85c 	bl	8000298 <__aeabi_dsub>
 800e1e0:	ec41 0b19 	vmov	d9, r0, r1
 800e1e4:	4642      	mov	r2, r8
 800e1e6:	464b      	mov	r3, r9
 800e1e8:	ec51 0b19 	vmov	r0, r1, d9
 800e1ec:	f7f2 f856 	bl	800029c <__adddf3>
 800e1f0:	a37b      	add	r3, pc, #492	; (adr r3, 800e3e0 <__ieee754_pow+0xa00>)
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	f7f2 fa04 	bl	8000608 <__aeabi_dmul>
 800e200:	ec53 2b19 	vmov	r2, r3, d9
 800e204:	4606      	mov	r6, r0
 800e206:	460f      	mov	r7, r1
 800e208:	4620      	mov	r0, r4
 800e20a:	4629      	mov	r1, r5
 800e20c:	f7f2 f844 	bl	8000298 <__aeabi_dsub>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	4640      	mov	r0, r8
 800e216:	4649      	mov	r1, r9
 800e218:	f7f2 f83e 	bl	8000298 <__aeabi_dsub>
 800e21c:	a372      	add	r3, pc, #456	; (adr r3, 800e3e8 <__ieee754_pow+0xa08>)
 800e21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e222:	f7f2 f9f1 	bl	8000608 <__aeabi_dmul>
 800e226:	a372      	add	r3, pc, #456	; (adr r3, 800e3f0 <__ieee754_pow+0xa10>)
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	4680      	mov	r8, r0
 800e22e:	4689      	mov	r9, r1
 800e230:	4620      	mov	r0, r4
 800e232:	4629      	mov	r1, r5
 800e234:	f7f2 f9e8 	bl	8000608 <__aeabi_dmul>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4640      	mov	r0, r8
 800e23e:	4649      	mov	r1, r9
 800e240:	f7f2 f82c 	bl	800029c <__adddf3>
 800e244:	4604      	mov	r4, r0
 800e246:	460d      	mov	r5, r1
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	4630      	mov	r0, r6
 800e24e:	4639      	mov	r1, r7
 800e250:	f7f2 f824 	bl	800029c <__adddf3>
 800e254:	4632      	mov	r2, r6
 800e256:	463b      	mov	r3, r7
 800e258:	4680      	mov	r8, r0
 800e25a:	4689      	mov	r9, r1
 800e25c:	f7f2 f81c 	bl	8000298 <__aeabi_dsub>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4620      	mov	r0, r4
 800e266:	4629      	mov	r1, r5
 800e268:	f7f2 f816 	bl	8000298 <__aeabi_dsub>
 800e26c:	4642      	mov	r2, r8
 800e26e:	4606      	mov	r6, r0
 800e270:	460f      	mov	r7, r1
 800e272:	464b      	mov	r3, r9
 800e274:	4640      	mov	r0, r8
 800e276:	4649      	mov	r1, r9
 800e278:	f7f2 f9c6 	bl	8000608 <__aeabi_dmul>
 800e27c:	a35e      	add	r3, pc, #376	; (adr r3, 800e3f8 <__ieee754_pow+0xa18>)
 800e27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e282:	4604      	mov	r4, r0
 800e284:	460d      	mov	r5, r1
 800e286:	f7f2 f9bf 	bl	8000608 <__aeabi_dmul>
 800e28a:	a35d      	add	r3, pc, #372	; (adr r3, 800e400 <__ieee754_pow+0xa20>)
 800e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e290:	f7f2 f802 	bl	8000298 <__aeabi_dsub>
 800e294:	4622      	mov	r2, r4
 800e296:	462b      	mov	r3, r5
 800e298:	f7f2 f9b6 	bl	8000608 <__aeabi_dmul>
 800e29c:	a35a      	add	r3, pc, #360	; (adr r3, 800e408 <__ieee754_pow+0xa28>)
 800e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a2:	f7f1 fffb 	bl	800029c <__adddf3>
 800e2a6:	4622      	mov	r2, r4
 800e2a8:	462b      	mov	r3, r5
 800e2aa:	f7f2 f9ad 	bl	8000608 <__aeabi_dmul>
 800e2ae:	a358      	add	r3, pc, #352	; (adr r3, 800e410 <__ieee754_pow+0xa30>)
 800e2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b4:	f7f1 fff0 	bl	8000298 <__aeabi_dsub>
 800e2b8:	4622      	mov	r2, r4
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	f7f2 f9a4 	bl	8000608 <__aeabi_dmul>
 800e2c0:	a355      	add	r3, pc, #340	; (adr r3, 800e418 <__ieee754_pow+0xa38>)
 800e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c6:	f7f1 ffe9 	bl	800029c <__adddf3>
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	462b      	mov	r3, r5
 800e2ce:	f7f2 f99b 	bl	8000608 <__aeabi_dmul>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	4649      	mov	r1, r9
 800e2da:	f7f1 ffdd 	bl	8000298 <__aeabi_dsub>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	4640      	mov	r0, r8
 800e2e8:	4649      	mov	r1, r9
 800e2ea:	f7f2 f98d 	bl	8000608 <__aeabi_dmul>
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	ec41 0b19 	vmov	d9, r0, r1
 800e2f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	f7f1 ffcc 	bl	8000298 <__aeabi_dsub>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	ec51 0b19 	vmov	r0, r1, d9
 800e308:	f7f2 faa8 	bl	800085c <__aeabi_ddiv>
 800e30c:	4632      	mov	r2, r6
 800e30e:	4604      	mov	r4, r0
 800e310:	460d      	mov	r5, r1
 800e312:	463b      	mov	r3, r7
 800e314:	4640      	mov	r0, r8
 800e316:	4649      	mov	r1, r9
 800e318:	f7f2 f976 	bl	8000608 <__aeabi_dmul>
 800e31c:	4632      	mov	r2, r6
 800e31e:	463b      	mov	r3, r7
 800e320:	f7f1 ffbc 	bl	800029c <__adddf3>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4620      	mov	r0, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	f7f1 ffb4 	bl	8000298 <__aeabi_dsub>
 800e330:	4642      	mov	r2, r8
 800e332:	464b      	mov	r3, r9
 800e334:	f7f1 ffb0 	bl	8000298 <__aeabi_dsub>
 800e338:	460b      	mov	r3, r1
 800e33a:	4602      	mov	r2, r0
 800e33c:	493a      	ldr	r1, [pc, #232]	; (800e428 <__ieee754_pow+0xa48>)
 800e33e:	2000      	movs	r0, #0
 800e340:	f7f1 ffaa 	bl	8000298 <__aeabi_dsub>
 800e344:	ec41 0b10 	vmov	d0, r0, r1
 800e348:	ee10 3a90 	vmov	r3, s1
 800e34c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e354:	da2b      	bge.n	800e3ae <__ieee754_pow+0x9ce>
 800e356:	4650      	mov	r0, sl
 800e358:	f000 f966 	bl	800e628 <scalbn>
 800e35c:	ec51 0b10 	vmov	r0, r1, d0
 800e360:	ec53 2b18 	vmov	r2, r3, d8
 800e364:	f7ff bbed 	b.w	800db42 <__ieee754_pow+0x162>
 800e368:	4b30      	ldr	r3, [pc, #192]	; (800e42c <__ieee754_pow+0xa4c>)
 800e36a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e36e:	429e      	cmp	r6, r3
 800e370:	f77f af0c 	ble.w	800e18c <__ieee754_pow+0x7ac>
 800e374:	4b2e      	ldr	r3, [pc, #184]	; (800e430 <__ieee754_pow+0xa50>)
 800e376:	440b      	add	r3, r1
 800e378:	4303      	orrs	r3, r0
 800e37a:	d009      	beq.n	800e390 <__ieee754_pow+0x9b0>
 800e37c:	ec51 0b18 	vmov	r0, r1, d8
 800e380:	2200      	movs	r2, #0
 800e382:	2300      	movs	r3, #0
 800e384:	f7f2 fbb2 	bl	8000aec <__aeabi_dcmplt>
 800e388:	3800      	subs	r0, #0
 800e38a:	bf18      	it	ne
 800e38c:	2001      	movne	r0, #1
 800e38e:	e447      	b.n	800dc20 <__ieee754_pow+0x240>
 800e390:	4622      	mov	r2, r4
 800e392:	462b      	mov	r3, r5
 800e394:	f7f1 ff80 	bl	8000298 <__aeabi_dsub>
 800e398:	4642      	mov	r2, r8
 800e39a:	464b      	mov	r3, r9
 800e39c:	f7f2 fbba 	bl	8000b14 <__aeabi_dcmpge>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	f43f aef3 	beq.w	800e18c <__ieee754_pow+0x7ac>
 800e3a6:	e7e9      	b.n	800e37c <__ieee754_pow+0x99c>
 800e3a8:	f04f 0a00 	mov.w	sl, #0
 800e3ac:	e71a      	b.n	800e1e4 <__ieee754_pow+0x804>
 800e3ae:	ec51 0b10 	vmov	r0, r1, d0
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	e7d4      	b.n	800e360 <__ieee754_pow+0x980>
 800e3b6:	491c      	ldr	r1, [pc, #112]	; (800e428 <__ieee754_pow+0xa48>)
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	f7ff bb30 	b.w	800da1e <__ieee754_pow+0x3e>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	f7ff bb2c 	b.w	800da1e <__ieee754_pow+0x3e>
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7ff bb28 	b.w	800da1e <__ieee754_pow+0x3e>
 800e3ce:	9204      	str	r2, [sp, #16]
 800e3d0:	f7ff bb7a 	b.w	800dac8 <__ieee754_pow+0xe8>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f7ff bb64 	b.w	800daa2 <__ieee754_pow+0xc2>
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	00000000 	.word	0x00000000
 800e3e4:	3fe62e43 	.word	0x3fe62e43
 800e3e8:	fefa39ef 	.word	0xfefa39ef
 800e3ec:	3fe62e42 	.word	0x3fe62e42
 800e3f0:	0ca86c39 	.word	0x0ca86c39
 800e3f4:	be205c61 	.word	0xbe205c61
 800e3f8:	72bea4d0 	.word	0x72bea4d0
 800e3fc:	3e663769 	.word	0x3e663769
 800e400:	c5d26bf1 	.word	0xc5d26bf1
 800e404:	3ebbbd41 	.word	0x3ebbbd41
 800e408:	af25de2c 	.word	0xaf25de2c
 800e40c:	3f11566a 	.word	0x3f11566a
 800e410:	16bebd93 	.word	0x16bebd93
 800e414:	3f66c16c 	.word	0x3f66c16c
 800e418:	5555553e 	.word	0x5555553e
 800e41c:	3fc55555 	.word	0x3fc55555
 800e420:	3fe00000 	.word	0x3fe00000
 800e424:	000fffff 	.word	0x000fffff
 800e428:	3ff00000 	.word	0x3ff00000
 800e42c:	4090cbff 	.word	0x4090cbff
 800e430:	3f6f3400 	.word	0x3f6f3400
 800e434:	652b82fe 	.word	0x652b82fe
 800e438:	3c971547 	.word	0x3c971547

0800e43c <__ieee754_sqrt>:
 800e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e440:	ec55 4b10 	vmov	r4, r5, d0
 800e444:	4e55      	ldr	r6, [pc, #340]	; (800e59c <__ieee754_sqrt+0x160>)
 800e446:	43ae      	bics	r6, r5
 800e448:	ee10 0a10 	vmov	r0, s0
 800e44c:	ee10 3a10 	vmov	r3, s0
 800e450:	462a      	mov	r2, r5
 800e452:	4629      	mov	r1, r5
 800e454:	d110      	bne.n	800e478 <__ieee754_sqrt+0x3c>
 800e456:	ee10 2a10 	vmov	r2, s0
 800e45a:	462b      	mov	r3, r5
 800e45c:	f7f2 f8d4 	bl	8000608 <__aeabi_dmul>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4620      	mov	r0, r4
 800e466:	4629      	mov	r1, r5
 800e468:	f7f1 ff18 	bl	800029c <__adddf3>
 800e46c:	4604      	mov	r4, r0
 800e46e:	460d      	mov	r5, r1
 800e470:	ec45 4b10 	vmov	d0, r4, r5
 800e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e478:	2d00      	cmp	r5, #0
 800e47a:	dc10      	bgt.n	800e49e <__ieee754_sqrt+0x62>
 800e47c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e480:	4330      	orrs	r0, r6
 800e482:	d0f5      	beq.n	800e470 <__ieee754_sqrt+0x34>
 800e484:	b15d      	cbz	r5, 800e49e <__ieee754_sqrt+0x62>
 800e486:	ee10 2a10 	vmov	r2, s0
 800e48a:	462b      	mov	r3, r5
 800e48c:	ee10 0a10 	vmov	r0, s0
 800e490:	f7f1 ff02 	bl	8000298 <__aeabi_dsub>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	f7f2 f9e0 	bl	800085c <__aeabi_ddiv>
 800e49c:	e7e6      	b.n	800e46c <__ieee754_sqrt+0x30>
 800e49e:	1512      	asrs	r2, r2, #20
 800e4a0:	d074      	beq.n	800e58c <__ieee754_sqrt+0x150>
 800e4a2:	07d4      	lsls	r4, r2, #31
 800e4a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e4a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e4ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e4b0:	bf5e      	ittt	pl
 800e4b2:	0fda      	lsrpl	r2, r3, #31
 800e4b4:	005b      	lslpl	r3, r3, #1
 800e4b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e4ba:	2400      	movs	r4, #0
 800e4bc:	0fda      	lsrs	r2, r3, #31
 800e4be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e4c2:	107f      	asrs	r7, r7, #1
 800e4c4:	005b      	lsls	r3, r3, #1
 800e4c6:	2516      	movs	r5, #22
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e4ce:	1886      	adds	r6, r0, r2
 800e4d0:	428e      	cmp	r6, r1
 800e4d2:	bfde      	ittt	le
 800e4d4:	1b89      	suble	r1, r1, r6
 800e4d6:	18b0      	addle	r0, r6, r2
 800e4d8:	18a4      	addle	r4, r4, r2
 800e4da:	0049      	lsls	r1, r1, #1
 800e4dc:	3d01      	subs	r5, #1
 800e4de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e4e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e4e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4ea:	d1f0      	bne.n	800e4ce <__ieee754_sqrt+0x92>
 800e4ec:	462a      	mov	r2, r5
 800e4ee:	f04f 0e20 	mov.w	lr, #32
 800e4f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e4f6:	4281      	cmp	r1, r0
 800e4f8:	eb06 0c05 	add.w	ip, r6, r5
 800e4fc:	dc02      	bgt.n	800e504 <__ieee754_sqrt+0xc8>
 800e4fe:	d113      	bne.n	800e528 <__ieee754_sqrt+0xec>
 800e500:	459c      	cmp	ip, r3
 800e502:	d811      	bhi.n	800e528 <__ieee754_sqrt+0xec>
 800e504:	f1bc 0f00 	cmp.w	ip, #0
 800e508:	eb0c 0506 	add.w	r5, ip, r6
 800e50c:	da43      	bge.n	800e596 <__ieee754_sqrt+0x15a>
 800e50e:	2d00      	cmp	r5, #0
 800e510:	db41      	blt.n	800e596 <__ieee754_sqrt+0x15a>
 800e512:	f100 0801 	add.w	r8, r0, #1
 800e516:	1a09      	subs	r1, r1, r0
 800e518:	459c      	cmp	ip, r3
 800e51a:	bf88      	it	hi
 800e51c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e520:	eba3 030c 	sub.w	r3, r3, ip
 800e524:	4432      	add	r2, r6
 800e526:	4640      	mov	r0, r8
 800e528:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e52c:	f1be 0e01 	subs.w	lr, lr, #1
 800e530:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e534:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e538:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e53c:	d1db      	bne.n	800e4f6 <__ieee754_sqrt+0xba>
 800e53e:	430b      	orrs	r3, r1
 800e540:	d006      	beq.n	800e550 <__ieee754_sqrt+0x114>
 800e542:	1c50      	adds	r0, r2, #1
 800e544:	bf13      	iteet	ne
 800e546:	3201      	addne	r2, #1
 800e548:	3401      	addeq	r4, #1
 800e54a:	4672      	moveq	r2, lr
 800e54c:	f022 0201 	bicne.w	r2, r2, #1
 800e550:	1063      	asrs	r3, r4, #1
 800e552:	0852      	lsrs	r2, r2, #1
 800e554:	07e1      	lsls	r1, r4, #31
 800e556:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e55a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e55e:	bf48      	it	mi
 800e560:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e564:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e568:	4614      	mov	r4, r2
 800e56a:	e781      	b.n	800e470 <__ieee754_sqrt+0x34>
 800e56c:	0ad9      	lsrs	r1, r3, #11
 800e56e:	3815      	subs	r0, #21
 800e570:	055b      	lsls	r3, r3, #21
 800e572:	2900      	cmp	r1, #0
 800e574:	d0fa      	beq.n	800e56c <__ieee754_sqrt+0x130>
 800e576:	02cd      	lsls	r5, r1, #11
 800e578:	d50a      	bpl.n	800e590 <__ieee754_sqrt+0x154>
 800e57a:	f1c2 0420 	rsb	r4, r2, #32
 800e57e:	fa23 f404 	lsr.w	r4, r3, r4
 800e582:	1e55      	subs	r5, r2, #1
 800e584:	4093      	lsls	r3, r2
 800e586:	4321      	orrs	r1, r4
 800e588:	1b42      	subs	r2, r0, r5
 800e58a:	e78a      	b.n	800e4a2 <__ieee754_sqrt+0x66>
 800e58c:	4610      	mov	r0, r2
 800e58e:	e7f0      	b.n	800e572 <__ieee754_sqrt+0x136>
 800e590:	0049      	lsls	r1, r1, #1
 800e592:	3201      	adds	r2, #1
 800e594:	e7ef      	b.n	800e576 <__ieee754_sqrt+0x13a>
 800e596:	4680      	mov	r8, r0
 800e598:	e7bd      	b.n	800e516 <__ieee754_sqrt+0xda>
 800e59a:	bf00      	nop
 800e59c:	7ff00000 	.word	0x7ff00000

0800e5a0 <with_errno>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	460d      	mov	r5, r1
 800e5a6:	4616      	mov	r6, r2
 800e5a8:	f7fe fd0a 	bl	800cfc0 <__errno>
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	6006      	str	r6, [r0, #0]
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}

0800e5b4 <xflow>:
 800e5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5b6:	4614      	mov	r4, r2
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	b108      	cbz	r0, 800e5c0 <xflow+0xc>
 800e5bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5c0:	e9cd 2300 	strd	r2, r3, [sp]
 800e5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f7f2 f81c 	bl	8000608 <__aeabi_dmul>
 800e5d0:	2222      	movs	r2, #34	; 0x22
 800e5d2:	b003      	add	sp, #12
 800e5d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5d8:	f7ff bfe2 	b.w	800e5a0 <with_errno>

0800e5dc <__math_uflow>:
 800e5dc:	b508      	push	{r3, lr}
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5e4:	f7ff ffe6 	bl	800e5b4 <xflow>
 800e5e8:	ec41 0b10 	vmov	d0, r0, r1
 800e5ec:	bd08      	pop	{r3, pc}

0800e5ee <__math_oflow>:
 800e5ee:	b508      	push	{r3, lr}
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e5f6:	f7ff ffdd 	bl	800e5b4 <xflow>
 800e5fa:	ec41 0b10 	vmov	d0, r0, r1
 800e5fe:	bd08      	pop	{r3, pc}

0800e600 <fabs>:
 800e600:	ec51 0b10 	vmov	r0, r1, d0
 800e604:	ee10 2a10 	vmov	r2, s0
 800e608:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e60c:	ec43 2b10 	vmov	d0, r2, r3
 800e610:	4770      	bx	lr

0800e612 <finite>:
 800e612:	b082      	sub	sp, #8
 800e614:	ed8d 0b00 	vstr	d0, [sp]
 800e618:	9801      	ldr	r0, [sp, #4]
 800e61a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e61e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e622:	0fc0      	lsrs	r0, r0, #31
 800e624:	b002      	add	sp, #8
 800e626:	4770      	bx	lr

0800e628 <scalbn>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	ec55 4b10 	vmov	r4, r5, d0
 800e62e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e632:	4606      	mov	r6, r0
 800e634:	462b      	mov	r3, r5
 800e636:	b99a      	cbnz	r2, 800e660 <scalbn+0x38>
 800e638:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e63c:	4323      	orrs	r3, r4
 800e63e:	d036      	beq.n	800e6ae <scalbn+0x86>
 800e640:	4b39      	ldr	r3, [pc, #228]	; (800e728 <scalbn+0x100>)
 800e642:	4629      	mov	r1, r5
 800e644:	ee10 0a10 	vmov	r0, s0
 800e648:	2200      	movs	r2, #0
 800e64a:	f7f1 ffdd 	bl	8000608 <__aeabi_dmul>
 800e64e:	4b37      	ldr	r3, [pc, #220]	; (800e72c <scalbn+0x104>)
 800e650:	429e      	cmp	r6, r3
 800e652:	4604      	mov	r4, r0
 800e654:	460d      	mov	r5, r1
 800e656:	da10      	bge.n	800e67a <scalbn+0x52>
 800e658:	a32b      	add	r3, pc, #172	; (adr r3, 800e708 <scalbn+0xe0>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	e03a      	b.n	800e6d6 <scalbn+0xae>
 800e660:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e664:	428a      	cmp	r2, r1
 800e666:	d10c      	bne.n	800e682 <scalbn+0x5a>
 800e668:	ee10 2a10 	vmov	r2, s0
 800e66c:	4620      	mov	r0, r4
 800e66e:	4629      	mov	r1, r5
 800e670:	f7f1 fe14 	bl	800029c <__adddf3>
 800e674:	4604      	mov	r4, r0
 800e676:	460d      	mov	r5, r1
 800e678:	e019      	b.n	800e6ae <scalbn+0x86>
 800e67a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e67e:	460b      	mov	r3, r1
 800e680:	3a36      	subs	r2, #54	; 0x36
 800e682:	4432      	add	r2, r6
 800e684:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e688:	428a      	cmp	r2, r1
 800e68a:	dd08      	ble.n	800e69e <scalbn+0x76>
 800e68c:	2d00      	cmp	r5, #0
 800e68e:	a120      	add	r1, pc, #128	; (adr r1, 800e710 <scalbn+0xe8>)
 800e690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e694:	da1c      	bge.n	800e6d0 <scalbn+0xa8>
 800e696:	a120      	add	r1, pc, #128	; (adr r1, 800e718 <scalbn+0xf0>)
 800e698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e69c:	e018      	b.n	800e6d0 <scalbn+0xa8>
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	dd08      	ble.n	800e6b4 <scalbn+0x8c>
 800e6a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e6ae:	ec45 4b10 	vmov	d0, r4, r5
 800e6b2:	bd70      	pop	{r4, r5, r6, pc}
 800e6b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e6b8:	da19      	bge.n	800e6ee <scalbn+0xc6>
 800e6ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e6be:	429e      	cmp	r6, r3
 800e6c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e6c4:	dd0a      	ble.n	800e6dc <scalbn+0xb4>
 800e6c6:	a112      	add	r1, pc, #72	; (adr r1, 800e710 <scalbn+0xe8>)
 800e6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1e2      	bne.n	800e696 <scalbn+0x6e>
 800e6d0:	a30f      	add	r3, pc, #60	; (adr r3, 800e710 <scalbn+0xe8>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	f7f1 ff97 	bl	8000608 <__aeabi_dmul>
 800e6da:	e7cb      	b.n	800e674 <scalbn+0x4c>
 800e6dc:	a10a      	add	r1, pc, #40	; (adr r1, 800e708 <scalbn+0xe0>)
 800e6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0b8      	beq.n	800e658 <scalbn+0x30>
 800e6e6:	a10e      	add	r1, pc, #56	; (adr r1, 800e720 <scalbn+0xf8>)
 800e6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ec:	e7b4      	b.n	800e658 <scalbn+0x30>
 800e6ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6f2:	3236      	adds	r2, #54	; 0x36
 800e6f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <scalbn+0x108>)
 800e700:	2200      	movs	r2, #0
 800e702:	e7e8      	b.n	800e6d6 <scalbn+0xae>
 800e704:	f3af 8000 	nop.w
 800e708:	c2f8f359 	.word	0xc2f8f359
 800e70c:	01a56e1f 	.word	0x01a56e1f
 800e710:	8800759c 	.word	0x8800759c
 800e714:	7e37e43c 	.word	0x7e37e43c
 800e718:	8800759c 	.word	0x8800759c
 800e71c:	fe37e43c 	.word	0xfe37e43c
 800e720:	c2f8f359 	.word	0xc2f8f359
 800e724:	81a56e1f 	.word	0x81a56e1f
 800e728:	43500000 	.word	0x43500000
 800e72c:	ffff3cb0 	.word	0xffff3cb0
 800e730:	3c900000 	.word	0x3c900000

0800e734 <_init>:
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e736:	bf00      	nop
 800e738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73a:	bc08      	pop	{r3}
 800e73c:	469e      	mov	lr, r3
 800e73e:	4770      	bx	lr

0800e740 <_fini>:
 800e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e742:	bf00      	nop
 800e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e746:	bc08      	pop	{r3}
 800e748:	469e      	mov	lr, r3
 800e74a:	4770      	bx	lr
