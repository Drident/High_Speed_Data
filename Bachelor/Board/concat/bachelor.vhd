-- VHDL Entity Board.EC5LP.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 13:07:48 21.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY EC5LP IS
    GENERIC( 
        g_buttonNb : positive := 4;
        g_ledNb    : positive := 8;
        g_vgaBitNb : positive := 3
    );
    PORT( 
        iGCK_clk      : IN     std_ulogic;
        iRST_rst_n    : IN     std_ulogic;
        i_acq_pretrig : IN     std_ulogic;
        i_acq_trig    : IN     std_ulogic;
        i_adc_sdo     : IN     std_ulogic_vector (3 DOWNTO 0);
        i_clk_en      : IN     std_ulogic;
        i_fpga_m      : IN     std_ulogic_vector (3 DOWNTO 0);
        i_fpga_mosi   : IN     std_ulogic;
        i_fpga_sck    : IN     std_ulogic;
        o_adc_nsc     : OUT    std_ulogic;
        o_adc_sclk    : OUT    std_ulogic;
        o_fram_ncs    : OUT    std_ulogic_vector (3 DOWNTO 0);
        o_fram_sclk   : OUT    std_ulogic_vector (3 DOWNTO 0);
        o_fram_sdi    : OUT    std_ulogic_vector (3 DOWNTO 0);
        o_meas_1mhz   : OUT    std_ulogic;
        o_sclk_meas   : OUT    std_ulogic;
        io_fpga_miso  : INOUT  std_ulogic;
        o_acq_done    : INOUT  std_ulogic;
        o_cal         : INOUT  std_ulogic_vector (2 DOWNTO 1)
    );

-- Declarations

END EC5LP ;





LIBRARY ieee;
USE ieee.std_logic_1164.all;

PACKAGE gates IS

--  constant gateDelay: time := 1 ns;
  constant gateDelay: time := 0.1 ns;

END gates;




-- VHDL Entity gates.inverter.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:35:14 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY inverter IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        in1  : IN     std_uLogic;
        out1 : OUT    std_uLogic
    );

-- Declarations

END inverter ;





ARCHITECTURE sim OF inverter IS
BEGIN
  out1 <= NOT in1 after delay;
END sim;




-- VHDL Entity gates.logic1.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:35:13 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY logic1 IS
    PORT( 
        logic_1 : OUT    std_uLogic
    );

-- Declarations

END logic1 ;





ARCHITECTURE sim OF logic1 IS
BEGIN
  logic_1 <= '1';
END sim;




-- VHDL Entity sequential.DFF.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:46:19 08/28/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY DFF IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        CLK : IN     std_uLogic;
        CLR : IN     std_uLogic;
        D   : IN     std_uLogic;
        Q   : OUT    std_uLogic
    );

-- Declarations

END DFF ;





ARCHITECTURE sim OF DFF IS
BEGIN

  process(clk, clr)
  begin
    if clr = '1' then
      q <= '0' after delay;
    elsif rising_edge(clk) then
      q <= d after delay;
    end if;
  end process;

END sim;




-- VHDL Entity Bachelor.mainCircuit.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 18:16:09 27.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY mainCircuit IS
    GENERIC( 
        g_clockFrequency : real := 64.0E6
    );
    PORT( 
        acq_pretrig : IN     std_ulogic;
        acq_trig    : IN     std_ulogic;
        adc_sdo     : IN     std_ulogic_vector (3 DOWNTO 0);
        clk         : IN     std_ulogic;
        clk_en      : IN     std_ulogic;
        fpga_m      : IN     std_ulogic_vector (3 DOWNTO 0);
        fpga_mosi   : IN     std_ulogic;
        fpga_sck    : IN     std_ulogic;
        rst         : IN     std_uLogic;
        adc_nsc     : OUT    std_ulogic;
        adc_sclk    : OUT    std_ulogic;
        cal         : OUT    std_ulogic_vector (2 DOWNTO 1);
        fpga_miso   : OUT    std_ulogic;
        fram_ncs    : OUT    std_ulogic_vector (3 DOWNTO 0);
        fram_sclk   : OUT    std_ulogic_vector (3 DOWNTO 0);
        fram_sdi    : OUT    std_ulogic_vector (3 DOWNTO 0);
        meas_1mhz   : OUT    std_ulogic;
        out1        : OUT    std_ulogic;
        sclk_meas   : OUT    std_uLogic
    );

-- Declarations

END mainCircuit ;





-- VHDL Entity Bachelor.ADC_Write.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 09:08:10 22.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY ADC_Write IS
    PORT( 
        FPGA_clock : IN     std_ulogic;
        SDO        : IN     std_ulogic_vector (3 DOWNTO 0);
        clock      : IN     std_ulogic;
        m          : IN     std_ulogic_vector (3 DOWNTO 0);
        reset      : IN     std_ulogic;
        AW_CLOCK   : OUT    std_ulogic;
        MISO       : OUT    std_ulogic;
        NCs        : OUT    std_ulogic
    );

-- Declarations

END ADC_Write ;





--
-- VHDL Architecture Bachelor.ADC_Write.STUDENT_V3
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 15:30:17 05.07.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE STUDENT_V3 OF ADC_Write IS
	signal count: unsigned(5 downto 0);
	signal go : std_uLogic;
	signal MISO_IN : std_uLogic;
	signal clockOut : std_uLogic;
	signal clockGO : std_uLogic;
BEGIN
	spiMS: process(m, SDO)
	  begin
	    if m = "0010" then
			NCS <= '0';
			--MISO_IN <= SDO(SDO'high);
		else
			NCS <= '1';
			--MISO_IN <= '0';
	    end if;
	  end process spiMS;

	colckSwitch: process(FPGA_clock)
		begin
			if unsigned(m) <= "0010" then
				clockOut <= FPGA_clock;
			else
				clockOut <= '1';
			end if ;
		end process colckSwitch;
	AW_CLOCK <= clockOut;
	--MISO <= MISO_IN;
END ARCHITECTURE STUDENT_V3;





-- VHDL Entity Bachelor.cont_done.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 13:41:26 26.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY cont_done IS
    GENERIC( 
        memory_size : positive := 19;
        delay       : time     := gateDelay
    );
    PORT( 
        M           : IN     std_ulogic_vector (3 DOWNTO 0);
        Trigg       : IN     std_ulogic;
        clock       : IN     std_ulogic;
        go          : IN     std_ulogic;
        preTriggVal : IN     unsigned (7 DOWNTO 0);
        reset       : IN     std_ulogic;
        Memory      : OUT    unsigned (18 DOWNTO 0);
        done        : OUT    std_ulogic
    );

-- Declarations

END cont_done ;





--------------------------------------------------------------------------------
-- Copyright 2012 HES-SO Valais Wallis (www.hevs.ch)
--------------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program IS distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License along with
-- this program. If not, see <http://www.gnu.org/licenses/>
-- -----------------------------------------------------------------------------
-- Common Lib
--
-- -----------------------------------------------------------------------------
--  Authors:
--    cof: [François Corthay](francois.corthay@hevs.ch)
--    guo: [Oliver A. Gubler](oliver.gubler@hevs.ch)
-- -----------------------------------------------------------------------------
-- Changelog:
--   2016-06 : guo
--     added function sel
--   2015-06 : guo
--     added counterBitNb
--     added documentation
-- -----------------------------------------------------------------------------
library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.numeric_std.all;

PACKAGE CommonLib IS

  ------------------------------------------------------------------------------
  -- Returns the number of bits needed to represent the given val
  -- Examples:
  --   requiredBitNb(1) = 1   (1)
  --   requiredBitNb(2) = 2   (10)
  --   requiredBitNb(3) = 2   (11)
  function requiredBitNb(val : integer) return integer;

  ------------------------------------------------------------------------------
  -- Returns the number of bits needed to count val times (0 to val-1)
  -- Examples:
  --   counterBitNb(1) = 1    (0)
  --   counterBitNb(2) = 1    (0->1)
  --   counterBitNb(3) = 2    (0->1->10)
  function counterBitNb(val : integer) return integer;

  ------------------------------------------------------------------------------
  -- Functions to return one or the other input based on a boolean.
  -- Can be used to build conditional constants.
  -- Example:
  --   constant bonjour_c : string := sel(ptpRole = master, "fpga20", "fpga02");
  function sel(Cond : BOOLEAN; If_True, If_False : integer)
                                            return integer;
  function sel(Cond : BOOLEAN; If_True, If_False : string)
                                            return string;
  function sel(Cond : BOOLEAN; If_True, If_False : std_ulogic_vector)
                                            return std_ulogic_vector;
  function sel(Cond : BOOLEAN; If_True, If_False : unsigned)
                                            return unsigned;
  function sel(Cond : BOOLEAN; If_True, If_False : signed)
                                            return signed;

END CommonLib;




--------------------------------------------------------------------------------
-- Copyright 2012 HES-SO Valais Wallis (www.hevs.ch)
--------------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program IS distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License along with
-- this program. If not, see <http://www.gnu.org/licenses/>
-- -----------------------------------------------------------------------------
-- Often used functions
--
-- -----------------------------------------------------------------------------
--  Authors:
--    cof: [François Corthay](francois.corthay@hevs.ch)
--    guo: [Oliver A. Gubler](oliver.gubler@hevs.ch)
-- -----------------------------------------------------------------------------
-- Changelog:
--   2016-06 : guo
--     added function sel
--   2015-06 : guo
--     added counterBitNb
-- -----------------------------------------------------------------------------
PACKAGE BODY CommonLib IS

  function requiredBitNb (val : integer) return integer is
    variable powerOfTwo, bitNb : integer;
  begin
    powerOfTwo := 1;
    bitNb := 0;
    while powerOfTwo <= val loop
      powerOfTwo := 2 * powerOfTwo;
      bitNb := bitNb + 1;
    end loop;
    return bitNb;
  end requiredBitNb;

  function counterBitNb (val : integer) return integer is
    variable powerOfTwo, bitNb : integer;
  begin
    powerOfTwo := 1;
    bitNb := 0;
    while powerOfTwo < val loop
      powerOfTwo := 2 * powerOfTwo;
      bitNb := bitNb + 1;
    end loop;
    return bitNb;
  end counterBitNb;

  function sel(Cond : BOOLEAN; If_True, If_False : integer)
                                            return integer is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : string)
                                            return string is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : std_ulogic_vector)
                                            return std_ulogic_vector is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : unsigned)
                                            return unsigned is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : signed)
                                            return signed is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

END CommonLib;




--
-- VHDL Architecture Bachelor.cont_done.v3_test
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 10:21:22 20.07.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
-- LIBRARY Common;
  use work.CommonLib.all;

ARCHITECTURE v3_test OF cont_done IS
    signal memoryTrig, memoryTrigTest : unsigned((memory_size-1) downto 0);
    signal count_memory: unsigned((memory_size-1) downto 0);
    signal count_preTrig: unsigned((memory_size-1) downto 0);
    signal done_wait : unsigned(3 downto 0);
    constant wait_time          : natural := 4;
    signal Trigg_in : std_uLogic ;
    --signal Trigg: std_uLogic ;
    
BEGIN
  done_Counter: process(reset, clock)
  begin
    if reset = '1' then
      count_preTrig <= (others => '0');
      count_memory <= (others => '0');
      done_wait <= (others => '0');
      done <= '0';
      Memory <= (others => '0');
      memoryTrig  <= (others => '1');
      --Trigg <= '0';

    elsif rising_edge(clock) then
      if go = '1' then
          count_memory <= count_memory+1 ;  
          if count_preTrig /= memoryTrigTest and Trigg_in = '1' then
            count_preTrig <= count_preTrig+1;
            --count_memory <= count_memory+1 ;
          end if ;
      elsif count_preTrig = memoryTrigTest and done = '0' then
          done <= '1';
          Memory <= count_memory;
          --Memory <= memoryTrigTest;
      elsif done = '1' then
          count_preTrig <= (others => '0');
          count_memory <= (others => '0');
          done_wait <= done_wait+1 ;
          if done_wait = wait_time then
            done_wait <= (others => '0');
            done <= '0';
          end if;
      end if;
    end if;
  end process done_Counter;

trigg_set: process(M, Trigg)
  begin
    if M /= "1010" then
      Trigg_in <= '0';
      memoryTrigTest <= resize((memoryTrig/to_unsigned(100,memoryTrig'length))
                                            *preTriggVal,memoryTrig'length);
      --memoryTrigTest <= "1000000000000000001";
    elsif M = "1010" and Trigg = '1' then
      Trigg_in <= '1';
    end if ;
  end process trigg_set;
END ARCHITECTURE v3_test;





-- VHDL Entity sequential.freqDivider.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:46:18 08/28/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY freqDivider IS
    GENERIC( 
        divideValue : positive := 256;
        delay       : time     := gateDelay
    );
    PORT( 
        clock  : IN     std_ulogic;
        reset  : IN     std_ulogic;
        enable : OUT    std_ulogic
    );

-- Declarations

END freqDivider ;





-- LIBRARY Common;
  use work.CommonLib.all;

ARCHITECTURE RTL OF freqDivider IS

  signal count: unsigned(requiredBitNb(divideValue)-1 downto 0);

BEGIN

  countEndlessly: process(reset, clock)
  begin
    if reset = '1' then
      count <= (others => '0');
    elsif rising_edge(clock) then
      if count = 0 then
        count <= to_unsigned(divideValue-1, count'length);
      else
        count <= count-1 ;
      end if;
    end if;
  end process countEndlessly;

  enable <= '1' after delay when count = 0
    else '0' after delay;

END ARCHITECTURE RTL;




-- VHDL Entity sequential.TFF.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:46:18 08/28/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY TFF IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        CLK : IN     std_uLogic;
        CLR : IN     std_uLogic;
        T   : IN     std_uLogic;
        Q   : OUT    std_uLogic
    );

-- Declarations

END TFF ;





ARCHITECTURE sim OF TFF IS

  signal q_int: std_ulogic;

BEGIN

  process(clk, clr)
  begin
    if clr = '1' then
      q_int <= '0' after delay;
    elsif rising_edge(clk) then
      q_int <= t xor q_int after delay;
    end if;
  end process;

  q <= q_int;

END sim;




-- VHDL Entity Bachelor.PRETRIG_VALUE.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 17:21:37 27.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY PRETRIG_VALUE IS
    PORT( 
        MOSI            : IN     std_ulogic;
        clock           : IN     std_ulogic;
        preTrigger      : IN     std_ulogic;
        reset           : IN     std_ulogic;
        stmClk          : IN     std_ulogic;
        preTriggerValue : OUT    unsigned (7 DOWNTO 0)
    );

-- Declarations

END PRETRIG_VALUE ;





--
-- VHDL Architecture Bachelor.PRETRIG_VALUE.STUDENT
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 13:12:09 05.06.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE STUDENT OF PRETRIG_VALUE IS
  signal count_pre: unsigned(3 downto 0);
  signal valuePreTrig_int: unsigned(7 downto 0);
  signal valuePreTrig: unsigned(7 downto 0);
  signal stmClk_old: std_uLogic;
BEGIN
  value_of_preTrig: process(reset, clock)
  begin
    if reset = '1' then
      count_pre <= (others => '0');
      valuePreTrig_int <= "11110000";
      stmClk_old <= stmClk;

    elsif rising_edge(clock) then
      stmClk_old <= stmClk;
      if preTrigger = '1' then
        if stmClk='1' and stmClk_old = '0' then
          valuePreTrig_int <= SHIFT_LEFT(valuePreTrig_int,1);
          valuePreTrig_int(0) <= MOSI;
          --valuePreTrig <= "11110000" ;
        end if;

      end if;
    end if;
  end process value_of_preTrig;

preTriggerValue <= valuePreTrig_int;
END ARCHITECTURE STUDENT;





-- VHDL Entity Bachelor.memory_to_process.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 15:02:31 27.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY memory_to_process IS
    GENERIC( 
        memory_size : positive := 19
    );
    PORT( 
        clock     : IN     std_ulogic;
        m         : IN     std_ulogic_vector (3 DOWNTO 0);
        memoryAdd : IN     unsigned (18 DOWNTO 0);
        reset     : IN     std_ulogic;
        stmClk    : IN     std_ulogic;
        MISO      : OUT    std_ulogic
    );

-- Declarations

END memory_to_process ;





--
-- VHDL Architecture Bachelor.memory_to_process.student
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 10:24:22 07.06.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
-- LIBRARY Common;
  use work.CommonLib.all;
ARCHITECTURE student OF memory_to_process IS
	signal count: unsigned((memory_size-1) downto 0);
	signal count_memory: unsigned((memory_size-1) downto 0);
	signal start_bit: std_uLogic;
	signal stmClk_old: std_uLogic;
	signal MISO_OUT: std_ulogic;
	signal done_int: std_uLogic := '0';
BEGIN
	sendAdd : process(reset, clock)
	begin
		if reset = '1' then
			start_bit <= '0';
			MISO_OUT <= '0';
			stmClk_old <= stmClk;
 			count_memory <= "1000000000000000001";
	    count <= (others => '0');
		elsif rising_edge(clock) then

			stmClk_old <= stmClk;
			if m = "1011" then
			  if stmClk='1' and stmClk_old = '0' then
			    MISO_OUT <= count_memory(count_memory'HIGH);
			    count_memory <= SHIFT_LEFT(count_memory,1);
			  end if;
			else
				count_memory <= memoryAdd;

			  -- React on rising_edge(stmClk)
			  --if stmClk='1' and stmClk_old = '0' then
			  	--MISO_OUT <= not MISO_OUT;
			  --end if;
	    end if;
		end if ;
	end process sendAdd;
	
	MISO <= MISO_OUT;
END ARCHITECTURE student;





-- VHDL Entity gates.bufferUlogic.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:34:48 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY bufferUlogic IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        in1  : IN     std_uLogic;
        out1 : OUT    std_uLogic
    );

-- Declarations

END bufferUlogic ;





ARCHITECTURE sim OF bufferUlogic IS
BEGIN
  out1 <= in1 after delay;
END ARCHITECTURE sim;




-- VHDL Entity Bachelor.FRAM_WriteRead.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 08:35:34 22.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY FRAM_WriteRead IS
    PORT( 
        FPGA_clock : IN     std_logic;
        MOSI       : IN     std_ulogic;
        clock      : IN     std_ulogic;
        m          : IN     std_ulogic_vector (3 DOWNTO 0);
        reset      : IN     std_ulogic;
        NCs        : OUT    std_ulogic_vector (3 DOWNTO 0);
        SCLK_OUT   : OUT    std_ulogic_vector (3 DOWNTO 0);
        SDI        : OUT    std_ulogic_vector (3 DOWNTO 0)
    );

-- Declarations

END FRAM_WriteRead ;





--
-- VHDL Architecture Bachelor.FRAM_WriteRead.STUDENT_V3
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 15:27:53 05.07.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE STUDENT_V3 OF FRAM_WriteRead IS
	signal go 		 		   : std_uLogic;
	signal count 			   : unsigned(7 downto 0);
	signal countValue 		   : unsigned(7 downto 0);
	signal sclk_in	 		   : std_uLogic_vector(3 downto 0);
	constant value_8           : natural := 8;
	constant value_32          : natural := 32;
BEGIN
	spiMS: process(MOSI,m)
	  begin
	  	if m = "0100" then 
			NCs <= "1110";
			SDI(SDI'high-3) <= MOSI;
	    elsif m = "0101" then
	    	NCs <= "1101";
	    	SDI(SDI'high-2) <= MOSI;
	    elsif m = "0110" then
	    	NCs <= "1011";
	    	SDI(SDI'high-1) <= MOSI;
	    elsif m = "0111" then
	    	NCs <= "0111";
	    	SDI(SDI'high) <= MOSI;
	    elsif m = "1000" then
	    	NCs <= (others => '0');
	    	SDI(SDI'high) <= MOSI;
	    	SDI(SDI'high-1) <= MOSI;
	    	SDI(SDI'high-2) <= MOSI;
	    	SDI(SDI'high-3) <= MOSI;
	    else
	    	--NCs <= (others => '1');
			SDI <= (others => '0');
	    end if;
	  end process spiMS;

	colckSwitch: process(FPGA_clock)
		begin
			if unsigned(m) <= "1000" then
				sclk_in(sclk_in'high) <= FPGA_clock;
				sclk_in(sclk_in'high-1) <= FPGA_clock;
				sclk_in(sclk_in'high-2) <= FPGA_clock;
				sclk_in(sclk_in'high-3) <= FPGA_clock;			
			else
				sclk_in <= (others =>'1');
			end if ;
		end process colckSwitch;

	SCLK_OUT<= sclk_in;
END ARCHITECTURE STUDENT_V3;





-- VHDL Entity Bachelor.MAIN_MUX.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 15:28:48 05.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY MAIN_MUX IS
    PORT( 
        AF_CLOCK     : IN     std_ulogic_vector (3 DOWNTO 0);
        AF_CLOCK_ADC : IN     std_ulogic;
        AF_FRAM_SDI  : IN     std_ulogic_vector (3 DOWNTO 0);
        AF_MISO      : IN     std_ulogic;
        AF_NCS_A     : IN     std_ulogic;
        AF_NCS_F     : IN     std_ulogic_vector (3 DOWNTO 0);
        AW_CLOCK     : IN     std_ulogic;
        AW_MISO      : IN     std_ulogic;
        AW_NCS_A     : IN     std_ulogic;
        FW_CLOCK     : IN     std_ulogic_vector (3 DOWNTO 0);
        FW_FRAM_SDI  : IN     std_ulogic_vector (3 DOWNTO 0);
        FW_NCS_F     : IN     std_ulogic_vector (3 DOWNTO 0);
        M            : IN     std_ulogic_vector (3 DOWNTO 0);
        ADC_CLOCK    : OUT    std_ulogic;
        ADC_NCS      : OUT    std_ulogic;
        FRAM_SDI     : OUT    std_ulogic_vector (3 DOWNTO 0);
        FR_CLOCK     : OUT    std_ulogic_vector (3 DOWNTO 0);
        FR_NCS       : OUT    std_ulogic_vector (3 DOWNTO 0);
        MISO         : OUT    std_ulogic
    );

-- Declarations

END MAIN_MUX ;





--
-- VHDL Architecture Bachelor.MAIN_MUX.STUDENT
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 13:08:20 31.05.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE STUDENT OF MAIN_MUX IS
BEGIN
	mux: process(FW_NCS_F,AF_CLOCK,AF_CLOCK_ADC,FW_CLOCK,AW_CLOCK,
									AW_NCS_A,AF_NCS_A,M,AF_MISO)
	-- WARNING IF ERROR IN PHYSIC -> SWITCH CASE METHODE ALEX
	begin
		case M is
			-- init
			when "0000" =>	
				ADC_CLOCK <=  '1';
				FR_CLOCK <= (others => '1');
				ADC_NCS <= '1';
				FR_NCS <= (others => '1');
				FRAM_SDI <= (others => '0');
				MISO <= '1';		
			-- Read/Write ADC
			when "0010" =>	
				ADC_CLOCK <= AW_CLOCK;
				FR_CLOCK <= (others => '1');
				ADC_NCS <= AW_NCS_A;
				--FR_NCS <= (others => '1');
				--FRAM_SDI <= (others => '0');
				MISO <= '1';

			-- ADC to FRAM
			when "1010" =>
				ADC_CLOCK <= AF_CLOCK_ADC;
				FR_CLOCK <= AF_CLOCK;
				ADC_NCS <= AF_NCS_A;
				FR_NCS <= AF_NCS_F;
				FRAM_SDI <= AF_FRAM_SDI;
				MISO <= '1';

			-- ADC to FRAM
			when "1011" =>
				ADC_CLOCK <= '1';
				FR_CLOCK <= (others => '1');
				ADC_NCS <= '1';
				FR_NCS <= (others => '1');
				FRAM_SDI <= (others => '0');
				MISO <= AF_MISO;
				
			-- read/write FRAM
			when others =>
				MISO <= '1';
				if M <= "1000" and M >="0100" then
					--ADC_CLOCK <= '0';
					FR_CLOCK <= FW_CLOCK;
					ADC_NCS <= '1';
					FR_NCS <= FW_NCS_F;
					FRAM_SDI <= FW_FRAM_SDI;
				else
					--FR_NCS <= (others => '1');
					ADC_NCS <= '1';
					ADC_CLOCK <=  '1';
					--FR_CLOCK <= (others => '1');
					FR_CLOCK <= (others => '1');
					FRAM_SDI <= (others => '0');
				end if;
			end case;
	end process mux;
	--MISO <= '1';
END ARCHITECTURE STUDENT;





-- VHDL Entity Bachelor.ADC_TO_FPGA.symbol
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 13:54:20 05.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY ADC_TO_FPGA IS
    GENERIC( 
        counter_length : positive := 19
    );
    PORT( 
        clock      : IN     std_ulogic;
        clock_1m   : IN     std_ulogic;
        done_sig   : IN     std_ulogic;
        m          : IN     std_ulogic_vector (3 DOWNTO 0);
        reset      : IN     std_ulogic;
        sdo        : IN     std_ulogic_vector (3 DOWNTO 0);
        adc_clock  : OUT    std_ulogic;
        count_go   : OUT    std_ulogic;
        fram_clock : OUT    std_ulogic_vector (3 DOWNTO 0);
        ncs_adc    : OUT    std_ulogic;
        ncs_fram   : OUT    std_ulogic_vector (3 DOWNTO 0);
        sdi        : OUT    std_ulogic_vector (3 DOWNTO 0)
    );

-- Declarations

END ADC_TO_FPGA ;





--
-- VHDL Architecture Bachelor.ADC_TO_FPGA.STUDENT
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 11:23:31 31.05.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
-- LIBRARY Common;
  use work.CommonLib.all;

ARCHITECTURE STUDENT OF ADC_TO_FPGA IS
	  signal done16 : std_uLogic ;
	  signal down_ncs : std_uLogic ;
	  signal down_ncs_old : std_uLogic ;
	  signal is_up : std_uLogic ;
	  signal finish_d : std_uLogic ;
	  signal count: unsigned(requiredBitNb(counter_length)-1 downto 0);
BEGIN
	adc_to_fpga: process(clock,reset)
	begin
		if reset = '1' then
			fram_clock <= (others => '1');
			adc_clock <= '1';
			finish_d <= '0';
			--sdi <= (others => '0');
			ncs_fram <= (others => '0');
			ncs_adc <= '1';
			done16 <= '0';
			count <= (others => '0');
			is_up <= '1';
			count_go <= '0';
			down_ncs_old <= '1';
		elsif rising_edge(clock) then
			--if m = "0010" and down_ncs = '0' then
			count_go <= '0';
			if down_ncs /= down_ncs_old and m = "1010" and finish_d = '0' then
				down_ncs_old <= down_ncs;
				is_up <= '0';
			elsif is_up = '0' and finish_d = '0' and m = "1010" then
				ncs_fram <= (others => '0');
				ncs_adc <= '0';
				--sdi <= sdo;
				if count >= 1 and count <= counter_length-3 then
					if count = 8 and count_go = '0' then
						count_go <= '1';
					end if;

					if adc_clock = '1' then 
						adc_clock <= '0';
						fram_clock <= (others => '0');
					else
						adc_clock <= '1';
						fram_clock <= (others => '1');
						--sdi <= sdo;
						count <= count + 1;
					end if;
				elsif count = counter_length-2 then
					count_go <= '1';
					adc_clock <= '1';
					fram_clock <= (others => '1');
					count <= count+1 ;
				elsif count = counter_length-1 then
					is_up <= '1';
					ncs_adc <= '1';
					--sdi <= (others => '0');
					ncs_fram <= (others => '0');
				elsif count = 0 then
					count <= count + 1;
				end if ;
			else 
				count <= (others => '0');
			end if;

			if done_sig = '1' then
				finish_d <= '1';
				ncs_fram <= (others => '1');
				ncs_adc <= '1';
			elsif m /= "1010" then
				finish_d <= '0';
			end if ;

		end if;
	end process adc_to_fpga;

	NCS_clock: process(clock_1m,reset)
	begin
		if reset = '1' then
			down_ncs <= '1';
		elsif rising_edge(clock_1m) then
			--if m = "0010" then
			if down_ncs = '1' and m = "1010" then
				down_ncs <= '0';
			else
				down_ncs <= '1';
			end if; 
		end if;
	end process NCS_clock;

	data_to_trans: process(sdo, m)
	begin
		if m = "1010" then
			sdi <= sdo;
		else
			sdi <= (others => '0');
		end if;
	end process data_to_trans;
END ARCHITECTURE STUDENT;





--
-- VHDL Architecture Bachelor.mainCircuit.struct
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 18:16:09 27.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

-- LIBRARY Bachelor;
-- LIBRARY sequential;

ARCHITECTURE struct OF mainCircuit IS

    -- Architecture declarations

    -- Internal signal declarations
    SIGNAL AW_CLOCK        : std_ulogic;
    SIGNAL MISO_AF         : std_ulogic;
    SIGNAL MISO_AW         : std_ulogic;
    SIGNAL Memory          : unsigned(18 DOWNTO 0);
    SIGNAL T               : std_uLogic;
    SIGNAL adc_nscAF       : std_ulogic;
    SIGNAL adc_nscAW       : std_ulogic;
    SIGNAL adc_sclkAF      : std_ulogic;
    SIGNAL clock_1mhz      : std_ulogic;
    SIGNAL clock_32        : std_uLogic;
    SIGNAL count_go        : std_ulogic;
    SIGNAL enable          : std_ulogic;
    SIGNAL fram_ncsAF      : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL fram_ncsFW      : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL fram_sclkAF     : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL fram_sclkFW     : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL fram_sdiAF      : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL fram_sdiFW      : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL preTriggerValue : unsigned(7 DOWNTO 0);

    -- Implicit buffer signal declarations
    SIGNAL out1_internal : std_ulogic;


    -- Component Declarations
    COMPONENT ADC_TO_FPGA
    GENERIC (
        counter_length : positive := 19
    );
    PORT (
        clock      : IN     std_ulogic ;
        clock_1m   : IN     std_ulogic ;
        done_sig   : IN     std_ulogic ;
        m          : IN     std_ulogic_vector (3 DOWNTO 0);
        reset      : IN     std_ulogic ;
        sdo        : IN     std_ulogic_vector (3 DOWNTO 0);
        adc_clock  : OUT    std_ulogic ;
        count_go   : OUT    std_ulogic ;
        fram_clock : OUT    std_ulogic_vector (3 DOWNTO 0);
        ncs_adc    : OUT    std_ulogic ;
        ncs_fram   : OUT    std_ulogic_vector (3 DOWNTO 0);
        sdi        : OUT    std_ulogic_vector (3 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT ADC_Write
    PORT (
        FPGA_clock : IN     std_ulogic ;
        SDO        : IN     std_ulogic_vector (3 DOWNTO 0);
        clock      : IN     std_ulogic ;
        m          : IN     std_ulogic_vector (3 DOWNTO 0);
        reset      : IN     std_ulogic ;
        AW_CLOCK   : OUT    std_ulogic ;
        MISO       : OUT    std_ulogic ;
        NCs        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT FRAM_WriteRead
    PORT (
        FPGA_clock : IN     std_logic ;
        MOSI       : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        m          : IN     std_ulogic_vector (3 DOWNTO 0);
        reset      : IN     std_ulogic ;
        NCs        : OUT    std_ulogic_vector (3 DOWNTO 0);
        SCLK_OUT   : OUT    std_ulogic_vector (3 DOWNTO 0);
        SDI        : OUT    std_ulogic_vector (3 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT MAIN_MUX
    PORT (
        AF_CLOCK     : IN     std_ulogic_vector (3 DOWNTO 0);
        AF_CLOCK_ADC : IN     std_ulogic ;
        AF_FRAM_SDI  : IN     std_ulogic_vector (3 DOWNTO 0);
        AF_MISO      : IN     std_ulogic ;
        AF_NCS_A     : IN     std_ulogic ;
        AF_NCS_F     : IN     std_ulogic_vector (3 DOWNTO 0);
        AW_CLOCK     : IN     std_ulogic ;
        AW_MISO      : IN     std_ulogic ;
        AW_NCS_A     : IN     std_ulogic ;
        FW_CLOCK     : IN     std_ulogic_vector (3 DOWNTO 0);
        FW_FRAM_SDI  : IN     std_ulogic_vector (3 DOWNTO 0);
        FW_NCS_F     : IN     std_ulogic_vector (3 DOWNTO 0);
        M            : IN     std_ulogic_vector (3 DOWNTO 0);
        ADC_CLOCK    : OUT    std_ulogic ;
        ADC_NCS      : OUT    std_ulogic ;
        FRAM_SDI     : OUT    std_ulogic_vector (3 DOWNTO 0);
        FR_CLOCK     : OUT    std_ulogic_vector (3 DOWNTO 0);
        FR_NCS       : OUT    std_ulogic_vector (3 DOWNTO 0);
        MISO         : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT PRETRIG_VALUE
    PORT (
        MOSI            : IN     std_ulogic ;
        clock           : IN     std_ulogic ;
        preTrigger      : IN     std_ulogic ;
        reset           : IN     std_ulogic ;
        stmClk          : IN     std_ulogic ;
        preTriggerValue : OUT    unsigned (7 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT cont_done
    GENERIC (
        memory_size : positive := 19;
        delay       : time     := gateDelay
    );
    PORT (
        M           : IN     std_ulogic_vector (3 DOWNTO 0);
        Trigg       : IN     std_ulogic ;
        clock       : IN     std_ulogic ;
        go          : IN     std_ulogic ;
        preTriggVal : IN     unsigned (7 DOWNTO 0);
        reset       : IN     std_ulogic ;
        Memory      : OUT    unsigned (18 DOWNTO 0);
        done        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT memory_to_process
    GENERIC (
        memory_size : positive := 19
    );
    PORT (
        clock     : IN     std_ulogic ;
        m         : IN     std_ulogic_vector (3 DOWNTO 0);
        memoryAdd : IN     unsigned (18 DOWNTO 0);
        reset     : IN     std_ulogic ;
        stmClk    : IN     std_ulogic ;
        MISO      : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT bufferUlogic
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT TFF
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        T   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT freqDivider
    GENERIC (
        divideValue : positive := 256;
        delay       : time     := gateDelay
    );
    PORT (
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        enable : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : ADC_TO_FPGA USE ENTITY Bachelor.ADC_TO_FPGA;
--     FOR ALL : ADC_Write USE ENTITY Bachelor.ADC_Write;
--     FOR ALL : FRAM_WriteRead USE ENTITY Bachelor.FRAM_WriteRead;
--     FOR ALL : MAIN_MUX USE ENTITY Bachelor.MAIN_MUX;
--     FOR ALL : PRETRIG_VALUE USE ENTITY Bachelor.PRETRIG_VALUE;
--     FOR ALL : TFF USE ENTITY sequential.TFF;
--     FOR ALL : bufferUlogic USE ENTITY gates.bufferUlogic;
--     FOR ALL : cont_done USE ENTITY Bachelor.cont_done;
--     FOR ALL : freqDivider USE ENTITY sequential.freqDivider;
--     FOR ALL : memory_to_process USE ENTITY Bachelor.memory_to_process;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    U_6 : ADC_TO_FPGA
        GENERIC MAP (
            counter_length => 19
        )
        PORT MAP (
            clock      => clk,
            clock_1m   => clock_1mhz,
            done_sig   => out1_internal,
            m          => fpga_m,
            reset      => rst,
            sdo        => adc_sdo,
            adc_clock  => adc_sclkAF,
            count_go   => count_go,
            fram_clock => fram_sclkAF,
            ncs_adc    => adc_nscAF,
            ncs_fram   => fram_ncsAF,
            sdi        => fram_sdiAF
        );
    U_0 : ADC_Write
        PORT MAP (
            FPGA_clock => fpga_sck,
            SDO        => adc_sdo,
            clock      => clk,
            m          => fpga_m,
            reset      => rst,
            AW_CLOCK   => AW_CLOCK,
            MISO       => MISO_AW,
            NCs        => adc_nscAW
        );
    U_4 : FRAM_WriteRead
        PORT MAP (
            FPGA_clock => fpga_sck,
            MOSI       => fpga_mosi,
            clock      => clk,
            m          => fpga_m,
            reset      => rst,
            NCs        => fram_ncsFW,
            SCLK_OUT   => fram_sclkFW,
            SDI        => fram_sdiFW
        );
    U_5 : MAIN_MUX
        PORT MAP (
            AF_CLOCK     => fram_sclkAF,
            AF_CLOCK_ADC => adc_sclkAF,
            AF_FRAM_SDI  => fram_sdiAF,
            AF_MISO      => MISO_AF,
            AF_NCS_A     => adc_nscAF,
            AF_NCS_F     => fram_ncsAF,
            AW_CLOCK     => AW_CLOCK,
            AW_MISO      => MISO_AW,
            AW_NCS_A     => adc_nscAW,
            FW_CLOCK     => fram_sclkFW,
            FW_FRAM_SDI  => fram_sdiFW,
            FW_NCS_F     => fram_ncsFW,
            M            => fpga_m,
            ADC_CLOCK    => adc_sclk,
            ADC_NCS      => adc_nsc,
            FRAM_SDI     => fram_sdi,
            FR_CLOCK     => fram_sclk,
            FR_NCS       => fram_ncs,
            MISO         => fpga_miso
        );
    U_12 : PRETRIG_VALUE
        PORT MAP (
            MOSI            => fpga_mosi,
            clock           => clk,
            preTrigger      => acq_pretrig,
            reset           => rst,
            stmClk          => fpga_sck,
            preTriggerValue => preTriggerValue
        );
    U_1 : cont_done
        GENERIC MAP (
            memory_size => 19,
            delay       => gateDelay
        )
        PORT MAP (
            M           => fpga_m,
            Trigg       => acq_trig,
            clock       => clk,
            go          => count_go,
            preTriggVal => preTriggerValue,
            reset       => rst,
            Memory      => Memory,
            done        => out1_internal
        );
    U_13 : memory_to_process
        GENERIC MAP (
            memory_size => 19
        )
        PORT MAP (
            clock     => clk,
            m         => fpga_m,
            memoryAdd => Memory,
            reset     => rst,
            stmClk    => fpga_sck,
            MISO      => MISO_AF
        );
    U_14 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => adc_sclkAF,
            out1 => sclk_meas
        );
    U_15 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => adc_nscAF,
            out1 => meas_1mhz
        );
    U_16 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => fpga_sck,
            out1 => cal(2)
        );
    U_17 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => preTriggerValue(4),
            out1 => cal(1)
        );
    U_3 : TFF
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            CLK => clk,
            CLR => rst,
            T   => T,
            Q   => clock_1mhz
        );
    U_11 : TFF
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            CLK => clk,
            CLR => rst,
            T   => enable,
            Q   => clock_32
        );
    U_2 : freqDivider
        GENERIC MAP (
            divideValue => positive(g_clockFrequency/(2*10.0E5)),
            delay       => gateDelay
        )
        PORT MAP (
            clock  => clk,
            reset  => rst,
            enable => T
        );
    U_10 : freqDivider
        GENERIC MAP (
            divideValue => positive(g_clockFrequency/(2*32*10.0E5)),
            delay       => gateDelay
        )
        PORT MAP (
            clock  => clk,
            reset  => rst,
            enable => enable
        );

    -- Implicit buffered output assignments
    out1 <= out1_internal;

END struct;




-- VHDL Entity Lattice.ice40_sbIoOd.symbol
--
-- Created:
--          by - axel.amand.UNKNOWN (WE7860)
--          at - 11:49:25 16.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

ENTITY ice40_sbIoOd IS
    PORT( 
        clk    : IN     std_ulogic;
        rgbWr  : IN     std_ulogic;
        rgbRd  : OUT    std_ulogic;
        rgbPin : INOUT  std_ulogic
    );

-- Declarations

END ice40_sbIoOd ;





library sb_ice40_components_syn;
  use sb_ice40_components_syn.components.all;

 

ARCHITECTURE rtl OF ice40_sbIoOd IS
BEGIN
  ODInst : SB_IO_OD     
    generic map (
      NEG_TRIGGER => '0',      -- FF's are rising edge
      PIN_TYPE    => "011001"  -- 01 => output en, 10 => out = DOUT0, 01 = DIN0 clocked
    ) 
    port map ( 
      DOUT1 => open,           -- Output on falling edge
      DOUT0 =>  rgbWr,         -- Output on rising edge
      CLOCKENABLE => '0',      -- No clock needed w. PIN_TYPE
      LATCHINPUTVALUE => '0',  -- Input clocked, not latched
      INPUTCLK => clk,         -- No clock needed w. PIN_TYPE
      DIN1 => open,            -- Input on falling edge
      DIN0 => rgbRd,           -- Input value, rising clocked
      OUTPUTENABLE => '1',     -- Output always EN w. PIN_TYPE
      OUTPUTCLK => '0',        -- No clock needed w. PIN_TYPE
      PACKAGEPIN  => rgbPin    -- Userâs Pin signal name
    );
END ARCHITECTURE rtl;





--
-- VHDL Architecture Board.EC5LP.struct
--
-- Created:
--          by - christop.grobety.UNKNOWN (WE2332207)
--          at - 18:06:21 27.07.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

-- LIBRARY gates;
  use work.gates.all;

-- LIBRARY Bachelor;
-- LIBRARY Lattice;
-- LIBRARY sequential;

ARCHITECTURE struct OF EC5LP IS

    -- Architecture declarations
    constant c_clockFrequency: real := 64.0E6;

    -- Internal signal declarations
    SIGNAL T                 : std_uLogic;
    SIGNAL acq_done_o        : std_ulogic;
    SIGNAL acq_pretrig       : std_ulogic;
    SIGNAL acq_trig          : std_ulogic;
    SIGNAL adc_sdo           : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL cal_o             : std_ulogic_vector(2 DOWNTO 1);
    SIGNAL clk               : std_uLogic;
    SIGNAL clk_en            : std_ulogic;
    SIGNAL div_clk           : std_uLogic;
    SIGNAL fpga_m            : std_ulogic_vector(3 DOWNTO 0);
    SIGNAL fpga_miso_in      : std_ulogic;
    SIGNAL fpga_miso_out     : std_ulogic;
    SIGNAL fpga_mosi         : std_ulogic;
    SIGNAL fpga_sck          : std_ulogic;
    SIGNAL i_rst             : std_ulogic;
    SIGNAL logic_1           : std_uLogic;
    SIGNAL lsig_resetSynch_n : std_ulogic;
    SIGNAL rst               : std_ulogic;


    -- Component Declarations
    COMPONENT mainCircuit
    GENERIC (
        g_clockFrequency : real := 64.0E6
    );
    PORT (
        acq_pretrig : IN     std_ulogic ;
        acq_trig    : IN     std_ulogic ;
        adc_sdo     : IN     std_ulogic_vector (3 DOWNTO 0);
        clk         : IN     std_ulogic ;
        clk_en      : IN     std_ulogic ;
        fpga_m      : IN     std_ulogic_vector (3 DOWNTO 0);
        fpga_mosi   : IN     std_ulogic ;
        fpga_sck    : IN     std_ulogic ;
        rst         : IN     std_uLogic ;
        adc_nsc     : OUT    std_ulogic ;
        adc_sclk    : OUT    std_ulogic ;
        cal         : OUT    std_ulogic_vector (2 DOWNTO 1);
        fpga_miso   : OUT    std_ulogic ;
        fram_ncs    : OUT    std_ulogic_vector (3 DOWNTO 0);
        fram_sclk   : OUT    std_ulogic_vector (3 DOWNTO 0);
        fram_sdi    : OUT    std_ulogic_vector (3 DOWNTO 0);
        meas_1mhz   : OUT    std_ulogic ;
        out1        : OUT    std_ulogic ;
        sclk_meas   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT bufferUlogic
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT inverter
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT logic1
    PORT (
        logic_1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT ice40_sbIoOd
    PORT (
        clk    : IN     std_ulogic ;
        rgbWr  : IN     std_ulogic ;
        rgbRd  : OUT    std_ulogic ;
        rgbPin : INOUT  std_ulogic 
    );
    END COMPONENT;
    COMPONENT DFF
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        D   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT TFF
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        T   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT freqDivider
    GENERIC (
        divideValue : positive := 256;
        delay       : time     := gateDelay
    );
    PORT (
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        enable : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : DFF USE ENTITY sequential.DFF;
--     FOR ALL : TFF USE ENTITY sequential.TFF;
--     FOR ALL : bufferUlogic USE ENTITY gates.bufferUlogic;
--     FOR ALL : freqDivider USE ENTITY sequential.freqDivider;
--     FOR ALL : ice40_sbIoOd USE ENTITY Lattice.ice40_sbIoOd;
--     FOR ALL : inverter USE ENTITY gates.inverter;
--     FOR ALL : logic1 USE ENTITY gates.logic1;
--     FOR ALL : mainCircuit USE ENTITY Bachelor.mainCircuit;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    -- Synchronize inputs on the clock
    clock_sync: process(rst, clk)
    begin
    
      if rst = '1' then
        acq_pretrig <= '0';
        acq_trig <= '0';
        fpga_m <= (others => '0');
        adc_sdo <= (others => '0');
        fpga_sck <= '0';
        fpga_mosi <= '0';
        clk_en <= '0';
    
     elsif rising_edge(clk) then
        acq_pretrig <= i_acq_pretrig;
        acq_trig <= i_acq_trig;
        fpga_m <= i_fpga_m;
        adc_sdo <= i_adc_sdo;
        fpga_mosi <= i_fpga_mosi;
        fpga_sck <= i_fpga_sck;
        clk_en <= i_clk_en;
      end if;
    
    end process clock_sync;
    
    
    
    

    -- HDL Embedded Text Block 2 eb2
    io_fpga_miso <= '0' when fpga_miso_out = '0' else 'Z';
    
    process(rst, clk)
    begin
      if rst = '1' then
        fpga_miso_in <= '0';
      elsif rising_edge(clk) then
        fpga_miso_in <= io_fpga_miso;
      end if;
    end process;


    -- Instance port mappings.
    I_DUT : mainCircuit
        GENERIC MAP (
            g_clockFrequency => c_clockFrequency
        )
        PORT MAP (
            acq_pretrig => acq_pretrig,
            acq_trig    => acq_trig,
            adc_sdo     => adc_sdo,
            clk         => clk,
            clk_en      => clk_en,
            fpga_m      => fpga_m,
            fpga_mosi   => fpga_mosi,
            fpga_sck    => fpga_sck,
            rst         => rst,
            adc_nsc     => o_adc_nsc,
            adc_sclk    => o_adc_sclk,
            cal         => cal_o,
            fpga_miso   => fpga_miso_out,
            fram_ncs    => o_fram_ncs,
            fram_sclk   => o_fram_sclk,
            fram_sdi    => o_fram_sdi,
            meas_1mhz   => o_meas_1mhz,
            out1        => acq_done_o,
            sclk_meas   => o_sclk_meas
        );
    U_0 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => iGCK_clk,
            out1 => clk
        );
    I1 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => iRST_rst_n,
            out1 => i_rst
        );
    I7 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => lsig_resetSynch_n,
            out1 => rst
        );
    I28 : logic1
        PORT MAP (
            logic_1 => logic_1
        );
    U_4 : ice40_sbIoOd
        PORT MAP (
            clk    => clk,
            rgbWr  => acq_done_o,
            rgbRd  => OPEN,
            rgbPin => o_acq_done
        );
    U_7 : ice40_sbIoOd
        PORT MAP (
            clk    => clk,
            rgbWr  => cal_o(2),
            rgbRd  => OPEN,
            rgbPin => o_cal(2)
        );
    U_8 : ice40_sbIoOd
        PORT MAP (
            clk    => clk,
            rgbWr  => cal_o(1),
            rgbRd  => OPEN,
            rgbPin => o_cal(1)
        );
    I6 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => iGCK_clk,
            CLR => i_rst,
            D   => logic_1,
            Q   => lsig_resetSynch_n
        );
    U_6 : TFF
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            CLK => clk,
            CLR => rst,
            T   => T,
            Q   => div_clk
        );
    U_5 : freqDivider
        GENERIC MAP (
            divideValue => positive(c_clockFrequency/(2*10.0E5)),
            delay       => gateDelay
        )
        PORT MAP (
            clock  => clk,
            reset  => rst,
            enable => T
        );

END struct;




